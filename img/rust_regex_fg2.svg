<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="422" onload="init(evt)" viewBox="0 0 1200 422" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="422" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="405.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="405.00"> </text><svg id="frames" x="10" width="1180"><g><title>libsystem_malloc.dylib`free_tiny (5 samples, 0.12%)</title><rect x="0.3345%" y="213" width="0.1195%" height="15" fill="rgb(227,0,7)"/><text x="0.5845%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (6 samples, 0.14%)</title><rect x="0.5257%" y="197" width="0.1434%" height="15" fill="rgb(217,0,24)"/><text x="0.7757%" y="207.50"></text></g><g><title>v1_1`alloc::sync::Arc&lt;T&gt;::drop_slow (19 samples, 0.45%)</title><rect x="0.2628%" y="229" width="0.4540%" height="15" fill="rgb(221,193,54)"/><text x="0.5128%" y="239.50"></text></g><g><title>v1_1`core::ptr::drop_in_place (11 samples, 0.26%)</title><rect x="0.4540%" y="213" width="0.2628%" height="15" fill="rgb(248,212,6)"/><text x="0.7040%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (11 samples, 0.26%)</title><rect x="0.9080%" y="197" width="0.2628%" height="15" fill="rgb(208,68,35)"/><text x="1.1580%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (6 samples, 0.14%)</title><rect x="1.0275%" y="181" width="0.1434%" height="15" fill="rgb(232,128,0)"/><text x="1.2775%" y="191.50"></text></g><g><title>v1_1`core::ptr::drop_in_place (45 samples, 1.08%)</title><rect x="0.2389%" y="245" width="1.0753%" height="15" fill="rgb(207,160,47)"/><text x="0.4889%" y="255.50"></text></g><g><title>v1_1`core::ptr::drop_in_place (25 samples, 0.60%)</title><rect x="0.7168%" y="229" width="0.5974%" height="15" fill="rgb(228,23,34)"/><text x="0.9668%" y="239.50"></text></g><g><title>v1_1`core::ptr::drop_in_place (21 samples, 0.50%)</title><rect x="0.8124%" y="213" width="0.5018%" height="15" fill="rgb(218,30,26)"/><text x="1.0624%" y="223.50"></text></g><g><title>v1_1`regex::dfa::Fsm::cached_state (10 samples, 0.24%)</title><rect x="1.4337%" y="229" width="0.2389%" height="15" fill="rgb(220,122,19)"/><text x="1.6837%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (5 samples, 0.12%)</title><rect x="2.2700%" y="133" width="0.1195%" height="15" fill="rgb(250,228,42)"/><text x="2.5200%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (10 samples, 0.24%)</title><rect x="2.2222%" y="181" width="0.2389%" height="15" fill="rgb(240,193,28)"/><text x="2.4722%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (10 samples, 0.24%)</title><rect x="2.2222%" y="165" width="0.2389%" height="15" fill="rgb(216,20,37)"/><text x="2.4722%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (9 samples, 0.22%)</title><rect x="2.2461%" y="149" width="0.2151%" height="15" fill="rgb(206,188,39)"/><text x="2.4961%" y="159.50"></text></g><g><title>v1_1`regex::dfa::Fsm::add_state (19 samples, 0.45%)</title><rect x="2.1266%" y="197" width="0.4540%" height="15" fill="rgb(217,207,13)"/><text x="2.3766%" y="207.50"></text></g><g><title>v1_1`regex::dfa::Fsm::cached_state (32 samples, 0.76%)</title><rect x="1.8638%" y="213" width="0.7646%" height="15" fill="rgb(231,73,38)"/><text x="2.1138%" y="223.50"></text></g><g><title>v1_1`regex::dfa::Fsm::follow_epsilons (12 samples, 0.29%)</title><rect x="2.6284%" y="213" width="0.2867%" height="15" fill="rgb(225,20,46)"/><text x="2.8784%" y="223.50"></text></g><g><title>v1_1`regex::dfa::Fsm::next_state (52 samples, 1.24%)</title><rect x="1.6965%" y="229" width="1.2425%" height="15" fill="rgb(210,31,41)"/><text x="1.9465%" y="239.50"></text></g><g><title>v1_1`regex::dfa::Cache::new (6 samples, 0.14%)</title><rect x="3.1063%" y="197" width="0.1434%" height="15" fill="rgb(221,200,47)"/><text x="3.3563%" y="207.50"></text></g><g><title>v1_1`regex::re_unicode::Regex::is_match (82 samples, 1.96%)</title><rect x="1.3142%" y="245" width="1.9594%" height="15" fill="rgb(226,26,5)"/><text x="1.5642%" y="255.50">v..</text></g><g><title>v1_1`thread_local::cached::CachedThreadLocal&lt;T&gt;::get_or_try_slow (10 samples, 0.24%)</title><rect x="3.0346%" y="229" width="0.2389%" height="15" fill="rgb(249,33,26)"/><text x="3.2846%" y="239.50"></text></g><g><title>v1_1`regex::exec::ProgramCacheInner::new (9 samples, 0.22%)</title><rect x="3.0585%" y="213" width="0.2151%" height="15" fill="rgb(235,183,28)"/><text x="3.3085%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc (5 samples, 0.12%)</title><rect x="3.6559%" y="197" width="0.1195%" height="15" fill="rgb(221,5,38)"/><text x="3.9059%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Nehalem (7 samples, 0.17%)</title><rect x="3.8471%" y="197" width="0.1673%" height="15" fill="rgb(247,18,42)"/><text x="4.0971%" y="207.50"></text></g><g><title>v1_1`&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (11 samples, 0.26%)</title><rect x="4.0143%" y="197" width="0.2628%" height="15" fill="rgb(241,131,45)"/><text x="4.2643%" y="207.50"></text></g><g><title>v1_1`&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (6 samples, 0.14%)</title><rect x="4.1338%" y="181" width="0.1434%" height="15" fill="rgb(249,31,29)"/><text x="4.3838%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (5 samples, 0.12%)</title><rect x="4.1577%" y="165" width="0.1195%" height="15" fill="rgb(225,111,53)"/><text x="4.4077%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (5 samples, 0.12%)</title><rect x="4.1577%" y="149" width="0.1195%" height="15" fill="rgb(238,160,17)"/><text x="4.4077%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc (5 samples, 0.12%)</title><rect x="4.5161%" y="181" width="0.1195%" height="15" fill="rgb(214,148,48)"/><text x="4.7661%" y="191.50"></text></g><g><title>v1_1`regex::compile::Compiler::c (7 samples, 0.17%)</title><rect x="4.7312%" y="165" width="0.1673%" height="15" fill="rgb(232,36,49)"/><text x="4.9812%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (9 samples, 0.22%)</title><rect x="5.0657%" y="149" width="0.2151%" height="15" fill="rgb(209,103,24)"/><text x="5.3157%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (9 samples, 0.22%)</title><rect x="5.0657%" y="133" width="0.2151%" height="15" fill="rgb(229,88,8)"/><text x="5.3157%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (9 samples, 0.22%)</title><rect x="5.0657%" y="117" width="0.2151%" height="15" fill="rgb(213,181,19)"/><text x="5.3157%" y="127.50"></text></g><g><title>v1_1`&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.17%)</title><rect x="5.2808%" y="149" width="0.1673%" height="15" fill="rgb(254,191,54)"/><text x="5.5308%" y="159.50"></text></g><g><title>v1_1`regex::compile::Compiler::push_compiled (8 samples, 0.19%)</title><rect x="5.5914%" y="133" width="0.1912%" height="15" fill="rgb(241,83,37)"/><text x="5.8414%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (5 samples, 0.12%)</title><rect x="5.6631%" y="117" width="0.1195%" height="15" fill="rgb(233,36,39)"/><text x="5.9131%" y="127.50"></text></g><g><title>v1_1`regex::compile::CompileClass::c_utf8_seq (24 samples, 0.57%)</title><rect x="5.4480%" y="149" width="0.5735%" height="15" fill="rgb(226,3,54)"/><text x="5.6980%" y="159.50"></text></g><g><title>v1_1`regex::compile::SuffixCache::get (10 samples, 0.24%)</title><rect x="5.7826%" y="133" width="0.2389%" height="15" fill="rgb(245,192,40)"/><text x="6.0326%" y="143.50"></text></g><g><title>v1_1`regex::compile::Compiler::c_class (52 samples, 1.24%)</title><rect x="4.8984%" y="165" width="1.2425%" height="15" fill="rgb(238,167,29)"/><text x="5.1484%" y="175.50"></text></g><g><title>v1_1`regex::compile::Compiler::c (66 samples, 1.58%)</title><rect x="4.6834%" y="181" width="1.5771%" height="15" fill="rgb(232,182,51)"/><text x="4.9334%" y="191.50"></text></g><g><title>v1_1`regex::compile::Compiler::fill (5 samples, 0.12%)</title><rect x="6.1410%" y="165" width="0.1195%" height="15" fill="rgb(231,60,39)"/><text x="6.3910%" y="175.50"></text></g><g><title>v1_1`regex::compile::Compiler::c_capture (7 samples, 0.17%)</title><rect x="6.2605%" y="181" width="0.1673%" height="15" fill="rgb(208,69,12)"/><text x="6.5105%" y="191.50"></text></g><g><title>v1_1`regex::compile::Compiler::c (5 samples, 0.12%)</title><rect x="6.3082%" y="165" width="0.1195%" height="15" fill="rgb(235,93,37)"/><text x="6.5582%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (5 samples, 0.12%)</title><rect x="6.7145%" y="117" width="0.1195%" height="15" fill="rgb(213,116,39)"/><text x="6.9645%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (5 samples, 0.12%)</title><rect x="6.7145%" y="101" width="0.1195%" height="15" fill="rgb(222,207,29)"/><text x="6.9645%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`realloc (6 samples, 0.14%)</title><rect x="6.7145%" y="133" width="0.1434%" height="15" fill="rgb(206,96,30)"/><text x="6.9645%" y="143.50"></text></g><g><title>v1_1`regex::compile::Compiler::push_compiled (6 samples, 0.14%)</title><rect x="6.9773%" y="117" width="0.1434%" height="15" fill="rgb(218,138,4)"/><text x="7.2273%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`realloc (5 samples, 0.12%)</title><rect x="7.0012%" y="101" width="0.1195%" height="15" fill="rgb(250,191,14)"/><text x="7.2512%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (5 samples, 0.12%)</title><rect x="7.0012%" y="85" width="0.1195%" height="15" fill="rgb(239,60,40)"/><text x="7.2512%" y="95.50"></text></g><g><title>v1_1`regex::compile::CompileClass::c_utf8_seq (11 samples, 0.26%)</title><rect x="6.9295%" y="133" width="0.2628%" height="15" fill="rgb(206,27,48)"/><text x="7.1795%" y="143.50"></text></g><g><title>v1_1`regex::compile::Compiler::c_repeat_zero_or_more (28 samples, 0.67%)</title><rect x="6.5711%" y="165" width="0.6691%" height="15" fill="rgb(225,35,8)"/><text x="6.8211%" y="175.50"></text></g><g><title>v1_1`regex::compile::Compiler::c_class (28 samples, 0.67%)</title><rect x="6.5711%" y="149" width="0.6691%" height="15" fill="rgb(250,213,24)"/><text x="6.8211%" y="159.50"></text></g><g><title>v1_1`regex::compile::Compiler::c_dotstar (35 samples, 0.84%)</title><rect x="6.4277%" y="181" width="0.8363%" height="15" fill="rgb(247,123,22)"/><text x="6.6777%" y="191.50"></text></g><g><title>v1_1`regex::compile::Compiler::compile_finish (35 samples, 0.84%)</title><rect x="7.2879%" y="181" width="0.8363%" height="15" fill="rgb(231,138,38)"/><text x="7.5379%" y="191.50"></text></g><g><title>v1_1`regex::compile::Compiler::compile (154 samples, 3.68%)</title><rect x="4.4683%" y="197" width="3.6798%" height="15" fill="rgb(231,145,46)"/><text x="4.7183%" y="207.50">v1_1..</text></g><g><title>libsystem_malloc.dylib`calloc (7 samples, 0.17%)</title><rect x="8.1959%" y="181" width="0.1673%" height="15" fill="rgb(251,118,11)"/><text x="8.4459%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_calloc (7 samples, 0.17%)</title><rect x="8.1959%" y="165" width="0.1673%" height="15" fill="rgb(217,147,25)"/><text x="8.4459%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (7 samples, 0.17%)</title><rect x="8.1959%" y="149" width="0.1673%" height="15" fill="rgb(247,81,37)"/><text x="8.4459%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (7 samples, 0.17%)</title><rect x="8.1959%" y="133" width="0.1673%" height="15" fill="rgb(209,12,38)"/><text x="8.4459%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Ivybridge (5 samples, 0.12%)</title><rect x="8.2437%" y="117" width="0.1195%" height="15" fill="rgb(227,1,9)"/><text x="8.4937%" y="127.50"></text></g><g><title>v1_1`regex::compile::Compiler::new (16 samples, 0.38%)</title><rect x="8.1481%" y="197" width="0.3823%" height="15" fill="rgb(248,47,43)"/><text x="8.3981%" y="207.50"></text></g><g><title>v1_1`regex_syntax::hir::literal::Literals::cross_product (11 samples, 0.26%)</title><rect x="8.7216%" y="181" width="0.2628%" height="15" fill="rgb(221,10,30)"/><text x="8.9716%" y="191.50"></text></g><g><title>v1_1`regex_syntax::hir::literal::prefixes (18 samples, 0.43%)</title><rect x="8.6022%" y="197" width="0.4301%" height="15" fill="rgb(210,229,1)"/><text x="8.8522%" y="207.50"></text></g><g><title>v1_1`regex_syntax::hir::literal::Literals::cross_product (5 samples, 0.12%)</title><rect x="9.0800%" y="181" width="0.1195%" height="15" fill="rgb(222,148,37)"/><text x="9.3300%" y="191.50"></text></g><g><title>v1_1`regex_syntax::hir::literal::suffixes (8 samples, 0.19%)</title><rect x="9.0323%" y="197" width="0.1912%" height="15" fill="rgb(234,67,33)"/><text x="9.2823%" y="207.50"></text></g><g><title>v1_1`&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (9 samples, 0.22%)</title><rect x="9.4624%" y="181" width="0.2151%" height="15" fill="rgb(247,98,35)"/><text x="9.7124%" y="191.50"></text></g><g><title>v1_1`core::ptr::drop_in_place (6 samples, 0.14%)</title><rect x="9.6774%" y="181" width="0.1434%" height="15" fill="rgb(247,138,52)"/><text x="9.9274%" y="191.50"></text></g><g><title>v1_1`&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (6 samples, 0.14%)</title><rect x="9.6774%" y="165" width="0.1434%" height="15" fill="rgb(213,79,30)"/><text x="9.9274%" y="175.50"></text></g><g><title>v1_1`core::iter::traits::iterator::Iterator::max_by_key::key::_{{closure}} (412 samples, 9.84%)</title><rect x="0.1912%" y="261" width="9.8447%" height="15" fill="rgb(246,177,23)"/><text x="0.4412%" y="271.50">v1_1`core::ite..</text></g><g><title>v1_1`v1_1::matches (282 samples, 6.74%)</title><rect x="3.2975%" y="245" width="6.7384%" height="15" fill="rgb(230,62,27)"/><text x="3.5475%" y="255.50">v1_1`v1_1..</text></g><g><title>v1_1`regex::re_unicode::Regex::new (280 samples, 6.69%)</title><rect x="3.3453%" y="229" width="6.6906%" height="15" fill="rgb(216,154,8)"/><text x="3.5953%" y="239.50">v1_1`rege..</text></g><g><title>v1_1`regex::exec::ExecBuilder::build (275 samples, 6.57%)</title><rect x="3.4648%" y="213" width="6.5711%" height="15" fill="rgb(244,35,45)"/><text x="3.7148%" y="223.50">v1_1`rege..</text></g><g><title>v1_1`regex_syntax::parser::Parser::parse (34 samples, 0.81%)</title><rect x="9.2234%" y="197" width="0.8124%" height="15" fill="rgb(251,115,12)"/><text x="9.4734%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (5 samples, 0.12%)</title><rect x="10.2748%" y="229" width="0.1195%" height="15" fill="rgb(240,54,50)"/><text x="10.5248%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (13 samples, 0.31%)</title><rect x="10.5854%" y="213" width="0.3106%" height="15" fill="rgb(233,84,52)"/><text x="10.8354%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_small (8 samples, 0.19%)</title><rect x="10.8961%" y="213" width="0.1912%" height="15" fill="rgb(207,117,47)"/><text x="11.1461%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (7 samples, 0.17%)</title><rect x="11.0872%" y="213" width="0.1673%" height="15" fill="rgb(249,43,39)"/><text x="11.3372%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (13 samples, 0.31%)</title><rect x="11.4695%" y="197" width="0.3106%" height="15" fill="rgb(209,38,44)"/><text x="11.7195%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (9 samples, 0.22%)</title><rect x="11.5651%" y="181" width="0.2151%" height="15" fill="rgb(236,212,23)"/><text x="11.8151%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (30 samples, 0.72%)</title><rect x="11.8041%" y="197" width="0.7168%" height="15" fill="rgb(242,79,21)"/><text x="12.0541%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (16 samples, 0.38%)</title><rect x="12.1386%" y="181" width="0.3823%" height="15" fill="rgb(211,96,35)"/><text x="12.3886%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (5 samples, 0.12%)</title><rect x="12.4014%" y="165" width="0.1195%" height="15" fill="rgb(253,215,40)"/><text x="12.6514%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (7 samples, 0.17%)</title><rect x="12.8315%" y="181" width="0.1673%" height="15" fill="rgb(211,81,21)"/><text x="13.0815%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (29 samples, 0.69%)</title><rect x="12.9988%" y="181" width="0.6930%" height="15" fill="rgb(208,190,38)"/><text x="13.2488%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (10 samples, 0.24%)</title><rect x="13.4528%" y="165" width="0.2389%" height="15" fill="rgb(235,213,38)"/><text x="13.7028%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_small (12 samples, 0.29%)</title><rect x="13.6918%" y="181" width="0.2867%" height="15" fill="rgb(237,122,38)"/><text x="13.9418%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (8 samples, 0.19%)</title><rect x="14.8865%" y="165" width="0.1912%" height="15" fill="rgb(244,218,35)"/><text x="15.1365%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (99 samples, 2.37%)</title><rect x="13.9785%" y="181" width="2.3656%" height="15" fill="rgb(240,68,47)"/><text x="14.2285%" y="191.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (53 samples, 1.27%)</title><rect x="15.0777%" y="165" width="1.2664%" height="15" fill="rgb(210,16,53)"/><text x="15.3277%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (15 samples, 0.36%)</title><rect x="15.9857%" y="149" width="0.3584%" height="15" fill="rgb(235,124,12)"/><text x="16.2357%" y="159.50"></text></g><g><title>v1_1`alloc::sync::Arc&lt;T&gt;::drop_slow (216 samples, 5.16%)</title><rect x="11.3740%" y="213" width="5.1613%" height="15" fill="rgb(224,169,11)"/><text x="11.6240%" y="223.50">v1_1`a..</text></g><g><title>v1_1`core::ptr::drop_in_place (166 samples, 3.97%)</title><rect x="12.5687%" y="197" width="3.9665%" height="15" fill="rgb(250,166,2)"/><text x="12.8187%" y="207.50">v1_1..</text></g><g><title>libsystem_malloc.dylib`free (10 samples, 0.24%)</title><rect x="16.6547%" y="197" width="0.2389%" height="15" fill="rgb(242,216,29)"/><text x="16.9047%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (15 samples, 0.36%)</title><rect x="16.9176%" y="197" width="0.3584%" height="15" fill="rgb(230,116,27)"/><text x="17.1676%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (7 samples, 0.17%)</title><rect x="17.1087%" y="181" width="0.1673%" height="15" fill="rgb(228,99,48)"/><text x="17.3587%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (21 samples, 0.50%)</title><rect x="17.4432%" y="181" width="0.5018%" height="15" fill="rgb(253,11,6)"/><text x="17.6932%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (15 samples, 0.36%)</title><rect x="17.5866%" y="165" width="0.3584%" height="15" fill="rgb(247,143,39)"/><text x="17.8366%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_small (7 samples, 0.17%)</title><rect x="17.9450%" y="181" width="0.1673%" height="15" fill="rgb(236,97,10)"/><text x="18.1950%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (57 samples, 1.36%)</title><rect x="18.1123%" y="181" width="1.3620%" height="15" fill="rgb(233,208,19)"/><text x="18.3623%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (34 samples, 0.81%)</title><rect x="18.6619%" y="165" width="0.8124%" height="15" fill="rgb(216,164,2)"/><text x="18.9119%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (7 samples, 0.17%)</title><rect x="19.3070%" y="149" width="0.1673%" height="15" fill="rgb(220,129,5)"/><text x="19.5570%" y="159.50"></text></g><g><title>v1_1`core::ptr::drop_in_place (375 samples, 8.96%)</title><rect x="10.5376%" y="229" width="8.9606%" height="15" fill="rgb(242,17,10)"/><text x="10.7876%" y="239.50">v1_1`core::pt..</text></g><g><title>v1_1`core::ptr::drop_in_place (124 samples, 2.96%)</title><rect x="16.5352%" y="213" width="2.9630%" height="15" fill="rgb(242,107,0)"/><text x="16.7852%" y="223.50">v1_..</text></g><g><title>v1_1`core::ptr::drop_in_place (92 samples, 2.20%)</title><rect x="17.2999%" y="197" width="2.1983%" height="15" fill="rgb(251,28,31)"/><text x="17.5499%" y="207.50">v..</text></g><g><title>libsystem_malloc.dylib`malloc (6 samples, 0.14%)</title><rect x="20.1912%" y="197" width="0.1434%" height="15" fill="rgb(233,223,10)"/><text x="20.4412%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (5 samples, 0.12%)</title><rect x="20.2151%" y="181" width="0.1195%" height="15" fill="rgb(215,21,27)"/><text x="20.4651%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (5 samples, 0.12%)</title><rect x="20.2151%" y="165" width="0.1195%" height="15" fill="rgb(232,23,21)"/><text x="20.4651%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc (6 samples, 0.14%)</title><rect x="20.4301%" y="181" width="0.1434%" height="15" fill="rgb(244,5,23)"/><text x="20.6801%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (6 samples, 0.14%)</title><rect x="20.4301%" y="165" width="0.1434%" height="15" fill="rgb(226,81,46)"/><text x="20.6801%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (6 samples, 0.14%)</title><rect x="20.4301%" y="149" width="0.1434%" height="15" fill="rgb(247,70,30)"/><text x="20.6801%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (5 samples, 0.12%)</title><rect x="20.4540%" y="133" width="0.1195%" height="15" fill="rgb(212,68,19)"/><text x="20.7040%" y="143.50"></text></g><g><title>v1_1`regex::dfa::Fsm::add_state (18 samples, 0.43%)</title><rect x="20.4062%" y="197" width="0.4301%" height="15" fill="rgb(240,187,13)"/><text x="20.6562%" y="207.50"></text></g><g><title>v1_1`hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (7 samples, 0.17%)</title><rect x="20.6691%" y="181" width="0.1673%" height="15" fill="rgb(223,113,26)"/><text x="20.9191%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (8 samples, 0.19%)</title><rect x="20.8602%" y="165" width="0.1912%" height="15" fill="rgb(206,192,2)"/><text x="21.1102%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (8 samples, 0.19%)</title><rect x="20.8602%" y="149" width="0.1912%" height="15" fill="rgb(241,108,4)"/><text x="21.1102%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (5 samples, 0.12%)</title><rect x="20.9319%" y="133" width="0.1195%" height="15" fill="rgb(247,173,49)"/><text x="21.1819%" y="143.50"></text></g><g><title>v1_1`regex::dfa::Fsm::cached_state (50 samples, 1.19%)</title><rect x="19.8805%" y="213" width="1.1947%" height="15" fill="rgb(224,114,35)"/><text x="20.1305%" y="223.50"></text></g><g><title>v1_1`regex::dfa::push_inst_ptr (10 samples, 0.24%)</title><rect x="20.8363%" y="197" width="0.2389%" height="15" fill="rgb(245,159,27)"/><text x="21.0863%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`realloc (9 samples, 0.22%)</title><rect x="20.8602%" y="181" width="0.2151%" height="15" fill="rgb(245,172,44)"/><text x="21.1102%" y="191.50"></text></g><g><title>v1_1`regex::dfa::Fsm::follow_epsilons (23 samples, 0.55%)</title><rect x="21.0753%" y="213" width="0.5496%" height="15" fill="rgb(236,23,11)"/><text x="21.3253%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc (7 samples, 0.17%)</title><rect x="23.0108%" y="181" width="0.1673%" height="15" fill="rgb(205,117,38)"/><text x="23.2608%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (7 samples, 0.17%)</title><rect x="23.0108%" y="165" width="0.1673%" height="15" fill="rgb(237,72,25)"/><text x="23.2608%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (6 samples, 0.14%)</title><rect x="23.0346%" y="149" width="0.1434%" height="15" fill="rgb(244,70,9)"/><text x="23.2846%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (6 samples, 0.14%)</title><rect x="23.0346%" y="133" width="0.1434%" height="15" fill="rgb(217,125,39)"/><text x="23.2846%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (8 samples, 0.19%)</title><rect x="23.3931%" y="117" width="0.1912%" height="15" fill="rgb(235,36,10)"/><text x="23.6431%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (15 samples, 0.36%)</title><rect x="23.3931%" y="149" width="0.3584%" height="15" fill="rgb(251,123,47)"/><text x="23.6431%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (15 samples, 0.36%)</title><rect x="23.3931%" y="133" width="0.3584%" height="15" fill="rgb(221,13,13)"/><text x="23.6431%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (16 samples, 0.38%)</title><rect x="23.3931%" y="165" width="0.3823%" height="15" fill="rgb(238,131,9)"/><text x="23.6431%" y="175.50"></text></g><g><title>v1_1`regex::dfa::Fsm::add_state (26 samples, 0.62%)</title><rect x="23.2497%" y="181" width="0.6213%" height="15" fill="rgb(211,50,8)"/><text x="23.4997%" y="191.50"></text></g><g><title>v1_1`regex::dfa::Fsm::cached_state (64 samples, 1.53%)</title><rect x="22.5090%" y="197" width="1.5293%" height="15" fill="rgb(245,182,24)"/><text x="22.7590%" y="207.50"></text></g><g><title>v1_1`regex::dfa::push_inst_ptr (7 samples, 0.17%)</title><rect x="23.8710%" y="181" width="0.1673%" height="15" fill="rgb(242,14,37)"/><text x="24.1210%" y="191.50"></text></g><g><title>v1_1`regex::dfa::Fsm::next_state (136 samples, 3.25%)</title><rect x="21.6249%" y="213" width="3.2497%" height="15" fill="rgb(246,228,12)"/><text x="21.8749%" y="223.50">v1_..</text></g><g><title>v1_1`regex::dfa::Fsm::follow_epsilons (35 samples, 0.84%)</title><rect x="24.0382%" y="197" width="0.8363%" height="15" fill="rgb(213,55,15)"/><text x="24.2882%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc (5 samples, 0.12%)</title><rect x="24.9940%" y="197" width="0.1195%" height="15" fill="rgb(209,9,3)"/><text x="25.2440%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (5 samples, 0.12%)</title><rect x="24.9940%" y="181" width="0.1195%" height="15" fill="rgb(230,59,30)"/><text x="25.2440%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (5 samples, 0.12%)</title><rect x="24.9940%" y="165" width="0.1195%" height="15" fill="rgb(209,121,21)"/><text x="25.2440%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (5 samples, 0.12%)</title><rect x="24.9940%" y="149" width="0.1195%" height="15" fill="rgb(220,109,13)"/><text x="25.2440%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc (14 samples, 0.33%)</title><rect x="25.5436%" y="165" width="0.3345%" height="15" fill="rgb(232,18,1)"/><text x="25.7936%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (14 samples, 0.33%)</title><rect x="25.5436%" y="149" width="0.3345%" height="15" fill="rgb(215,41,42)"/><text x="25.7936%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (12 samples, 0.29%)</title><rect x="25.5914%" y="133" width="0.2867%" height="15" fill="rgb(224,123,36)"/><text x="25.8414%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (11 samples, 0.26%)</title><rect x="25.6153%" y="117" width="0.2628%" height="15" fill="rgb(240,125,3)"/><text x="25.8653%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (5 samples, 0.12%)</title><rect x="25.7587%" y="101" width="0.1195%" height="15" fill="rgb(205,98,50)"/><text x="26.0087%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (5 samples, 0.12%)</title><rect x="26.3082%" y="85" width="0.1195%" height="15" fill="rgb(205,185,37)"/><text x="26.5582%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`calloc (22 samples, 0.53%)</title><rect x="25.9498%" y="149" width="0.5257%" height="15" fill="rgb(238,207,15)"/><text x="26.1998%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_calloc (21 samples, 0.50%)</title><rect x="25.9737%" y="133" width="0.5018%" height="15" fill="rgb(213,199,42)"/><text x="26.2237%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (20 samples, 0.48%)</title><rect x="25.9976%" y="117" width="0.4779%" height="15" fill="rgb(235,201,11)"/><text x="26.2476%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (17 samples, 0.41%)</title><rect x="26.0693%" y="101" width="0.4062%" height="15" fill="rgb(207,46,11)"/><text x="26.3193%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc (19 samples, 0.45%)</title><rect x="26.4755%" y="149" width="0.4540%" height="15" fill="rgb(241,35,35)"/><text x="26.7255%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (17 samples, 0.41%)</title><rect x="26.5233%" y="133" width="0.4062%" height="15" fill="rgb(243,32,47)"/><text x="26.7733%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (16 samples, 0.38%)</title><rect x="26.5472%" y="117" width="0.3823%" height="15" fill="rgb(247,202,23)"/><text x="26.7972%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (14 samples, 0.33%)</title><rect x="26.5950%" y="101" width="0.3345%" height="15" fill="rgb(219,102,11)"/><text x="26.8450%" y="111.50"></text></g><g><title>v1_1`regex::dfa::Cache::new (67 samples, 1.60%)</title><rect x="25.3763%" y="181" width="1.6010%" height="15" fill="rgb(243,110,44)"/><text x="25.6263%" y="191.50"></text></g><g><title>v1_1`regex::sparse::SparseSet::new (43 samples, 1.03%)</title><rect x="25.9498%" y="165" width="1.0275%" height="15" fill="rgb(222,74,54)"/><text x="26.1998%" y="175.50"></text></g><g><title>v1_1`regex::re_unicode::Regex::is_match (311 samples, 7.43%)</title><rect x="19.5699%" y="229" width="7.4313%" height="15" fill="rgb(216,99,12)"/><text x="19.8199%" y="239.50">v1_1`regex..</text></g><g><title>v1_1`thread_local::cached::CachedThreadLocal&lt;T&gt;::get_or_try_slow (84 samples, 2.01%)</title><rect x="24.9940%" y="213" width="2.0072%" height="15" fill="rgb(226,22,26)"/><text x="25.2440%" y="223.50">v..</text></g><g><title>v1_1`regex::exec::ProgramCacheInner::new (73 samples, 1.74%)</title><rect x="25.2569%" y="197" width="1.7443%" height="15" fill="rgb(217,163,10)"/><text x="25.5069%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (6 samples, 0.14%)</title><rect x="27.2162%" y="213" width="0.1434%" height="15" fill="rgb(213,25,53)"/><text x="27.4662%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (9 samples, 0.22%)</title><rect x="27.3596%" y="213" width="0.2151%" height="15" fill="rgb(252,105,26)"/><text x="27.6096%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc (31 samples, 0.74%)</title><rect x="27.5747%" y="213" width="0.7407%" height="15" fill="rgb(220,39,43)"/><text x="27.8247%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (28 samples, 0.67%)</title><rect x="27.6464%" y="197" width="0.6691%" height="15" fill="rgb(229,68,48)"/><text x="27.8964%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (25 samples, 0.60%)</title><rect x="27.7180%" y="181" width="0.5974%" height="15" fill="rgb(252,8,32)"/><text x="27.9680%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (24 samples, 0.57%)</title><rect x="27.7419%" y="165" width="0.5735%" height="15" fill="rgb(223,20,43)"/><text x="27.9919%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (12 samples, 0.29%)</title><rect x="28.0287%" y="149" width="0.2867%" height="15" fill="rgb(229,81,49)"/><text x="28.2787%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Ivybridge (11 samples, 0.26%)</title><rect x="28.3871%" y="213" width="0.2628%" height="15" fill="rgb(236,28,36)"/><text x="28.6371%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`calloc (9 samples, 0.22%)</title><rect x="29.7491%" y="197" width="0.2151%" height="15" fill="rgb(249,185,26)"/><text x="29.9991%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_calloc (9 samples, 0.22%)</title><rect x="29.7491%" y="181" width="0.2151%" height="15" fill="rgb(249,174,33)"/><text x="29.9991%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (8 samples, 0.19%)</title><rect x="29.7730%" y="165" width="0.1912%" height="15" fill="rgb(233,201,37)"/><text x="30.0230%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (8 samples, 0.19%)</title><rect x="29.7730%" y="149" width="0.1912%" height="15" fill="rgb(221,78,26)"/><text x="30.0230%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (11 samples, 0.26%)</title><rect x="30.0119%" y="197" width="0.2628%" height="15" fill="rgb(250,127,30)"/><text x="30.2619%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (6 samples, 0.14%)</title><rect x="30.1314%" y="181" width="0.1434%" height="15" fill="rgb(230,49,44)"/><text x="30.3814%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (17 samples, 0.41%)</title><rect x="30.2748%" y="197" width="0.4062%" height="15" fill="rgb(229,67,23)"/><text x="30.5248%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (8 samples, 0.19%)</title><rect x="30.4898%" y="181" width="0.1912%" height="15" fill="rgb(249,83,47)"/><text x="30.7398%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc (32 samples, 0.76%)</title><rect x="30.6810%" y="197" width="0.7646%" height="15" fill="rgb(215,43,3)"/><text x="30.9310%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (17 samples, 0.41%)</title><rect x="31.0394%" y="181" width="0.4062%" height="15" fill="rgb(238,154,13)"/><text x="31.2894%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (15 samples, 0.36%)</title><rect x="31.0872%" y="165" width="0.3584%" height="15" fill="rgb(219,56,2)"/><text x="31.3372%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (15 samples, 0.36%)</title><rect x="31.0872%" y="149" width="0.3584%" height="15" fill="rgb(233,0,4)"/><text x="31.3372%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`posix_memalign (11 samples, 0.26%)</title><rect x="31.4456%" y="197" width="0.2628%" height="15" fill="rgb(235,30,7)"/><text x="31.6956%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_memalign (11 samples, 0.26%)</title><rect x="31.4456%" y="181" width="0.2628%" height="15" fill="rgb(250,79,13)"/><text x="31.6956%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (9 samples, 0.22%)</title><rect x="31.4934%" y="165" width="0.2151%" height="15" fill="rgb(211,146,34)"/><text x="31.7434%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (7 samples, 0.17%)</title><rect x="31.5412%" y="149" width="0.1673%" height="15" fill="rgb(228,22,38)"/><text x="31.7912%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Nehalem (63 samples, 1.51%)</title><rect x="31.8041%" y="197" width="1.5054%" height="15" fill="rgb(235,168,5)"/><text x="32.0541%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (7 samples, 0.17%)</title><rect x="33.7157%" y="181" width="0.1673%" height="15" fill="rgb(221,155,16)"/><text x="33.9657%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (5 samples, 0.12%)</title><rect x="33.7634%" y="165" width="0.1195%" height="15" fill="rgb(215,215,53)"/><text x="34.0134%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (12 samples, 0.29%)</title><rect x="33.8829%" y="181" width="0.2867%" height="15" fill="rgb(223,4,10)"/><text x="34.1329%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (7 samples, 0.17%)</title><rect x="34.0024%" y="165" width="0.1673%" height="15" fill="rgb(234,103,6)"/><text x="34.2524%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc (8 samples, 0.19%)</title><rect x="34.1697%" y="181" width="0.1912%" height="15" fill="rgb(227,97,0)"/><text x="34.4197%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (7 samples, 0.17%)</title><rect x="34.1935%" y="165" width="0.1673%" height="15" fill="rgb(234,150,53)"/><text x="34.4435%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (6 samples, 0.14%)</title><rect x="34.7431%" y="117" width="0.1434%" height="15" fill="rgb(228,201,54)"/><text x="34.9931%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (6 samples, 0.14%)</title><rect x="34.7431%" y="101" width="0.1434%" height="15" fill="rgb(222,22,37)"/><text x="34.9931%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (5 samples, 0.12%)</title><rect x="34.9104%" y="117" width="0.1195%" height="15" fill="rgb(237,53,32)"/><text x="35.1604%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (17 samples, 0.41%)</title><rect x="34.6476%" y="149" width="0.4062%" height="15" fill="rgb(233,25,53)"/><text x="34.8976%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (14 samples, 0.33%)</title><rect x="34.7192%" y="133" width="0.3345%" height="15" fill="rgb(210,40,34)"/><text x="34.9692%" y="143.50"></text></g><g><title>v1_1`&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (30 samples, 0.72%)</title><rect x="34.4086%" y="181" width="0.7168%" height="15" fill="rgb(241,220,44)"/><text x="34.6586%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (21 samples, 0.50%)</title><rect x="34.6237%" y="165" width="0.5018%" height="15" fill="rgb(235,28,35)"/><text x="34.8737%" y="175.50"></text></g><g><title>v1_1`&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (73 samples, 1.74%)</title><rect x="33.4528%" y="197" width="1.7443%" height="15" fill="rgb(210,56,17)"/><text x="33.7028%" y="207.50"></text></g><g><title>v1_1`core::ptr::drop_in_place (9 samples, 0.22%)</title><rect x="35.4122%" y="197" width="0.2151%" height="15" fill="rgb(224,130,29)"/><text x="35.6622%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (17 samples, 0.41%)</title><rect x="35.6750%" y="165" width="0.4062%" height="15" fill="rgb(235,212,8)"/><text x="35.9250%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (13 samples, 0.31%)</title><rect x="35.7706%" y="149" width="0.3106%" height="15" fill="rgb(223,33,50)"/><text x="36.0206%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (12 samples, 0.29%)</title><rect x="35.7945%" y="133" width="0.2867%" height="15" fill="rgb(219,149,13)"/><text x="36.0445%" y="143.50"></text></g><g><title>v1_1`regex::cache::imp::Cached&lt;T&gt;::new (20 samples, 0.48%)</title><rect x="35.6272%" y="197" width="0.4779%" height="15" fill="rgb(250,156,29)"/><text x="35.8772%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc (18 samples, 0.43%)</title><rect x="35.6750%" y="181" width="0.4301%" height="15" fill="rgb(216,193,19)"/><text x="35.9250%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (6 samples, 0.14%)</title><rect x="36.4158%" y="181" width="0.1434%" height="15" fill="rgb(216,135,14)"/><text x="36.6658%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc (28 samples, 0.67%)</title><rect x="36.5830%" y="181" width="0.6691%" height="15" fill="rgb(241,47,5)"/><text x="36.8330%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (26 samples, 0.62%)</title><rect x="36.6308%" y="165" width="0.6213%" height="15" fill="rgb(233,42,35)"/><text x="36.8808%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (24 samples, 0.57%)</title><rect x="36.6786%" y="149" width="0.5735%" height="15" fill="rgb(231,13,6)"/><text x="36.9286%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (24 samples, 0.57%)</title><rect x="36.6786%" y="133" width="0.5735%" height="15" fill="rgb(207,181,40)"/><text x="36.9286%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (8 samples, 0.19%)</title><rect x="37.0609%" y="117" width="0.1912%" height="15" fill="rgb(254,173,49)"/><text x="37.3109%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Nehalem (18 samples, 0.43%)</title><rect x="37.2999%" y="181" width="0.4301%" height="15" fill="rgb(221,1,38)"/><text x="37.5499%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc (6 samples, 0.14%)</title><rect x="38.3274%" y="149" width="0.1434%" height="15" fill="rgb(206,124,46)"/><text x="38.5774%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (6 samples, 0.14%)</title><rect x="38.3274%" y="133" width="0.1434%" height="15" fill="rgb(249,21,11)"/><text x="38.5774%" y="143.50"></text></g><g><title>v1_1`regex::compile::Compiler::c (27 samples, 0.65%)</title><rect x="38.0167%" y="165" width="0.6452%" height="15" fill="rgb(222,201,40)"/><text x="38.2667%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (8 samples, 0.19%)</title><rect x="38.4707%" y="149" width="0.1912%" height="15" fill="rgb(235,61,29)"/><text x="38.7207%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (8 samples, 0.19%)</title><rect x="38.4707%" y="133" width="0.1912%" height="15" fill="rgb(219,207,3)"/><text x="38.7207%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (8 samples, 0.19%)</title><rect x="38.4707%" y="117" width="0.1912%" height="15" fill="rgb(222,56,46)"/><text x="38.7207%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc (13 samples, 0.31%)</title><rect x="39.7611%" y="149" width="0.3106%" height="15" fill="rgb(239,76,54)"/><text x="40.0111%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (13 samples, 0.31%)</title><rect x="39.7611%" y="133" width="0.3106%" height="15" fill="rgb(231,124,27)"/><text x="40.0111%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (13 samples, 0.31%)</title><rect x="39.7611%" y="117" width="0.3106%" height="15" fill="rgb(249,195,6)"/><text x="40.0111%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (13 samples, 0.31%)</title><rect x="39.7611%" y="101" width="0.3106%" height="15" fill="rgb(237,174,47)"/><text x="40.0111%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (5 samples, 0.12%)</title><rect x="39.9522%" y="85" width="0.1195%" height="15" fill="rgb(206,201,31)"/><text x="40.2022%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (20 samples, 0.48%)</title><rect x="40.4540%" y="101" width="0.4779%" height="15" fill="rgb(231,57,52)"/><text x="40.7040%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (8 samples, 0.19%)</title><rect x="40.7407%" y="85" width="0.1912%" height="15" fill="rgb(248,177,22)"/><text x="40.9907%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (26 samples, 0.62%)</title><rect x="41.0275%" y="101" width="0.6213%" height="15" fill="rgb(215,211,37)"/><text x="41.2775%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (25 samples, 0.60%)</title><rect x="41.0514%" y="85" width="0.5974%" height="15" fill="rgb(241,128,51)"/><text x="41.3014%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (6 samples, 0.14%)</title><rect x="41.5054%" y="69" width="0.1434%" height="15" fill="rgb(227,165,31)"/><text x="41.7554%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (7 samples, 0.17%)</title><rect x="41.6965%" y="101" width="0.1673%" height="15" fill="rgb(228,167,24)"/><text x="41.9465%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (29 samples, 0.69%)</title><rect x="41.8638%" y="101" width="0.6930%" height="15" fill="rgb(228,143,12)"/><text x="42.1138%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (95 samples, 2.27%)</title><rect x="40.3584%" y="117" width="2.2700%" height="15" fill="rgb(249,149,8)"/><text x="40.6084%" y="127.50">l..</text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (103 samples, 2.46%)</title><rect x="40.1912%" y="133" width="2.4612%" height="15" fill="rgb(243,35,44)"/><text x="40.4412%" y="143.50">li..</text></g><g><title>libsystem_malloc.dylib`realloc (113 samples, 2.70%)</title><rect x="40.0717%" y="149" width="2.7001%" height="15" fill="rgb(246,89,9)"/><text x="40.3217%" y="159.50">li..</text></g><g><title>v1_1`&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (45 samples, 1.08%)</title><rect x="42.7957%" y="149" width="1.0753%" height="15" fill="rgb(233,213,13)"/><text x="43.0457%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (7 samples, 0.17%)</title><rect x="44.8746%" y="85" width="0.1673%" height="15" fill="rgb(233,141,41)"/><text x="45.1246%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (16 samples, 0.38%)</title><rect x="44.8029%" y="101" width="0.3823%" height="15" fill="rgb(239,167,4)"/><text x="45.0529%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (19 samples, 0.45%)</title><rect x="44.7551%" y="117" width="0.4540%" height="15" fill="rgb(209,217,16)"/><text x="45.0051%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`realloc (20 samples, 0.48%)</title><rect x="44.7551%" y="133" width="0.4779%" height="15" fill="rgb(219,88,35)"/><text x="45.0051%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (9 samples, 0.22%)</title><rect x="46.2366%" y="69" width="0.2151%" height="15" fill="rgb(220,193,23)"/><text x="46.4866%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (29 samples, 0.69%)</title><rect x="45.9976%" y="101" width="0.6930%" height="15" fill="rgb(230,90,52)"/><text x="46.2476%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (28 samples, 0.67%)</title><rect x="46.0215%" y="85" width="0.6691%" height="15" fill="rgb(252,106,19)"/><text x="46.2715%" y="95.50"></text></g><g><title>v1_1`regex::compile::Compiler::push_compiled (64 samples, 1.53%)</title><rect x="45.2330%" y="133" width="1.5293%" height="15" fill="rgb(206,74,20)"/><text x="45.4830%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (33 samples, 0.79%)</title><rect x="45.9737%" y="117" width="0.7885%" height="15" fill="rgb(230,138,44)"/><text x="46.2237%" y="127.50"></text></g><g><title>v1_1`regex::compile::CompileClass::c_utf8_seq (246 samples, 5.88%)</title><rect x="43.8710%" y="149" width="5.8781%" height="15" fill="rgb(235,182,43)"/><text x="44.1210%" y="159.50">v1_1`re..</text></g><g><title>v1_1`regex::compile::SuffixCache::get (125 samples, 2.99%)</title><rect x="46.7622%" y="133" width="2.9869%" height="15" fill="rgb(242,16,51)"/><text x="47.0122%" y="143.50">v1_..</text></g><g><title>v1_1`regex::compile::Compiler::fill (8 samples, 0.19%)</title><rect x="49.7491%" y="149" width="0.1912%" height="15" fill="rgb(248,9,4)"/><text x="49.9991%" y="159.50"></text></g><g><title>v1_1`regex::compile::Compiler::fill_split (9 samples, 0.22%)</title><rect x="49.9403%" y="149" width="0.2151%" height="15" fill="rgb(210,31,22)"/><text x="50.1903%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (8 samples, 0.19%)</title><rect x="51.1828%" y="85" width="0.1912%" height="15" fill="rgb(239,54,39)"/><text x="51.4328%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (26 samples, 0.62%)</title><rect x="50.7766%" y="117" width="0.6213%" height="15" fill="rgb(230,99,41)"/><text x="51.0266%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (23 samples, 0.55%)</title><rect x="50.8483%" y="101" width="0.5496%" height="15" fill="rgb(253,106,12)"/><text x="51.0983%" y="111.50"></text></g><g><title>v1_1`regex::compile::Compiler::push_split_hole (56 samples, 1.34%)</title><rect x="50.1792%" y="149" width="1.3381%" height="15" fill="rgb(213,46,41)"/><text x="50.4292%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`realloc (36 samples, 0.86%)</title><rect x="50.6571%" y="133" width="0.8602%" height="15" fill="rgb(215,133,35)"/><text x="50.9071%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (5 samples, 0.12%)</title><rect x="51.3978%" y="117" width="0.1195%" height="15" fill="rgb(213,28,5)"/><text x="51.6478%" y="127.50"></text></g><g><title>v1_1`regex::compile::Compiler::c_class (542 samples, 12.95%)</title><rect x="38.6619%" y="165" width="12.9510%" height="15" fill="rgb(215,77,49)"/><text x="38.9119%" y="175.50">v1_1`regex::compile..</text></g><g><title>libsystem_malloc.dylib`free_tiny (8 samples, 0.19%)</title><rect x="51.9235%" y="149" width="0.1912%" height="15" fill="rgb(248,100,22)"/><text x="52.1735%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (6 samples, 0.14%)</title><rect x="51.9713%" y="133" width="0.1434%" height="15" fill="rgb(208,67,9)"/><text x="52.2213%" y="143.50"></text></g><g><title>v1_1`regex::compile::Compiler::fill (29 samples, 0.69%)</title><rect x="51.7085%" y="165" width="0.6930%" height="15" fill="rgb(219,133,21)"/><text x="51.9585%" y="175.50"></text></g><g><title>v1_1`regex::compile::Compiler::fill (11 samples, 0.26%)</title><rect x="52.1386%" y="149" width="0.2628%" height="15" fill="rgb(246,46,29)"/><text x="52.3886%" y="159.50"></text></g><g><title>v1_1`regex::compile::Compiler::c (614 samples, 14.67%)</title><rect x="37.7539%" y="181" width="14.6714%" height="15" fill="rgb(246,185,52)"/><text x="38.0039%" y="191.50">v1_1`regex::compile::C..</text></g><g><title>libsystem_malloc.dylib`malloc (9 samples, 0.22%)</title><rect x="52.5687%" y="165" width="0.2151%" height="15" fill="rgb(252,136,11)"/><text x="52.8187%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (8 samples, 0.19%)</title><rect x="52.5926%" y="149" width="0.1912%" height="15" fill="rgb(219,138,53)"/><text x="52.8426%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (6 samples, 0.14%)</title><rect x="52.6404%" y="133" width="0.1434%" height="15" fill="rgb(211,51,23)"/><text x="52.8904%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (15 samples, 0.36%)</title><rect x="53.1900%" y="117" width="0.3584%" height="15" fill="rgb(247,221,28)"/><text x="53.4400%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (15 samples, 0.36%)</title><rect x="53.1900%" y="101" width="0.3584%" height="15" fill="rgb(251,222,45)"/><text x="53.4400%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (5 samples, 0.12%)</title><rect x="53.4289%" y="85" width="0.1195%" height="15" fill="rgb(217,162,53)"/><text x="53.6789%" y="95.50"></text></g><g><title>v1_1`regex::compile::Compiler::c (26 samples, 0.62%)</title><rect x="52.9510%" y="149" width="0.6213%" height="15" fill="rgb(229,93,14)"/><text x="53.2010%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`realloc (17 samples, 0.41%)</title><rect x="53.1661%" y="133" width="0.4062%" height="15" fill="rgb(209,67,49)"/><text x="53.4161%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc (9 samples, 0.22%)</title><rect x="53.6918%" y="133" width="0.2151%" height="15" fill="rgb(213,87,29)"/><text x="53.9418%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (7 samples, 0.17%)</title><rect x="53.7395%" y="117" width="0.1673%" height="15" fill="rgb(205,151,52)"/><text x="53.9895%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (7 samples, 0.17%)</title><rect x="53.9785%" y="101" width="0.1673%" height="15" fill="rgb(253,215,39)"/><text x="54.2285%" y="111.50"></text></g><g><title>v1_1`regex::compile::Compiler::c_class (25 samples, 0.60%)</title><rect x="53.5723%" y="149" width="0.5974%" height="15" fill="rgb(221,220,41)"/><text x="53.8223%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`realloc (11 samples, 0.26%)</title><rect x="53.9068%" y="133" width="0.2628%" height="15" fill="rgb(218,133,21)"/><text x="54.1568%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (11 samples, 0.26%)</title><rect x="53.9068%" y="117" width="0.2628%" height="15" fill="rgb(221,193,43)"/><text x="54.1568%" y="127.50"></text></g><g><title>v1_1`regex::compile::Compiler::c (73 samples, 1.74%)</title><rect x="52.7838%" y="165" width="1.7443%" height="15" fill="rgb(240,128,52)"/><text x="53.0338%" y="175.50"></text></g><g><title>v1_1`regex::compile::Compiler::fill (13 samples, 0.31%)</title><rect x="54.2174%" y="149" width="0.3106%" height="15" fill="rgb(253,114,12)"/><text x="54.4674%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc (5 samples, 0.12%)</title><rect x="54.4086%" y="133" width="0.1195%" height="15" fill="rgb(215,223,47)"/><text x="54.6586%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (5 samples, 0.12%)</title><rect x="54.4086%" y="117" width="0.1195%" height="15" fill="rgb(248,225,23)"/><text x="54.6586%" y="127.50"></text></g><g><title>v1_1`regex::compile::Compiler::c_capture (94 samples, 2.25%)</title><rect x="52.4253%" y="181" width="2.2461%" height="15" fill="rgb(250,108,0)"/><text x="52.6753%" y="191.50">v..</text></g><g><title>libsystem_malloc.dylib`free_tiny (6 samples, 0.14%)</title><rect x="55.1493%" y="149" width="0.1434%" height="15" fill="rgb(228,208,7)"/><text x="55.3993%" y="159.50"></text></g><g><title>v1_1`core::ptr::drop_in_place (12 samples, 0.29%)</title><rect x="55.0777%" y="165" width="0.2867%" height="15" fill="rgb(244,45,10)"/><text x="55.3277%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc (5 samples, 0.12%)</title><rect x="56.0812%" y="133" width="0.1195%" height="15" fill="rgb(207,125,25)"/><text x="56.3312%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (16 samples, 0.38%)</title><rect x="56.3441%" y="85" width="0.3823%" height="15" fill="rgb(210,195,18)"/><text x="56.5941%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (10 samples, 0.24%)</title><rect x="56.4875%" y="69" width="0.2389%" height="15" fill="rgb(249,80,12)"/><text x="56.7375%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (16 samples, 0.38%)</title><rect x="56.7264%" y="85" width="0.3823%" height="15" fill="rgb(221,65,9)"/><text x="56.9764%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (16 samples, 0.38%)</title><rect x="56.7264%" y="69" width="0.3823%" height="15" fill="rgb(235,49,36)"/><text x="56.9764%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (14 samples, 0.33%)</title><rect x="57.2043%" y="85" width="0.3345%" height="15" fill="rgb(225,32,20)"/><text x="57.4543%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (56 samples, 1.34%)</title><rect x="56.2485%" y="101" width="1.3381%" height="15" fill="rgb(215,141,46)"/><text x="56.4985%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (59 samples, 1.41%)</title><rect x="56.2007%" y="117" width="1.4098%" height="15" fill="rgb(250,160,47)"/><text x="56.4507%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`realloc (62 samples, 1.48%)</title><rect x="56.2007%" y="133" width="1.4815%" height="15" fill="rgb(216,222,40)"/><text x="56.4507%" y="143.50"></text></g><g><title>v1_1`&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (34 samples, 0.81%)</title><rect x="57.6822%" y="133" width="0.8124%" height="15" fill="rgb(234,217,39)"/><text x="57.9322%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (12 samples, 0.29%)</title><rect x="58.9486%" y="85" width="0.2867%" height="15" fill="rgb(207,178,40)"/><text x="59.1986%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (14 samples, 0.33%)</title><rect x="58.9247%" y="101" width="0.3345%" height="15" fill="rgb(221,136,13)"/><text x="59.1747%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`realloc (18 samples, 0.43%)</title><rect x="58.8769%" y="117" width="0.4301%" height="15" fill="rgb(249,199,10)"/><text x="59.1269%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (8 samples, 0.19%)</title><rect x="59.6416%" y="53" width="0.1912%" height="15" fill="rgb(249,222,13)"/><text x="59.8916%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (11 samples, 0.26%)</title><rect x="59.8327%" y="37" width="0.2628%" height="15" fill="rgb(244,185,38)"/><text x="60.0827%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (15 samples, 0.36%)</title><rect x="59.8327%" y="53" width="0.3584%" height="15" fill="rgb(236,202,9)"/><text x="60.0827%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (27 samples, 0.65%)</title><rect x="59.6177%" y="69" width="0.6452%" height="15" fill="rgb(250,229,37)"/><text x="59.8677%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (34 samples, 0.81%)</title><rect x="59.4743%" y="85" width="0.8124%" height="15" fill="rgb(206,174,23)"/><text x="59.7243%" y="95.50"></text></g><g><title>v1_1`regex::compile::Compiler::push_compiled (42 samples, 1.00%)</title><rect x="59.3070%" y="117" width="1.0036%" height="15" fill="rgb(211,33,43)"/><text x="59.5570%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`realloc (35 samples, 0.84%)</title><rect x="59.4743%" y="101" width="0.8363%" height="15" fill="rgb(245,58,50)"/><text x="59.7243%" y="111.50"></text></g><g><title>v1_1`regex::compile::CompileClass::c_utf8_seq (123 samples, 2.94%)</title><rect x="58.4946%" y="133" width="2.9391%" height="15" fill="rgb(244,68,36)"/><text x="58.7446%" y="143.50">v1..</text></g><g><title>v1_1`regex::compile::SuffixCache::get (47 samples, 1.12%)</title><rect x="60.3106%" y="117" width="1.1231%" height="15" fill="rgb(232,229,15)"/><text x="60.5606%" y="127.50"></text></g><g><title>v1_1`regex::compile::Compiler::fill_split (6 samples, 0.14%)</title><rect x="61.5293%" y="133" width="0.1434%" height="15" fill="rgb(254,30,23)"/><text x="61.7793%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (6 samples, 0.14%)</title><rect x="61.7204%" y="69" width="0.1434%" height="15" fill="rgb(235,160,14)"/><text x="61.9704%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (11 samples, 0.26%)</title><rect x="61.7204%" y="101" width="0.2628%" height="15" fill="rgb(212,155,44)"/><text x="61.9704%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (11 samples, 0.26%)</title><rect x="61.7204%" y="85" width="0.2628%" height="15" fill="rgb(226,2,50)"/><text x="61.9704%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`realloc (12 samples, 0.29%)</title><rect x="61.7204%" y="117" width="0.2867%" height="15" fill="rgb(234,177,6)"/><text x="61.9704%" y="127.50"></text></g><g><title>v1_1`regex::compile::Compiler::c_class (274 samples, 6.55%)</title><rect x="55.4839%" y="149" width="6.5472%" height="15" fill="rgb(217,24,9)"/><text x="55.7339%" y="159.50">v1_1`rege..</text></g><g><title>v1_1`regex::compile::Compiler::push_split_hole (14 samples, 0.33%)</title><rect x="61.6965%" y="133" width="0.3345%" height="15" fill="rgb(220,13,46)"/><text x="61.9465%" y="143.50"></text></g><g><title>v1_1`regex::compile::Compiler::fill (9 samples, 0.22%)</title><rect x="62.0311%" y="149" width="0.2151%" height="15" fill="rgb(239,221,27)"/><text x="62.2811%" y="159.50"></text></g><g><title>v1_1`regex::compile::Compiler::c_repeat_zero_or_more (293 samples, 7.00%)</title><rect x="55.4122%" y="165" width="7.0012%" height="15" fill="rgb(222,198,25)"/><text x="55.6622%" y="175.50">v1_1`rege..</text></g><g><title>v1_1`regex::compile::Compiler::push_split_hole (6 samples, 0.14%)</title><rect x="62.2700%" y="149" width="0.1434%" height="15" fill="rgb(211,99,13)"/><text x="62.5200%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc (5 samples, 0.12%)</title><rect x="62.2939%" y="133" width="0.1195%" height="15" fill="rgb(232,111,31)"/><text x="62.5439%" y="143.50"></text></g><g><title>v1_1`regex_syntax::hir::ClassUnicode::push (5 samples, 0.12%)</title><rect x="62.4134%" y="165" width="0.1195%" height="15" fill="rgb(245,82,37)"/><text x="62.6634%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc (5 samples, 0.12%)</title><rect x="62.4134%" y="149" width="0.1195%" height="15" fill="rgb(227,149,46)"/><text x="62.6634%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (5 samples, 0.12%)</title><rect x="62.4134%" y="133" width="0.1195%" height="15" fill="rgb(218,36,50)"/><text x="62.6634%" y="143.50"></text></g><g><title>v1_1`regex::compile::Compiler::c_dotstar (330 samples, 7.89%)</title><rect x="54.7192%" y="181" width="7.8853%" height="15" fill="rgb(226,80,48)"/><text x="54.9692%" y="191.50">v1_1`regex:..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (5 samples, 0.12%)</title><rect x="66.2127%" y="101" width="0.1195%" height="15" fill="rgb(238,224,15)"/><text x="66.4627%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`calloc (20 samples, 0.48%)</title><rect x="65.9498%" y="165" width="0.4779%" height="15" fill="rgb(241,136,10)"/><text x="66.1998%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_calloc (19 samples, 0.45%)</title><rect x="65.9737%" y="149" width="0.4540%" height="15" fill="rgb(208,32,45)"/><text x="66.2237%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (18 samples, 0.43%)</title><rect x="65.9976%" y="133" width="0.4301%" height="15" fill="rgb(207,135,9)"/><text x="66.2476%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (16 samples, 0.38%)</title><rect x="66.0454%" y="117" width="0.3823%" height="15" fill="rgb(206,86,44)"/><text x="66.2954%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (29 samples, 0.69%)</title><rect x="66.4516%" y="165" width="0.6930%" height="15" fill="rgb(245,177,15)"/><text x="66.7016%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (9 samples, 0.22%)</title><rect x="66.9295%" y="149" width="0.2151%" height="15" fill="rgb(206,64,50)"/><text x="67.1795%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_small (28 samples, 0.67%)</title><rect x="67.1446%" y="165" width="0.6691%" height="15" fill="rgb(234,36,40)"/><text x="67.3946%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (42 samples, 1.00%)</title><rect x="67.8136%" y="165" width="1.0036%" height="15" fill="rgb(213,64,8)"/><text x="68.0636%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (23 samples, 0.55%)</title><rect x="68.2676%" y="149" width="0.5496%" height="15" fill="rgb(210,75,36)"/><text x="68.5176%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (12 samples, 0.29%)</title><rect x="68.9367%" y="117" width="0.2867%" height="15" fill="rgb(229,88,21)"/><text x="69.1867%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc (40 samples, 0.96%)</title><rect x="68.8172%" y="165" width="0.9558%" height="15" fill="rgb(252,204,47)"/><text x="69.0672%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (37 samples, 0.88%)</title><rect x="68.8889%" y="149" width="0.8841%" height="15" fill="rgb(208,77,27)"/><text x="69.1389%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (36 samples, 0.86%)</title><rect x="68.9128%" y="133" width="0.8602%" height="15" fill="rgb(221,76,26)"/><text x="69.1628%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (23 samples, 0.55%)</title><rect x="69.2234%" y="117" width="0.5496%" height="15" fill="rgb(225,139,18)"/><text x="69.4734%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (8 samples, 0.19%)</title><rect x="69.5818%" y="101" width="0.1912%" height="15" fill="rgb(230,137,11)"/><text x="69.8318%" y="111.50"></text></g><g><title>v1_1`regex::compile::Compiler::compile_finish (315 samples, 7.53%)</title><rect x="62.6045%" y="181" width="7.5269%" height="15" fill="rgb(212,28,1)"/><text x="62.8545%" y="191.50">v1_1`regex..</text></g><g><title>v1_1`regex::compile::Compiler::fill (9 samples, 0.22%)</title><rect x="70.1314%" y="181" width="0.2151%" height="15" fill="rgb(248,164,17)"/><text x="70.3814%" y="191.50"></text></g><g><title>v1_1`regex::compile::Compiler::compile (1,435 samples, 34.29%)</title><rect x="36.1290%" y="197" width="34.2891%" height="15" fill="rgb(222,171,42)"/><text x="36.3790%" y="207.50">v1_1`regex::compile::Compiler::compile</text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (10 samples, 0.24%)</title><rect x="71.0633%" y="117" width="0.2389%" height="15" fill="rgb(243,84,45)"/><text x="71.3133%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (6 samples, 0.14%)</title><rect x="71.1589%" y="101" width="0.1434%" height="15" fill="rgb(252,49,23)"/><text x="71.4089%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`calloc (70 samples, 1.67%)</title><rect x="70.7288%" y="181" width="1.6726%" height="15" fill="rgb(215,19,7)"/><text x="70.9788%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_calloc (70 samples, 1.67%)</title><rect x="70.7288%" y="165" width="1.6726%" height="15" fill="rgb(238,81,41)"/><text x="70.9788%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (70 samples, 1.67%)</title><rect x="70.7288%" y="149" width="1.6726%" height="15" fill="rgb(210,199,37)"/><text x="70.9788%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (70 samples, 1.67%)</title><rect x="70.7288%" y="133" width="1.6726%" height="15" fill="rgb(244,192,49)"/><text x="70.9788%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Ivybridge (46 samples, 1.10%)</title><rect x="71.3023%" y="117" width="1.0992%" height="15" fill="rgb(226,211,11)"/><text x="71.5523%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (16 samples, 0.38%)</title><rect x="72.5926%" y="133" width="0.3823%" height="15" fill="rgb(236,162,54)"/><text x="72.8426%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc (37 samples, 0.88%)</title><rect x="72.4014%" y="181" width="0.8841%" height="15" fill="rgb(220,229,9)"/><text x="72.6514%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (35 samples, 0.84%)</title><rect x="72.4492%" y="165" width="0.8363%" height="15" fill="rgb(250,87,22)"/><text x="72.6992%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (32 samples, 0.76%)</title><rect x="72.5209%" y="149" width="0.7646%" height="15" fill="rgb(239,43,17)"/><text x="72.7709%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (13 samples, 0.31%)</title><rect x="72.9749%" y="133" width="0.3106%" height="15" fill="rgb(231,177,25)"/><text x="73.2249%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (14 samples, 0.33%)</title><rect x="73.6679%" y="117" width="0.3345%" height="15" fill="rgb(219,179,1)"/><text x="73.9179%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`calloc (21 samples, 0.50%)</title><rect x="73.5484%" y="165" width="0.5018%" height="15" fill="rgb(238,219,53)"/><text x="73.7984%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_calloc (20 samples, 0.48%)</title><rect x="73.5723%" y="149" width="0.4779%" height="15" fill="rgb(232,167,36)"/><text x="73.8223%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (17 samples, 0.41%)</title><rect x="73.6440%" y="133" width="0.4062%" height="15" fill="rgb(244,19,51)"/><text x="73.8940%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc (17 samples, 0.41%)</title><rect x="74.0502%" y="165" width="0.4062%" height="15" fill="rgb(224,6,22)"/><text x="74.3002%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (14 samples, 0.33%)</title><rect x="74.1219%" y="149" width="0.3345%" height="15" fill="rgb(224,145,5)"/><text x="74.3719%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (10 samples, 0.24%)</title><rect x="74.2174%" y="133" width="0.2389%" height="15" fill="rgb(234,130,49)"/><text x="74.4674%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (10 samples, 0.24%)</title><rect x="74.2174%" y="117" width="0.2389%" height="15" fill="rgb(254,6,2)"/><text x="74.4674%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Nehalem (6 samples, 0.14%)</title><rect x="74.8387%" y="149" width="0.1434%" height="15" fill="rgb(208,96,46)"/><text x="75.0887%" y="159.50"></text></g><g><title>v1_1`regex::compile::Compiler::new (195 samples, 4.66%)</title><rect x="70.4182%" y="197" width="4.6595%" height="15" fill="rgb(239,3,39)"/><text x="70.6682%" y="207.50">v1_1`..</text></g><g><title>v1_1`regex::prog::Program::new (72 samples, 1.72%)</title><rect x="73.3572%" y="181" width="1.7204%" height="15" fill="rgb(233,210,1)"/><text x="73.6072%" y="191.50"></text></g><g><title>v1_1`regex::literal::imp::LiteralSearcher::new (19 samples, 0.45%)</title><rect x="74.6237%" y="165" width="0.4540%" height="15" fill="rgb(244,137,37)"/><text x="74.8737%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (6 samples, 0.14%)</title><rect x="75.4839%" y="181" width="0.1434%" height="15" fill="rgb(240,136,2)"/><text x="75.7339%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc (14 samples, 0.33%)</title><rect x="75.6272%" y="181" width="0.3345%" height="15" fill="rgb(239,18,37)"/><text x="75.8772%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (13 samples, 0.31%)</title><rect x="75.6511%" y="165" width="0.3106%" height="15" fill="rgb(218,185,22)"/><text x="75.9011%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (13 samples, 0.31%)</title><rect x="75.6511%" y="149" width="0.3106%" height="15" fill="rgb(225,218,4)"/><text x="75.9011%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (11 samples, 0.26%)</title><rect x="75.6989%" y="133" width="0.2628%" height="15" fill="rgb(230,182,32)"/><text x="75.9489%" y="143.50"></text></g><g><title>v1_1`regex::literal::imp::LiteralSearcher::new (50 samples, 1.19%)</title><rect x="75.1971%" y="197" width="1.1947%" height="15" fill="rgb(242,56,43)"/><text x="75.4471%" y="207.50"></text></g><g><title>v1_1`regex::literal::imp::FreqyPacked::new (12 samples, 0.29%)</title><rect x="76.1051%" y="181" width="0.2867%" height="15" fill="rgb(233,99,24)"/><text x="76.3551%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (7 samples, 0.17%)</title><rect x="76.6308%" y="181" width="0.1673%" height="15" fill="rgb(234,209,42)"/><text x="76.8808%" y="191.50"></text></g><g><title>v1_1`regex::literal::imp::Matcher::new (27 samples, 0.65%)</title><rect x="76.3919%" y="197" width="0.6452%" height="15" fill="rgb(227,7,12)"/><text x="76.6419%" y="207.50"></text></g><g><title>v1_1`regex::literal::imp::FreqyPacked::new (5 samples, 0.12%)</title><rect x="76.9176%" y="181" width="0.1195%" height="15" fill="rgb(245,203,43)"/><text x="77.1676%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (6 samples, 0.14%)</title><rect x="77.4194%" y="181" width="0.1434%" height="15" fill="rgb(238,205,33)"/><text x="77.6694%" y="191.50"></text></g><g><title>v1_1`regex_syntax::hir::literal::Literals::union (18 samples, 0.43%)</title><rect x="77.2760%" y="197" width="0.4301%" height="15" fill="rgb(231,56,7)"/><text x="77.5260%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc (6 samples, 0.14%)</title><rect x="77.5627%" y="181" width="0.1434%" height="15" fill="rgb(244,186,29)"/><text x="77.8127%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (5 samples, 0.12%)</title><rect x="77.5866%" y="165" width="0.1195%" height="15" fill="rgb(234,111,31)"/><text x="77.8366%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (5 samples, 0.12%)</title><rect x="77.5866%" y="149" width="0.1195%" height="15" fill="rgb(241,149,10)"/><text x="77.8366%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (5 samples, 0.12%)</title><rect x="77.5866%" y="133" width="0.1195%" height="15" fill="rgb(249,206,44)"/><text x="77.8366%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (14 samples, 0.33%)</title><rect x="77.8734%" y="181" width="0.3345%" height="15" fill="rgb(251,153,30)"/><text x="78.1234%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (5 samples, 0.12%)</title><rect x="78.0884%" y="165" width="0.1195%" height="15" fill="rgb(239,152,38)"/><text x="78.3384%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (6 samples, 0.14%)</title><rect x="78.6858%" y="165" width="0.1434%" height="15" fill="rgb(249,139,47)"/><text x="78.9358%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (5 samples, 0.12%)</title><rect x="78.7097%" y="149" width="0.1195%" height="15" fill="rgb(244,64,35)"/><text x="78.9597%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (13 samples, 0.31%)</title><rect x="78.8292%" y="165" width="0.3106%" height="15" fill="rgb(216,46,15)"/><text x="79.0792%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (10 samples, 0.24%)</title><rect x="78.9008%" y="149" width="0.2389%" height="15" fill="rgb(250,74,19)"/><text x="79.1508%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc (14 samples, 0.33%)</title><rect x="79.1398%" y="165" width="0.3345%" height="15" fill="rgb(249,42,33)"/><text x="79.3898%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (14 samples, 0.33%)</title><rect x="79.1398%" y="149" width="0.3345%" height="15" fill="rgb(242,149,17)"/><text x="79.3898%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (14 samples, 0.33%)</title><rect x="79.1398%" y="133" width="0.3345%" height="15" fill="rgb(244,29,21)"/><text x="79.3898%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (12 samples, 0.29%)</title><rect x="79.1876%" y="117" width="0.2867%" height="15" fill="rgb(220,130,37)"/><text x="79.4376%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (6 samples, 0.14%)</title><rect x="79.3309%" y="101" width="0.1434%" height="15" fill="rgb(211,67,2)"/><text x="79.5809%" y="111.50"></text></g><g><title>v1_1`regex_syntax::hir::literal::Literals::cross_product (61 samples, 1.46%)</title><rect x="78.3274%" y="181" width="1.4576%" height="15" fill="rgb(235,68,52)"/><text x="78.5774%" y="191.50"></text></g><g><title>v1_1`regex_syntax::hir::literal::Literals::remove_complete (5 samples, 0.12%)</title><rect x="79.6655%" y="165" width="0.1195%" height="15" fill="rgb(246,142,3)"/><text x="79.9155%" y="175.50"></text></g><g><title>v1_1`regex_syntax::hir::literal::prefixes (109 samples, 2.60%)</title><rect x="77.7061%" y="197" width="2.6045%" height="15" fill="rgb(241,25,7)"/><text x="77.9561%" y="207.50">v1..</text></g><g><title>v1_1`regex_syntax::hir::literal::prefixes (22 samples, 0.53%)</title><rect x="79.7849%" y="181" width="0.5257%" height="15" fill="rgb(242,119,39)"/><text x="80.0349%" y="191.50"></text></g><g><title>v1_1`regex_syntax::hir::literal::Literals::cross_add (16 samples, 0.38%)</title><rect x="79.9283%" y="165" width="0.3823%" height="15" fill="rgb(241,98,45)"/><text x="80.1783%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc (15 samples, 0.36%)</title><rect x="79.9522%" y="149" width="0.3584%" height="15" fill="rgb(254,28,30)"/><text x="80.2022%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (15 samples, 0.36%)</title><rect x="79.9522%" y="133" width="0.3584%" height="15" fill="rgb(241,142,54)"/><text x="80.2022%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (14 samples, 0.33%)</title><rect x="79.9761%" y="117" width="0.3345%" height="15" fill="rgb(222,85,15)"/><text x="80.2261%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (13 samples, 0.31%)</title><rect x="80.0000%" y="101" width="0.3106%" height="15" fill="rgb(210,85,47)"/><text x="80.2500%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (6 samples, 0.14%)</title><rect x="80.4301%" y="181" width="0.1434%" height="15" fill="rgb(224,206,25)"/><text x="80.6801%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (5 samples, 0.12%)</title><rect x="80.7885%" y="165" width="0.1195%" height="15" fill="rgb(243,201,19)"/><text x="81.0385%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (14 samples, 0.33%)</title><rect x="80.9080%" y="165" width="0.3345%" height="15" fill="rgb(236,59,4)"/><text x="81.1580%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (8 samples, 0.19%)</title><rect x="81.0514%" y="149" width="0.1912%" height="15" fill="rgb(254,179,45)"/><text x="81.3014%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc (28 samples, 0.67%)</title><rect x="81.2425%" y="165" width="0.6691%" height="15" fill="rgb(226,14,10)"/><text x="81.4925%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (26 samples, 0.62%)</title><rect x="81.2903%" y="149" width="0.6213%" height="15" fill="rgb(244,27,41)"/><text x="81.5403%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (23 samples, 0.55%)</title><rect x="81.3620%" y="133" width="0.5496%" height="15" fill="rgb(235,35,32)"/><text x="81.6120%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (22 samples, 0.53%)</title><rect x="81.3859%" y="117" width="0.5257%" height="15" fill="rgb(218,68,31)"/><text x="81.6359%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (6 samples, 0.14%)</title><rect x="81.7682%" y="101" width="0.1434%" height="15" fill="rgb(207,120,37)"/><text x="82.0182%" y="111.50"></text></g><g><title>v1_1`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (6 samples, 0.14%)</title><rect x="81.9833%" y="165" width="0.1434%" height="15" fill="rgb(227,98,0)"/><text x="82.2333%" y="175.50"></text></g><g><title>v1_1`regex_syntax::hir::literal::Literals::cross_product (74 samples, 1.77%)</title><rect x="80.5735%" y="181" width="1.7682%" height="15" fill="rgb(207,7,3)"/><text x="80.8235%" y="191.50"></text></g><g><title>v1_1`regex_syntax::hir::literal::Literals::remove_complete (9 samples, 0.22%)</title><rect x="82.1266%" y="165" width="0.2151%" height="15" fill="rgb(206,98,19)"/><text x="82.3766%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (13 samples, 0.31%)</title><rect x="82.5806%" y="133" width="0.3106%" height="15" fill="rgb(217,5,26)"/><text x="82.8306%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (12 samples, 0.29%)</title><rect x="82.6045%" y="117" width="0.2867%" height="15" fill="rgb(235,190,38)"/><text x="82.8545%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (12 samples, 0.29%)</title><rect x="82.6045%" y="101" width="0.2867%" height="15" fill="rgb(247,86,24)"/><text x="82.8545%" y="111.50"></text></g><g><title>v1_1`regex_syntax::hir::literal::suffixes (109 samples, 2.60%)</title><rect x="80.3106%" y="197" width="2.6045%" height="15" fill="rgb(205,101,16)"/><text x="80.5606%" y="207.50">v1..</text></g><g><title>v1_1`regex_syntax::hir::literal::suffixes (24 samples, 0.57%)</title><rect x="82.3417%" y="181" width="0.5735%" height="15" fill="rgb(246,168,33)"/><text x="82.5917%" y="191.50"></text></g><g><title>v1_1`regex_syntax::hir::literal::Literals::cross_add (16 samples, 0.38%)</title><rect x="82.5329%" y="165" width="0.3823%" height="15" fill="rgb(231,114,1)"/><text x="82.7829%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc (14 samples, 0.33%)</title><rect x="82.5806%" y="149" width="0.3345%" height="15" fill="rgb(207,184,53)"/><text x="82.8306%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (8 samples, 0.19%)</title><rect x="83.9665%" y="181" width="0.1912%" height="15" fill="rgb(224,95,51)"/><text x="84.2165%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc (17 samples, 0.41%)</title><rect x="84.1577%" y="181" width="0.4062%" height="15" fill="rgb(212,188,45)"/><text x="84.4077%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (14 samples, 0.33%)</title><rect x="84.2294%" y="165" width="0.3345%" height="15" fill="rgb(223,154,38)"/><text x="84.4794%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (11 samples, 0.26%)</title><rect x="84.3011%" y="149" width="0.2628%" height="15" fill="rgb(251,22,52)"/><text x="84.5511%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (11 samples, 0.26%)</title><rect x="84.3011%" y="133" width="0.2628%" height="15" fill="rgb(229,209,22)"/><text x="84.5511%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (5 samples, 0.12%)</title><rect x="84.8029%" y="133" width="0.1195%" height="15" fill="rgb(234,138,34)"/><text x="85.0529%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (20 samples, 0.48%)</title><rect x="84.6356%" y="149" width="0.4779%" height="15" fill="rgb(212,95,11)"/><text x="84.8856%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (8 samples, 0.19%)</title><rect x="84.9223%" y="133" width="0.1912%" height="15" fill="rgb(240,179,47)"/><text x="85.1723%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (24 samples, 0.57%)</title><rect x="84.5639%" y="181" width="0.5735%" height="15" fill="rgb(240,163,11)"/><text x="84.8139%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (24 samples, 0.57%)</title><rect x="84.5639%" y="165" width="0.5735%" height="15" fill="rgb(236,37,12)"/><text x="84.8139%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc (5 samples, 0.12%)</title><rect x="85.9020%" y="165" width="0.1195%" height="15" fill="rgb(232,164,16)"/><text x="86.1520%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (6 samples, 0.14%)</title><rect x="86.1171%" y="133" width="0.1434%" height="15" fill="rgb(244,205,15)"/><text x="86.3671%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (9 samples, 0.22%)</title><rect x="86.0693%" y="149" width="0.2151%" height="15" fill="rgb(223,117,47)"/><text x="86.3193%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`realloc (13 samples, 0.31%)</title><rect x="86.0215%" y="165" width="0.3106%" height="15" fill="rgb(244,107,35)"/><text x="86.2715%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc (6 samples, 0.14%)</title><rect x="86.4038%" y="149" width="0.1434%" height="15" fill="rgb(205,140,8)"/><text x="86.6538%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (6 samples, 0.14%)</title><rect x="86.4038%" y="133" width="0.1434%" height="15" fill="rgb(228,84,46)"/><text x="86.6538%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (6 samples, 0.14%)</title><rect x="86.4038%" y="117" width="0.1434%" height="15" fill="rgb(254,188,9)"/><text x="86.6538%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (6 samples, 0.14%)</title><rect x="86.4038%" y="101" width="0.1434%" height="15" fill="rgb(206,112,54)"/><text x="86.6538%" y="111.50"></text></g><g><title>v1_1`regex_syntax::hir::ClassUnicode::push (12 samples, 0.29%)</title><rect x="86.3799%" y="165" width="0.2867%" height="15" fill="rgb(216,84,49)"/><text x="86.6299%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (5 samples, 0.12%)</title><rect x="86.5472%" y="149" width="0.1195%" height="15" fill="rgb(214,194,35)"/><text x="86.7972%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (6 samples, 0.14%)</title><rect x="86.9534%" y="101" width="0.1434%" height="15" fill="rgb(249,28,3)"/><text x="87.2034%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (7 samples, 0.17%)</title><rect x="87.1207%" y="101" width="0.1673%" height="15" fill="rgb(222,56,52)"/><text x="87.3707%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (7 samples, 0.17%)</title><rect x="87.1207%" y="85" width="0.1673%" height="15" fill="rgb(245,217,50)"/><text x="87.3707%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (9 samples, 0.22%)</title><rect x="87.3596%" y="101" width="0.2151%" height="15" fill="rgb(213,201,24)"/><text x="87.6096%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (29 samples, 0.69%)</title><rect x="86.9056%" y="133" width="0.6930%" height="15" fill="rgb(248,116,28)"/><text x="87.1556%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (27 samples, 0.65%)</title><rect x="86.9534%" y="117" width="0.6452%" height="15" fill="rgb(219,72,43)"/><text x="87.2034%" y="127.50"></text></g><g><title>v1_1`&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (99 samples, 2.37%)</title><rect x="85.2808%" y="181" width="2.3656%" height="15" fill="rgb(209,138,14)"/><text x="85.5308%" y="191.50">v1..</text></g><g><title>v1_1`regex_syntax::hir::translate::TranslatorI::push (37 samples, 0.88%)</title><rect x="86.7622%" y="165" width="0.8841%" height="15" fill="rgb(222,18,33)"/><text x="87.0122%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (33 samples, 0.79%)</title><rect x="86.8578%" y="149" width="0.7885%" height="15" fill="rgb(213,199,7)"/><text x="87.1078%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (10 samples, 0.24%)</title><rect x="87.9809%" y="149" width="0.2389%" height="15" fill="rgb(250,110,10)"/><text x="88.2309%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (8 samples, 0.19%)</title><rect x="88.0287%" y="133" width="0.1912%" height="15" fill="rgb(248,123,6)"/><text x="88.2787%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (5 samples, 0.12%)</title><rect x="88.6977%" y="85" width="0.1195%" height="15" fill="rgb(206,91,31)"/><text x="88.9477%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (9 samples, 0.22%)</title><rect x="88.6260%" y="117" width="0.2151%" height="15" fill="rgb(211,154,13)"/><text x="88.8760%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (8 samples, 0.19%)</title><rect x="88.6499%" y="101" width="0.1912%" height="15" fill="rgb(225,148,7)"/><text x="88.8999%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`realloc (10 samples, 0.24%)</title><rect x="88.6260%" y="133" width="0.2389%" height="15" fill="rgb(220,160,43)"/><text x="88.8760%" y="143.50"></text></g><g><title>v1_1`&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (23 samples, 0.55%)</title><rect x="88.4588%" y="149" width="0.5496%" height="15" fill="rgb(213,52,39)"/><text x="88.7088%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Nehalem (6 samples, 0.14%)</title><rect x="88.8650%" y="133" width="0.1434%" height="15" fill="rgb(243,137,7)"/><text x="89.1150%" y="143.50"></text></g><g><title>v1_1`core::ptr::drop_in_place (57 samples, 1.36%)</title><rect x="87.6703%" y="181" width="1.3620%" height="15" fill="rgb(230,79,13)"/><text x="87.9203%" y="191.50"></text></g><g><title>v1_1`&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (53 samples, 1.27%)</title><rect x="87.7658%" y="165" width="1.2664%" height="15" fill="rgb(247,105,23)"/><text x="88.0158%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc (7 samples, 0.17%)</title><rect x="89.4385%" y="165" width="0.1673%" height="15" fill="rgb(223,179,41)"/><text x="89.6885%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (7 samples, 0.17%)</title><rect x="89.4385%" y="149" width="0.1673%" height="15" fill="rgb(218,9,34)"/><text x="89.6885%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (7 samples, 0.17%)</title><rect x="89.4385%" y="133" width="0.1673%" height="15" fill="rgb(222,106,8)"/><text x="89.6885%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (7 samples, 0.17%)</title><rect x="89.4385%" y="117" width="0.1673%" height="15" fill="rgb(211,220,0)"/><text x="89.6885%" y="127.50"></text></g><g><title>v1_1`regex_syntax::ast::parse::NestLimiter&lt;P&gt;::check (27 samples, 0.65%)</title><rect x="89.0323%" y="181" width="0.6452%" height="15" fill="rgb(229,52,16)"/><text x="89.2823%" y="191.50"></text></g><g><title>v1_1`regex_syntax::ast::parse::ParserI&lt;P&gt;::char (9 samples, 0.22%)</title><rect x="89.7491%" y="181" width="0.2151%" height="15" fill="rgb(212,155,18)"/><text x="89.9991%" y="191.50"></text></g><g><title>v1_1`regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group_end (5 samples, 0.12%)</title><rect x="89.9642%" y="181" width="0.1195%" height="15" fill="rgb(242,21,14)"/><text x="90.2142%" y="191.50"></text></g><g><title>v1_1`regex::exec::ExecBuilder::build (2,577 samples, 61.58%)</title><rect x="28.7694%" y="213" width="61.5771%" height="15" fill="rgb(222,19,48)"/><text x="29.0194%" y="223.50">v1_1`regex::exec::ExecBuilder::build</text></g><g><title>v1_1`regex_syntax::parser::Parser::parse (309 samples, 7.38%)</title><rect x="82.9630%" y="197" width="7.3835%" height="15" fill="rgb(232,45,27)"/><text x="83.2130%" y="207.50">v1_1`regex..</text></g><g><title>v1_1`regex_syntax::hir::translate::TranslatorI::push (8 samples, 0.19%)</title><rect x="90.1553%" y="181" width="0.1912%" height="15" fill="rgb(249,103,42)"/><text x="90.4053%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc (6 samples, 0.14%)</title><rect x="90.2031%" y="165" width="0.1434%" height="15" fill="rgb(246,81,33)"/><text x="90.4531%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (5 samples, 0.12%)</title><rect x="90.2270%" y="149" width="0.1195%" height="15" fill="rgb(252,33,42)"/><text x="90.4770%" y="159.50"></text></g><g><title>v1_1`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (3,368 samples, 80.48%)</title><rect x="10.0358%" y="261" width="80.4779%" height="15" fill="rgb(209,212,41)"/><text x="10.2858%" y="271.50">v1_1`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut</text></g><g><title>v1_1`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (3,366 samples, 80.43%)</title><rect x="10.0836%" y="245" width="80.4301%" height="15" fill="rgb(207,154,6)"/><text x="10.3336%" y="255.50">v1_1`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut</text></g><g><title>v1_1`regex::re_unicode::Regex::new (2,658 samples, 63.51%)</title><rect x="27.0012%" y="229" width="63.5125%" height="15" fill="rgb(223,64,47)"/><text x="27.2512%" y="239.50">v1_1`regex::re_unicode::Regex::new</text></g><g><title>libsystem_malloc.dylib`free (5 samples, 0.12%)</title><rect x="90.6571%" y="213" width="0.1195%" height="15" fill="rgb(211,161,38)"/><text x="90.9071%" y="223.50"></text></g><g><title>v1_1`alloc::sync::Arc&lt;T&gt;::drop_slow (14 samples, 0.33%)</title><rect x="90.5137%" y="245" width="0.3345%" height="15" fill="rgb(219,138,40)"/><text x="90.7637%" y="255.50"></text></g><g><title>v1_1`core::ptr::drop_in_place (11 samples, 0.26%)</title><rect x="90.5854%" y="229" width="0.2628%" height="15" fill="rgb(241,228,46)"/><text x="90.8354%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (6 samples, 0.14%)</title><rect x="91.0872%" y="213" width="0.1434%" height="15" fill="rgb(223,209,38)"/><text x="91.3372%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (5 samples, 0.12%)</title><rect x="91.1111%" y="197" width="0.1195%" height="15" fill="rgb(236,164,45)"/><text x="91.3611%" y="207.50"></text></g><g><title>v1_1`core::ptr::drop_in_place (32 samples, 0.76%)</title><rect x="90.5137%" y="261" width="0.7646%" height="15" fill="rgb(231,15,5)"/><text x="90.7637%" y="271.50"></text></g><g><title>v1_1`core::ptr::drop_in_place (18 samples, 0.43%)</title><rect x="90.8483%" y="245" width="0.4301%" height="15" fill="rgb(252,35,15)"/><text x="91.0983%" y="255.50"></text></g><g><title>v1_1`core::ptr::drop_in_place (14 samples, 0.33%)</title><rect x="90.9438%" y="229" width="0.3345%" height="15" fill="rgb(248,181,18)"/><text x="91.1938%" y="239.50"></text></g><g><title>v1_1`regex::dfa::Fsm::add_state (6 samples, 0.14%)</title><rect x="91.5173%" y="229" width="0.1434%" height="15" fill="rgb(233,39,42)"/><text x="91.7673%" y="239.50"></text></g><g><title>v1_1`regex::dfa::Fsm::cached_state (16 samples, 0.38%)</title><rect x="91.3740%" y="245" width="0.3823%" height="15" fill="rgb(238,110,33)"/><text x="91.6240%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`realloc (8 samples, 0.19%)</title><rect x="92.1386%" y="197" width="0.1912%" height="15" fill="rgb(233,195,10)"/><text x="92.3886%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (8 samples, 0.19%)</title><rect x="92.1386%" y="181" width="0.1912%" height="15" fill="rgb(254,105,3)"/><text x="92.3886%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (7 samples, 0.17%)</title><rect x="92.1625%" y="165" width="0.1673%" height="15" fill="rgb(221,225,9)"/><text x="92.4125%" y="175.50"></text></g><g><title>v1_1`regex::dfa::Fsm::add_state (13 samples, 0.31%)</title><rect x="92.0908%" y="213" width="0.3106%" height="15" fill="rgb(224,227,45)"/><text x="92.3408%" y="223.50"></text></g><g><title>v1_1`regex::dfa::Fsm::cached_state (24 samples, 0.57%)</title><rect x="91.8757%" y="229" width="0.5735%" height="15" fill="rgb(229,198,43)"/><text x="92.1257%" y="239.50"></text></g><g><title>v1_1`regex::dfa::Fsm::next_state (32 samples, 0.76%)</title><rect x="91.8280%" y="245" width="0.7646%" height="15" fill="rgb(206,209,35)"/><text x="92.0780%" y="255.50"></text></g><g><title>v1_1`regex::dfa::Fsm::follow_epsilons (6 samples, 0.14%)</title><rect x="92.4492%" y="229" width="0.1434%" height="15" fill="rgb(245,195,53)"/><text x="92.6992%" y="239.50"></text></g><g><title>v1_1`regex::dfa::Cache::new (9 samples, 0.22%)</title><rect x="92.6165%" y="213" width="0.2151%" height="15" fill="rgb(240,92,26)"/><text x="92.8665%" y="223.50"></text></g><g><title>v1_1`regex::re_unicode::Regex::is_match (66 samples, 1.58%)</title><rect x="91.2784%" y="261" width="1.5771%" height="15" fill="rgb(207,40,23)"/><text x="91.5284%" y="271.50"></text></g><g><title>v1_1`thread_local::cached::CachedThreadLocal&lt;T&gt;::get_or_try_slow (10 samples, 0.24%)</title><rect x="92.6165%" y="245" width="0.2389%" height="15" fill="rgb(223,111,35)"/><text x="92.8665%" y="255.50"></text></g><g><title>v1_1`regex::exec::ProgramCacheInner::new (10 samples, 0.24%)</title><rect x="92.6165%" y="229" width="0.2389%" height="15" fill="rgb(229,147,28)"/><text x="92.8665%" y="239.50"></text></g><g><title>v1_1`regex::re_unicode::Regex::new (5 samples, 0.12%)</title><rect x="92.8554%" y="261" width="0.1195%" height="15" fill="rgb(211,29,28)"/><text x="93.1054%" y="271.50"></text></g><g><title>v1_1`regex::exec::ExecBuilder::build (5 samples, 0.12%)</title><rect x="92.8554%" y="245" width="0.1195%" height="15" fill="rgb(228,72,33)"/><text x="93.1054%" y="255.50"></text></g><g><title>v1_1`&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (5 samples, 0.12%)</title><rect x="93.7873%" y="213" width="0.1195%" height="15" fill="rgb(205,214,31)"/><text x="94.0373%" y="223.50"></text></g><g><title>v1_1`regex::compile::Compiler::c (7 samples, 0.17%)</title><rect x="94.2891%" y="181" width="0.1673%" height="15" fill="rgb(224,111,15)"/><text x="94.5391%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (12 samples, 0.29%)</title><rect x="94.6714%" y="149" width="0.2867%" height="15" fill="rgb(253,21,26)"/><text x="94.9214%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (9 samples, 0.22%)</title><rect x="94.7431%" y="133" width="0.2151%" height="15" fill="rgb(245,139,43)"/><text x="94.9931%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (5 samples, 0.12%)</title><rect x="94.8387%" y="117" width="0.1195%" height="15" fill="rgb(252,170,7)"/><text x="95.0887%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`realloc (14 samples, 0.33%)</title><rect x="94.6476%" y="165" width="0.3345%" height="15" fill="rgb(231,118,14)"/><text x="94.8976%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (5 samples, 0.12%)</title><rect x="95.1254%" y="149" width="0.1195%" height="15" fill="rgb(238,83,0)"/><text x="95.3754%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (5 samples, 0.12%)</title><rect x="95.1254%" y="133" width="0.1195%" height="15" fill="rgb(221,39,39)"/><text x="95.3754%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (5 samples, 0.12%)</title><rect x="95.1254%" y="117" width="0.1195%" height="15" fill="rgb(222,119,46)"/><text x="95.3754%" y="127.50"></text></g><g><title>v1_1`regex::compile::CompileClass::c_utf8_seq (19 samples, 0.45%)</title><rect x="95.0777%" y="165" width="0.4540%" height="15" fill="rgb(222,165,49)"/><text x="95.3277%" y="175.50"></text></g><g><title>v1_1`regex::compile::SuffixCache::get (10 samples, 0.24%)</title><rect x="95.2927%" y="149" width="0.2389%" height="15" fill="rgb(219,113,52)"/><text x="95.5427%" y="159.50"></text></g><g><title>v1_1`regex::compile::Compiler::c_class (52 samples, 1.24%)</title><rect x="94.4564%" y="181" width="1.2425%" height="15" fill="rgb(214,7,15)"/><text x="94.7064%" y="191.50"></text></g><g><title>v1_1`regex::compile::Compiler::c (65 samples, 1.55%)</title><rect x="94.2413%" y="197" width="1.5532%" height="15" fill="rgb(235,32,4)"/><text x="94.4913%" y="207.50"></text></g><g><title>v1_1`regex::compile::Compiler::c (5 samples, 0.12%)</title><rect x="95.8184%" y="165" width="0.1195%" height="15" fill="rgb(238,90,54)"/><text x="96.0684%" y="175.50"></text></g><g><title>v1_1`regex::compile::Compiler::c (6 samples, 0.14%)</title><rect x="95.8184%" y="181" width="0.1434%" height="15" fill="rgb(213,208,19)"/><text x="96.0684%" y="191.50"></text></g><g><title>v1_1`regex::compile::Compiler::c_capture (8 samples, 0.19%)</title><rect x="95.7945%" y="197" width="0.1912%" height="15" fill="rgb(233,156,4)"/><text x="96.0445%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`realloc (9 samples, 0.22%)</title><rect x="96.0573%" y="149" width="0.2151%" height="15" fill="rgb(207,194,5)"/><text x="96.3073%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (8 samples, 0.19%)</title><rect x="96.0812%" y="133" width="0.1912%" height="15" fill="rgb(206,111,30)"/><text x="96.3312%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (8 samples, 0.19%)</title><rect x="96.0812%" y="117" width="0.1912%" height="15" fill="rgb(243,70,54)"/><text x="96.3312%" y="127.50"></text></g><g><title>v1_1`regex::compile::CompileClass::c_utf8_seq (7 samples, 0.17%)</title><rect x="96.3202%" y="149" width="0.1673%" height="15" fill="rgb(242,28,8)"/><text x="96.5702%" y="159.50"></text></g><g><title>v1_1`regex::compile::Compiler::c_class (22 samples, 0.53%)</title><rect x="95.9857%" y="165" width="0.5257%" height="15" fill="rgb(219,106,18)"/><text x="96.2357%" y="175.50"></text></g><g><title>v1_1`regex::compile::Compiler::c_repeat_zero_or_more (24 samples, 0.57%)</title><rect x="95.9857%" y="181" width="0.5735%" height="15" fill="rgb(244,222,10)"/><text x="96.2357%" y="191.50"></text></g><g><title>v1_1`regex::compile::Compiler::c_dotstar (26 samples, 0.62%)</title><rect x="95.9857%" y="197" width="0.6213%" height="15" fill="rgb(236,179,52)"/><text x="96.2357%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (5 samples, 0.12%)</title><rect x="97.2282%" y="181" width="0.1195%" height="15" fill="rgb(213,23,39)"/><text x="97.4782%" y="191.50"></text></g><g><title>v1_1`regex::compile::Compiler::compile (144 samples, 3.44%)</title><rect x="94.0024%" y="213" width="3.4409%" height="15" fill="rgb(238,48,10)"/><text x="94.2524%" y="223.50">v1_..</text></g><g><title>v1_1`regex::compile::Compiler::compile_finish (35 samples, 0.84%)</title><rect x="96.6069%" y="197" width="0.8363%" height="15" fill="rgb(251,196,23)"/><text x="96.8569%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`calloc (10 samples, 0.24%)</title><rect x="97.4432%" y="197" width="0.2389%" height="15" fill="rgb(250,152,24)"/><text x="97.6932%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_calloc (10 samples, 0.24%)</title><rect x="97.4432%" y="181" width="0.2389%" height="15" fill="rgb(209,150,17)"/><text x="97.6932%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (10 samples, 0.24%)</title><rect x="97.4432%" y="165" width="0.2389%" height="15" fill="rgb(234,202,34)"/><text x="97.6932%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (10 samples, 0.24%)</title><rect x="97.4432%" y="149" width="0.2389%" height="15" fill="rgb(253,148,53)"/><text x="97.6932%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Ivybridge (6 samples, 0.14%)</title><rect x="97.5388%" y="133" width="0.1434%" height="15" fill="rgb(218,129,16)"/><text x="97.7888%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`calloc (5 samples, 0.12%)</title><rect x="97.7778%" y="181" width="0.1195%" height="15" fill="rgb(216,85,19)"/><text x="98.0278%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_calloc (5 samples, 0.12%)</title><rect x="97.7778%" y="165" width="0.1195%" height="15" fill="rgb(235,228,7)"/><text x="98.0278%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (5 samples, 0.12%)</title><rect x="97.7778%" y="149" width="0.1195%" height="15" fill="rgb(245,175,0)"/><text x="98.0278%" y="159.50"></text></g><g><title>v1_1`regex::compile::Compiler::new (23 samples, 0.55%)</title><rect x="97.4432%" y="213" width="0.5496%" height="15" fill="rgb(208,168,36)"/><text x="97.6932%" y="223.50"></text></g><g><title>v1_1`regex::prog::Program::new (9 samples, 0.22%)</title><rect x="97.7778%" y="197" width="0.2151%" height="15" fill="rgb(246,171,24)"/><text x="98.0278%" y="207.50"></text></g><g><title>v1_1`regex::literal::imp::LiteralSearcher::new (7 samples, 0.17%)</title><rect x="97.9928%" y="213" width="0.1673%" height="15" fill="rgb(215,142,24)"/><text x="98.2428%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc (5 samples, 0.12%)</title><rect x="98.3990%" y="181" width="0.1195%" height="15" fill="rgb(250,187,7)"/><text x="98.6490%" y="191.50"></text></g><g><title>v1_1`regex_syntax::hir::literal::Literals::cross_product (8 samples, 0.19%)</title><rect x="98.3513%" y="197" width="0.1912%" height="15" fill="rgb(228,66,33)"/><text x="98.6013%" y="207.50"></text></g><g><title>v1_1`regex_syntax::hir::literal::prefixes (11 samples, 0.26%)</title><rect x="98.3035%" y="213" width="0.2628%" height="15" fill="rgb(234,215,21)"/><text x="98.5535%" y="223.50"></text></g><g><title>v1_1`regex_syntax::hir::literal::Literals::cross_product (5 samples, 0.12%)</title><rect x="98.6141%" y="197" width="0.1195%" height="15" fill="rgb(222,191,20)"/><text x="98.8641%" y="207.50"></text></g><g><title>v1_1`regex_syntax::hir::literal::suffixes (11 samples, 0.26%)</title><rect x="98.5663%" y="213" width="0.2628%" height="15" fill="rgb(245,79,54)"/><text x="98.8163%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`realloc (5 samples, 0.12%)</title><rect x="99.0681%" y="197" width="0.1195%" height="15" fill="rgb(240,10,37)"/><text x="99.3181%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (5 samples, 0.12%)</title><rect x="99.0681%" y="181" width="0.1195%" height="15" fill="rgb(214,192,32)"/><text x="99.3181%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (5 samples, 0.12%)</title><rect x="99.0681%" y="165" width="0.1195%" height="15" fill="rgb(209,36,54)"/><text x="99.3181%" y="175.50"></text></g><g><title>v1_1`&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (12 samples, 0.29%)</title><rect x="99.1876%" y="197" width="0.2867%" height="15" fill="rgb(220,10,11)"/><text x="99.4376%" y="207.50"></text></g><g><title>v1_1`regex_syntax::hir::translate::TranslatorI::push (5 samples, 0.12%)</title><rect x="99.3548%" y="181" width="0.1195%" height="15" fill="rgb(221,106,17)"/><text x="99.6048%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (5 samples, 0.12%)</title><rect x="99.3548%" y="165" width="0.1195%" height="15" fill="rgb(251,142,44)"/><text x="99.6048%" y="175.50"></text></g><g><title>v1_1`&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (11 samples, 0.26%)</title><rect x="99.5221%" y="181" width="0.2628%" height="15" fill="rgb(238,13,15)"/><text x="99.7721%" y="191.50"></text></g><g><title>v1_1`&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (8 samples, 0.19%)</title><rect x="99.5938%" y="165" width="0.1912%" height="15" fill="rgb(208,107,27)"/><text x="99.8438%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (7 samples, 0.17%)</title><rect x="99.6177%" y="149" width="0.1673%" height="15" fill="rgb(205,136,37)"/><text x="99.8677%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (7 samples, 0.17%)</title><rect x="99.6177%" y="133" width="0.1673%" height="15" fill="rgb(250,205,27)"/><text x="99.8677%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (6 samples, 0.14%)</title><rect x="99.6416%" y="117" width="0.1434%" height="15" fill="rgb(210,80,43)"/><text x="99.8916%" y="127.50"></text></g><g><title>v1_1`core::ptr::drop_in_place (14 samples, 0.33%)</title><rect x="99.4743%" y="197" width="0.3345%" height="15" fill="rgb(247,160,36)"/><text x="99.7243%" y="207.50"></text></g><g><title>v1_1`main (4,184 samples, 99.98%)</title><rect x="0.0000%" y="325" width="99.9761%" height="15" fill="rgb(234,13,49)"/><text x="0.2500%" y="335.50">v1_1`main</text></g><g><title>v1_1`std::rt::lang_start::_{{closure}} (4,184 samples, 99.98%)</title><rect x="0.0000%" y="309" width="99.9761%" height="15" fill="rgb(234,122,0)"/><text x="0.2500%" y="319.50">v1_1`std::rt::lang_start::_{{closure}}</text></g><g><title>v1_1`v1_1::main (4,184 samples, 99.98%)</title><rect x="0.0000%" y="293" width="99.9761%" height="15" fill="rgb(207,146,38)"/><text x="0.2500%" y="303.50">v1_1`v1_1::main</text></g><g><title>v1_1`v1_1::find_regex (4,183 samples, 99.95%)</title><rect x="0.0239%" y="277" width="99.9522%" height="15" fill="rgb(207,177,25)"/><text x="0.2739%" y="287.50">v1_1`v1_1::find_regex</text></g><g><title>v1_1`v1_1::matches (293 samples, 7.00%)</title><rect x="92.9749%" y="261" width="7.0012%" height="15" fill="rgb(211,178,42)"/><text x="93.2249%" y="271.50">v1_1`v1_1..</text></g><g><title>v1_1`regex::re_unicode::Regex::new (291 samples, 6.95%)</title><rect x="93.0227%" y="245" width="6.9534%" height="15" fill="rgb(230,69,54)"/><text x="93.2727%" y="255.50">v1_1`rege..</text></g><g><title>v1_1`regex::exec::ExecBuilder::build (282 samples, 6.74%)</title><rect x="93.2378%" y="229" width="6.7384%" height="15" fill="rgb(214,135,41)"/><text x="93.4878%" y="239.50">v1_1`rege..</text></g><g><title>v1_1`regex_syntax::parser::Parser::parse (48 samples, 1.15%)</title><rect x="98.8292%" y="213" width="1.1470%" height="15" fill="rgb(237,67,25)"/><text x="99.0792%" y="223.50"></text></g><g><title>all (4,185 samples, 100%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(222,189,50)"/><text x="0.2500%" y="383.50"></text></g><g><title>v1_1`0x1 (4,185 samples, 100.00%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(245,148,34)"/><text x="0.2500%" y="367.50">v1_1`0x1</text></g><g><title>libdyld.dylib`start (4,185 samples, 100.00%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(222,29,6)"/><text x="0.2500%" y="351.50">libdyld.dylib`start</text></g></svg></svg>