<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="406" onload="init(evt)" viewBox="0 0 1200 406" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="406" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="389.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="389.00"> </text><svg id="frames" x="10" width="1180"><g><title>dyld`_dyld_start (1 samples, 0.30%)</title><rect x="0.0000%" y="325" width="0.2994%" height="15" fill="rgb(227,0,7)"/><text x="0.2500%" y="335.50"></text></g><g><title>dyld`dyldbootstrap::start (1 samples, 0.30%)</title><rect x="0.0000%" y="309" width="0.2994%" height="15" fill="rgb(217,0,24)"/><text x="0.2500%" y="319.50"></text></g><g><title>dyld`dyld::_main (1 samples, 0.30%)</title><rect x="0.0000%" y="293" width="0.2994%" height="15" fill="rgb(221,193,54)"/><text x="0.2500%" y="303.50"></text></g><g><title>dyld`ImageLoaderMachO::getEntryFromLC_MAIN (1 samples, 0.30%)</title><rect x="0.0000%" y="277" width="0.2994%" height="15" fill="rgb(248,212,6)"/><text x="0.2500%" y="287.50"></text></g><g><title>dyld`ImageLoaderMachO::segUnaccessible (1 samples, 0.30%)</title><rect x="0.0000%" y="261" width="0.2994%" height="15" fill="rgb(208,68,35)"/><text x="0.2500%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`__exit (2 samples, 0.60%)</title><rect x="0.2994%" y="309" width="0.5988%" height="15" fill="rgb(232,128,0)"/><text x="0.5494%" y="319.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.30%)</title><rect x="1.1976%" y="261" width="0.2994%" height="15" fill="rgb(207,160,47)"/><text x="1.4476%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.30%)</title><rect x="1.4970%" y="261" width="0.2994%" height="15" fill="rgb(228,23,34)"/><text x="1.7470%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.30%)</title><rect x="1.4970%" y="245" width="0.2994%" height="15" fill="rgb(218,30,26)"/><text x="1.7470%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.30%)</title><rect x="1.7964%" y="261" width="0.2994%" height="15" fill="rgb(220,122,19)"/><text x="2.0464%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.30%)</title><rect x="1.7964%" y="245" width="0.2994%" height="15" fill="rgb(250,228,42)"/><text x="2.0464%" y="255.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.30%)</title><rect x="1.7964%" y="229" width="0.2994%" height="15" fill="rgb(240,193,28)"/><text x="2.0464%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.30%)</title><rect x="2.0958%" y="245" width="0.2994%" height="15" fill="rgb(216,20,37)"/><text x="2.3458%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.30%)</title><rect x="2.9940%" y="165" width="0.2994%" height="15" fill="rgb(206,188,39)"/><text x="3.2440%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_size (1 samples, 0.30%)</title><rect x="2.9940%" y="149" width="0.2994%" height="15" fill="rgb(217,207,13)"/><text x="3.2440%" y="159.50"></text></g><g><title>v2`core::ptr::drop_in_place (2 samples, 0.60%)</title><rect x="2.9940%" y="213" width="0.5988%" height="15" fill="rgb(231,73,38)"/><text x="3.2440%" y="223.50"></text></g><g><title>v2`alloc::sync::Arc&lt;T&gt;::drop_slow (2 samples, 0.60%)</title><rect x="2.9940%" y="197" width="0.5988%" height="15" fill="rgb(225,20,46)"/><text x="3.2440%" y="207.50"></text></g><g><title>v2`core::ptr::drop_in_place (2 samples, 0.60%)</title><rect x="2.9940%" y="181" width="0.5988%" height="15" fill="rgb(210,31,41)"/><text x="3.2440%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.30%)</title><rect x="3.2934%" y="165" width="0.2994%" height="15" fill="rgb(221,200,47)"/><text x="3.5434%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.30%)</title><rect x="3.2934%" y="149" width="0.2994%" height="15" fill="rgb(226,26,5)"/><text x="3.5434%" y="159.50"></text></g><g><title>v2`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (3 samples, 0.90%)</title><rect x="2.9940%" y="229" width="0.8982%" height="15" fill="rgb(249,33,26)"/><text x="3.2440%" y="239.50"></text></g><g><title>v2`hashbrown::map::make_hash (1 samples, 0.30%)</title><rect x="3.5928%" y="213" width="0.2994%" height="15" fill="rgb(235,183,28)"/><text x="3.8428%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.30%)</title><rect x="3.8922%" y="213" width="0.2994%" height="15" fill="rgb(221,5,38)"/><text x="4.1422%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.30%)</title><rect x="4.1916%" y="213" width="0.2994%" height="15" fill="rgb(247,18,42)"/><text x="4.4416%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.30%)</title><rect x="4.1916%" y="197" width="0.2994%" height="15" fill="rgb(241,131,45)"/><text x="4.4416%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (1 samples, 0.30%)</title><rect x="4.4910%" y="213" width="0.2994%" height="15" fill="rgb(249,31,29)"/><text x="4.7410%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.30%)</title><rect x="4.7904%" y="197" width="0.2994%" height="15" fill="rgb(225,111,53)"/><text x="5.0404%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.30%)</title><rect x="5.0898%" y="197" width="0.2994%" height="15" fill="rgb(238,160,17)"/><text x="5.3398%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.60%)</title><rect x="5.6886%" y="181" width="0.5988%" height="15" fill="rgb(214,148,48)"/><text x="5.9386%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (2 samples, 0.60%)</title><rect x="5.6886%" y="165" width="0.5988%" height="15" fill="rgb(232,36,49)"/><text x="5.9386%" y="175.50"></text></g><g><title>v2`alloc::sync::Arc&lt;T&gt;::drop_slow (10 samples, 2.99%)</title><rect x="4.7904%" y="213" width="2.9940%" height="15" fill="rgb(209,103,24)"/><text x="5.0404%" y="223.50">v2`..</text></g><g><title>v2`core::ptr::drop_in_place (8 samples, 2.40%)</title><rect x="5.3892%" y="197" width="2.3952%" height="15" fill="rgb(229,88,8)"/><text x="5.6392%" y="207.50">v2..</text></g><g><title>libsystem_malloc.dylib`free_tiny (5 samples, 1.50%)</title><rect x="6.2874%" y="181" width="1.4970%" height="15" fill="rgb(213,181,19)"/><text x="6.5374%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (5 samples, 1.50%)</title><rect x="6.2874%" y="165" width="1.4970%" height="15" fill="rgb(254,191,54)"/><text x="6.5374%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.30%)</title><rect x="7.4850%" y="149" width="0.2994%" height="15" fill="rgb(241,83,37)"/><text x="7.7350%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (3 samples, 0.90%)</title><rect x="7.7844%" y="181" width="0.8982%" height="15" fill="rgb(233,36,39)"/><text x="8.0344%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (3 samples, 0.90%)</title><rect x="7.7844%" y="165" width="0.8982%" height="15" fill="rgb(226,3,54)"/><text x="8.0344%" y="175.50"></text></g><g><title>v2`core::ptr::drop_in_place (22 samples, 6.59%)</title><rect x="3.8922%" y="229" width="6.5868%" height="15" fill="rgb(245,192,40)"/><text x="4.1422%" y="239.50">v2`core::..</text></g><g><title>v2`core::ptr::drop_in_place (9 samples, 2.69%)</title><rect x="7.7844%" y="213" width="2.6946%" height="15" fill="rgb(238,167,29)"/><text x="8.0344%" y="223.50">v2..</text></g><g><title>v2`core::ptr::drop_in_place (9 samples, 2.69%)</title><rect x="7.7844%" y="197" width="2.6946%" height="15" fill="rgb(232,182,51)"/><text x="8.0344%" y="207.50">v2..</text></g><g><title>libsystem_malloc.dylib`free_tiny (6 samples, 1.80%)</title><rect x="8.6826%" y="181" width="1.7964%" height="15" fill="rgb(231,60,39)"/><text x="8.9326%" y="191.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (3 samples, 0.90%)</title><rect x="9.5808%" y="165" width="0.8982%" height="15" fill="rgb(208,69,12)"/><text x="9.8308%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.30%)</title><rect x="10.1796%" y="149" width="0.2994%" height="15" fill="rgb(235,93,37)"/><text x="10.4296%" y="159.50"></text></g><g><title>v2`regex::exec::ExecBuilder::build (1 samples, 0.30%)</title><rect x="10.4790%" y="229" width="0.2994%" height="15" fill="rgb(213,116,39)"/><text x="10.7290%" y="239.50"></text></g><g><title>v2`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.30%)</title><rect x="11.0778%" y="197" width="0.2994%" height="15" fill="rgb(222,207,29)"/><text x="11.3278%" y="207.50"></text></g><g><title>v2`regex::dfa::Fsm::cached_state (3 samples, 0.90%)</title><rect x="11.0778%" y="213" width="0.8982%" height="15" fill="rgb(206,96,30)"/><text x="11.3278%" y="223.50"></text></g><g><title>v2`regex::dfa::push_inst_ptr (2 samples, 0.60%)</title><rect x="11.3772%" y="197" width="0.5988%" height="15" fill="rgb(218,138,4)"/><text x="11.6272%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.30%)</title><rect x="11.6766%" y="181" width="0.2994%" height="15" fill="rgb(250,191,14)"/><text x="11.9266%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.30%)</title><rect x="11.6766%" y="165" width="0.2994%" height="15" fill="rgb(239,60,40)"/><text x="11.9266%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.30%)</title><rect x="11.6766%" y="149" width="0.2994%" height="15" fill="rgb(206,27,48)"/><text x="11.9266%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.30%)</title><rect x="11.6766%" y="133" width="0.2994%" height="15" fill="rgb(225,35,8)"/><text x="11.9266%" y="143.50"></text></g><g><title>v2`regex::dfa::Fsm::follow_epsilons (2 samples, 0.60%)</title><rect x="11.9760%" y="213" width="0.5988%" height="15" fill="rgb(250,213,24)"/><text x="12.2260%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc (1 samples, 0.30%)</title><rect x="14.6707%" y="197" width="0.2994%" height="15" fill="rgb(247,123,22)"/><text x="14.9207%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.30%)</title><rect x="16.1677%" y="181" width="0.2994%" height="15" fill="rgb(231,138,38)"/><text x="16.4177%" y="191.50"></text></g><g><title>v2`hashbrown::map::make_hash (1 samples, 0.30%)</title><rect x="16.4671%" y="181" width="0.2994%" height="15" fill="rgb(231,145,46)"/><text x="16.7171%" y="191.50"></text></g><g><title>v2`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.30%)</title><rect x="16.4671%" y="165" width="0.2994%" height="15" fill="rgb(251,118,11)"/><text x="16.7171%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (1 samples, 0.30%)</title><rect x="17.3653%" y="133" width="0.2994%" height="15" fill="rgb(217,147,25)"/><text x="17.6153%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (4 samples, 1.20%)</title><rect x="17.6647%" y="117" width="1.1976%" height="15" fill="rgb(247,81,37)"/><text x="17.9147%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.60%)</title><rect x="18.2635%" y="101" width="0.5988%" height="15" fill="rgb(209,12,38)"/><text x="18.5135%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.60%)</title><rect x="18.8623%" y="117" width="0.5988%" height="15" fill="rgb(227,1,9)"/><text x="19.1123%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.60%)</title><rect x="18.8623%" y="101" width="0.5988%" height="15" fill="rgb(248,47,43)"/><text x="19.1123%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.30%)</title><rect x="19.1617%" y="85" width="0.2994%" height="15" fill="rgb(221,10,30)"/><text x="19.4117%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`realloc (8 samples, 2.40%)</title><rect x="17.3653%" y="165" width="2.3952%" height="15" fill="rgb(210,229,1)"/><text x="17.6153%" y="175.50">li..</text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (8 samples, 2.40%)</title><rect x="17.3653%" y="149" width="2.3952%" height="15" fill="rgb(222,148,37)"/><text x="17.6153%" y="159.50">li..</text></g><g><title>libsystem_malloc.dylib`szone_realloc (7 samples, 2.10%)</title><rect x="17.6647%" y="133" width="2.0958%" height="15" fill="rgb(234,67,33)"/><text x="17.9147%" y="143.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.30%)</title><rect x="19.4611%" y="117" width="0.2994%" height="15" fill="rgb(247,98,35)"/><text x="19.7111%" y="127.50"></text></g><g><title>v2`regex::dfa::Fsm::add_state (11 samples, 3.29%)</title><rect x="16.7665%" y="181" width="3.2934%" height="15" fill="rgb(247,138,52)"/><text x="17.0165%" y="191.50">v2`..</text></g><g><title>v2`hashbrown::map::make_hash (1 samples, 0.30%)</title><rect x="19.7605%" y="165" width="0.2994%" height="15" fill="rgb(213,79,30)"/><text x="20.0105%" y="175.50"></text></g><g><title>v2`regex::dfa::Fsm::cached_state (20 samples, 5.99%)</title><rect x="14.9701%" y="197" width="5.9880%" height="15" fill="rgb(246,177,23)"/><text x="15.2201%" y="207.50">v2`regex..</text></g><g><title>v2`regex::dfa::push_inst_ptr (3 samples, 0.90%)</title><rect x="20.0599%" y="181" width="0.8982%" height="15" fill="rgb(230,62,27)"/><text x="20.3099%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.30%)</title><rect x="20.6587%" y="165" width="0.2994%" height="15" fill="rgb(216,154,8)"/><text x="20.9087%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.30%)</title><rect x="20.6587%" y="149" width="0.2994%" height="15" fill="rgb(244,35,45)"/><text x="20.9087%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.30%)</title><rect x="20.6587%" y="133" width="0.2994%" height="15" fill="rgb(251,115,12)"/><text x="20.9087%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.30%)</title><rect x="20.6587%" y="117" width="0.2994%" height="15" fill="rgb(240,54,50)"/><text x="20.9087%" y="127.50"></text></g><g><title>v2`regex::dfa::Fsm::follow_epsilons (5 samples, 1.50%)</title><rect x="20.9581%" y="197" width="1.4970%" height="15" fill="rgb(233,84,52)"/><text x="21.2081%" y="207.50"></text></g><g><title>v2`regex::dfa::Fsm::next_state (34 samples, 10.18%)</title><rect x="12.5749%" y="213" width="10.1796%" height="15" fill="rgb(207,117,47)"/><text x="12.8249%" y="223.50">v2`regex::dfa::..</text></g><g><title>v2`regex::dfa::push_inst_ptr (1 samples, 0.30%)</title><rect x="22.4551%" y="197" width="0.2994%" height="15" fill="rgb(249,43,39)"/><text x="22.7051%" y="207.50"></text></g><g><title>v2`regex::dfa::Fsm::prefix_at (1 samples, 0.30%)</title><rect x="22.7545%" y="213" width="0.2994%" height="15" fill="rgb(209,38,44)"/><text x="23.0045%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Nehalem (1 samples, 0.30%)</title><rect x="23.0539%" y="197" width="0.2994%" height="15" fill="rgb(236,212,23)"/><text x="23.3039%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`calloc (2 samples, 0.60%)</title><rect x="23.9521%" y="149" width="0.5988%" height="15" fill="rgb(242,79,21)"/><text x="24.2021%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_calloc (2 samples, 0.60%)</title><rect x="23.9521%" y="133" width="0.5988%" height="15" fill="rgb(211,96,35)"/><text x="24.2021%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.60%)</title><rect x="23.9521%" y="117" width="0.5988%" height="15" fill="rgb(253,215,40)"/><text x="24.2021%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.60%)</title><rect x="23.9521%" y="101" width="0.5988%" height="15" fill="rgb(211,81,21)"/><text x="24.2021%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Ivybridge (1 samples, 0.30%)</title><rect x="24.2515%" y="85" width="0.2994%" height="15" fill="rgb(208,190,38)"/><text x="24.5015%" y="95.50"></text></g><g><title>v2`regex::re_unicode::Regex::is_match (47 samples, 14.07%)</title><rect x="10.7784%" y="229" width="14.0719%" height="15" fill="rgb(235,213,38)"/><text x="11.0284%" y="239.50">v2`regex::re_unicode:..</text></g><g><title>v2`thread_local::cached::CachedThreadLocal&lt;T&gt;::get_or_try_slow (6 samples, 1.80%)</title><rect x="23.0539%" y="213" width="1.7964%" height="15" fill="rgb(237,122,38)"/><text x="23.3039%" y="223.50">v..</text></g><g><title>v2`regex::exec::ProgramCacheInner::new (5 samples, 1.50%)</title><rect x="23.3533%" y="197" width="1.4970%" height="15" fill="rgb(244,218,35)"/><text x="23.6033%" y="207.50"></text></g><g><title>v2`regex::dfa::Cache::new (4 samples, 1.20%)</title><rect x="23.6527%" y="181" width="1.1976%" height="15" fill="rgb(240,68,47)"/><text x="23.9027%" y="191.50"></text></g><g><title>v2`regex::sparse::SparseSet::new (4 samples, 1.20%)</title><rect x="23.6527%" y="165" width="1.1976%" height="15" fill="rgb(210,16,53)"/><text x="23.9027%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc (1 samples, 0.30%)</title><rect x="24.5509%" y="149" width="0.2994%" height="15" fill="rgb(235,124,12)"/><text x="24.8009%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (1 samples, 0.30%)</title><rect x="24.5509%" y="133" width="0.2994%" height="15" fill="rgb(224,169,11)"/><text x="24.8009%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.30%)</title><rect x="24.5509%" y="117" width="0.2994%" height="15" fill="rgb(250,166,2)"/><text x="24.8009%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.30%)</title><rect x="24.5509%" y="101" width="0.2994%" height="15" fill="rgb(242,216,29)"/><text x="24.8009%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc (2 samples, 0.60%)</title><rect x="24.8503%" y="213" width="0.5988%" height="15" fill="rgb(230,116,27)"/><text x="25.1003%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (2 samples, 0.60%)</title><rect x="24.8503%" y="197" width="0.5988%" height="15" fill="rgb(228,99,48)"/><text x="25.1003%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.60%)</title><rect x="24.8503%" y="181" width="0.5988%" height="15" fill="rgb(253,11,6)"/><text x="25.1003%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.60%)</title><rect x="24.8503%" y="165" width="0.5988%" height="15" fill="rgb(247,143,39)"/><text x="25.1003%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Ivybridge (2 samples, 0.60%)</title><rect x="25.4491%" y="213" width="0.5988%" height="15" fill="rgb(236,97,10)"/><text x="25.6991%" y="223.50"></text></g><g><title>v2`core::ptr::drop_in_place (1 samples, 0.30%)</title><rect x="26.0479%" y="213" width="0.2994%" height="15" fill="rgb(233,208,19)"/><text x="26.2979%" y="223.50"></text></g><g><title>v2`regex::compile::Compiler::new (1 samples, 0.30%)</title><rect x="26.3473%" y="213" width="0.2994%" height="15" fill="rgb(216,164,2)"/><text x="26.5973%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.30%)</title><rect x="27.8443%" y="133" width="0.2994%" height="15" fill="rgb(220,129,5)"/><text x="28.0943%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`calloc (3 samples, 0.90%)</title><rect x="27.5449%" y="197" width="0.8982%" height="15" fill="rgb(242,17,10)"/><text x="27.7949%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_calloc (3 samples, 0.90%)</title><rect x="27.5449%" y="181" width="0.8982%" height="15" fill="rgb(242,107,0)"/><text x="27.7949%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.90%)</title><rect x="27.5449%" y="165" width="0.8982%" height="15" fill="rgb(251,28,31)"/><text x="27.7949%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (3 samples, 0.90%)</title><rect x="27.5449%" y="149" width="0.8982%" height="15" fill="rgb(233,223,10)"/><text x="27.7949%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Ivybridge (1 samples, 0.30%)</title><rect x="28.1437%" y="133" width="0.2994%" height="15" fill="rgb(215,21,27)"/><text x="28.3937%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc (2 samples, 0.60%)</title><rect x="28.4431%" y="197" width="0.5988%" height="15" fill="rgb(232,23,21)"/><text x="28.6931%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (2 samples, 0.60%)</title><rect x="28.4431%" y="181" width="0.5988%" height="15" fill="rgb(244,5,23)"/><text x="28.6931%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.60%)</title><rect x="28.4431%" y="165" width="0.5988%" height="15" fill="rgb(226,81,46)"/><text x="28.6931%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.60%)</title><rect x="28.4431%" y="149" width="0.5988%" height="15" fill="rgb(247,70,30)"/><text x="28.6931%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Ivybridge (2 samples, 0.60%)</title><rect x="29.0419%" y="197" width="0.5988%" height="15" fill="rgb(212,68,19)"/><text x="29.2919%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Nehalem (2 samples, 0.60%)</title><rect x="29.6407%" y="197" width="0.5988%" height="15" fill="rgb(240,187,13)"/><text x="29.8907%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.60%)</title><rect x="30.2395%" y="181" width="0.5988%" height="15" fill="rgb(223,113,26)"/><text x="30.4895%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.30%)</title><rect x="30.5389%" y="165" width="0.2994%" height="15" fill="rgb(206,192,2)"/><text x="30.7889%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.30%)</title><rect x="30.5389%" y="149" width="0.2994%" height="15" fill="rgb(241,108,4)"/><text x="30.7889%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (1 samples, 0.30%)</title><rect x="30.8383%" y="149" width="0.2994%" height="15" fill="rgb(247,173,49)"/><text x="31.0883%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc (3 samples, 0.90%)</title><rect x="30.8383%" y="181" width="0.8982%" height="15" fill="rgb(224,114,35)"/><text x="31.0883%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (3 samples, 0.90%)</title><rect x="30.8383%" y="165" width="0.8982%" height="15" fill="rgb(245,159,27)"/><text x="31.0883%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.60%)</title><rect x="31.1377%" y="149" width="0.5988%" height="15" fill="rgb(245,172,44)"/><text x="31.3877%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.60%)</title><rect x="31.1377%" y="133" width="0.5988%" height="15" fill="rgb(236,23,11)"/><text x="31.3877%" y="143.50"></text></g><g><title>v2`&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (6 samples, 1.80%)</title><rect x="30.2395%" y="197" width="1.7964%" height="15" fill="rgb(205,117,38)"/><text x="30.4895%" y="207.50">v..</text></g><g><title>v2`core::ptr::drop_in_place (1 samples, 0.30%)</title><rect x="31.7365%" y="181" width="0.2994%" height="15" fill="rgb(237,72,25)"/><text x="31.9865%" y="191.50"></text></g><g><title>v2`regex::compile::Compiler::c (2 samples, 0.60%)</title><rect x="33.5329%" y="165" width="0.5988%" height="15" fill="rgb(244,70,9)"/><text x="33.7829%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc (2 samples, 0.60%)</title><rect x="35.3293%" y="149" width="0.5988%" height="15" fill="rgb(217,125,39)"/><text x="35.5793%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (2 samples, 0.60%)</title><rect x="35.3293%" y="133" width="0.5988%" height="15" fill="rgb(235,36,10)"/><text x="35.5793%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.60%)</title><rect x="35.3293%" y="117" width="0.5988%" height="15" fill="rgb(251,123,47)"/><text x="35.5793%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (2 samples, 0.60%)</title><rect x="35.3293%" y="101" width="0.5988%" height="15" fill="rgb(221,13,13)"/><text x="35.5793%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.60%)</title><rect x="36.5269%" y="101" width="0.5988%" height="15" fill="rgb(238,131,9)"/><text x="36.7769%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.30%)</title><rect x="36.8263%" y="85" width="0.2994%" height="15" fill="rgb(211,50,8)"/><text x="37.0763%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.30%)</title><rect x="37.1257%" y="101" width="0.2994%" height="15" fill="rgb(245,182,24)"/><text x="37.3757%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.30%)</title><rect x="37.1257%" y="85" width="0.2994%" height="15" fill="rgb(242,14,37)"/><text x="37.3757%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.30%)</title><rect x="37.1257%" y="69" width="0.2994%" height="15" fill="rgb(246,228,12)"/><text x="37.3757%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.30%)</title><rect x="37.4251%" y="101" width="0.2994%" height="15" fill="rgb(213,55,15)"/><text x="37.6751%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`realloc (11 samples, 3.29%)</title><rect x="35.9281%" y="149" width="3.2934%" height="15" fill="rgb(209,9,3)"/><text x="36.1781%" y="159.50">lib..</text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (10 samples, 2.99%)</title><rect x="36.2275%" y="133" width="2.9940%" height="15" fill="rgb(230,59,30)"/><text x="36.4775%" y="143.50">lib..</text></g><g><title>libsystem_malloc.dylib`szone_realloc (9 samples, 2.69%)</title><rect x="36.5269%" y="117" width="2.6946%" height="15" fill="rgb(209,121,21)"/><text x="36.7769%" y="127.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (5 samples, 1.50%)</title><rect x="37.7246%" y="101" width="1.4970%" height="15" fill="rgb(220,109,13)"/><text x="37.9746%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (2 samples, 0.60%)</title><rect x="38.6228%" y="85" width="0.5988%" height="15" fill="rgb(232,18,1)"/><text x="38.8728%" y="95.50"></text></g><g><title>v2`&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.60%)</title><rect x="39.2216%" y="149" width="0.5988%" height="15" fill="rgb(215,41,42)"/><text x="39.4716%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.30%)</title><rect x="42.2156%" y="85" width="0.2994%" height="15" fill="rgb(224,123,36)"/><text x="42.4656%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`realloc (2 samples, 0.60%)</title><rect x="42.2156%" y="133" width="0.5988%" height="15" fill="rgb(240,125,3)"/><text x="42.4656%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (2 samples, 0.60%)</title><rect x="42.2156%" y="117" width="0.5988%" height="15" fill="rgb(205,98,50)"/><text x="42.4656%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (2 samples, 0.60%)</title><rect x="42.2156%" y="101" width="0.5988%" height="15" fill="rgb(205,185,37)"/><text x="42.4656%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.30%)</title><rect x="42.5150%" y="85" width="0.2994%" height="15" fill="rgb(238,207,15)"/><text x="42.7650%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.30%)</title><rect x="42.5150%" y="69" width="0.2994%" height="15" fill="rgb(213,199,42)"/><text x="42.7650%" y="79.50"></text></g><g><title>v2`regex::compile::Compiler::push_compiled (3 samples, 0.90%)</title><rect x="42.8144%" y="133" width="0.8982%" height="15" fill="rgb(235,201,11)"/><text x="43.0644%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (2 samples, 0.60%)</title><rect x="43.1138%" y="117" width="0.5988%" height="15" fill="rgb(207,46,11)"/><text x="43.3638%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (2 samples, 0.60%)</title><rect x="43.1138%" y="101" width="0.5988%" height="15" fill="rgb(241,35,35)"/><text x="43.3638%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (2 samples, 0.60%)</title><rect x="43.1138%" y="85" width="0.5988%" height="15" fill="rgb(243,32,47)"/><text x="43.3638%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.60%)</title><rect x="43.1138%" y="69" width="0.5988%" height="15" fill="rgb(247,202,23)"/><text x="43.3638%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (2 samples, 0.60%)</title><rect x="43.1138%" y="53" width="0.5988%" height="15" fill="rgb(219,102,11)"/><text x="43.3638%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (1 samples, 0.30%)</title><rect x="43.4132%" y="37" width="0.2994%" height="15" fill="rgb(243,110,44)"/><text x="43.6632%" y="47.50"></text></g><g><title>v2`regex::compile::CompileClass::c_utf8_seq (22 samples, 6.59%)</title><rect x="39.8204%" y="149" width="6.5868%" height="15" fill="rgb(222,74,54)"/><text x="40.0704%" y="159.50">v2`regex:..</text></g><g><title>v2`regex::compile::SuffixCache::get (9 samples, 2.69%)</title><rect x="43.7126%" y="133" width="2.6946%" height="15" fill="rgb(216,99,12)"/><text x="43.9626%" y="143.50">v2..</text></g><g><title>v2`regex::compile::Compiler::fill_split (1 samples, 0.30%)</title><rect x="46.4072%" y="149" width="0.2994%" height="15" fill="rgb(226,22,26)"/><text x="46.6572%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc (1 samples, 0.30%)</title><rect x="47.6048%" y="133" width="0.2994%" height="15" fill="rgb(217,163,10)"/><text x="47.8548%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (1 samples, 0.30%)</title><rect x="47.6048%" y="117" width="0.2994%" height="15" fill="rgb(213,25,53)"/><text x="47.8548%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.30%)</title><rect x="47.6048%" y="101" width="0.2994%" height="15" fill="rgb(252,105,26)"/><text x="47.8548%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.30%)</title><rect x="47.6048%" y="85" width="0.2994%" height="15" fill="rgb(220,39,43)"/><text x="47.8548%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.30%)</title><rect x="47.6048%" y="69" width="0.2994%" height="15" fill="rgb(229,68,48)"/><text x="47.8548%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.30%)</title><rect x="47.9042%" y="85" width="0.2994%" height="15" fill="rgb(252,8,32)"/><text x="48.1542%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.30%)</title><rect x="48.2036%" y="85" width="0.2994%" height="15" fill="rgb(223,20,43)"/><text x="48.4536%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.30%)</title><rect x="48.2036%" y="69" width="0.2994%" height="15" fill="rgb(229,81,49)"/><text x="48.4536%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.30%)</title><rect x="48.2036%" y="53" width="0.2994%" height="15" fill="rgb(236,28,36)"/><text x="48.4536%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (3 samples, 0.90%)</title><rect x="47.9042%" y="117" width="0.8982%" height="15" fill="rgb(249,185,26)"/><text x="48.1542%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (3 samples, 0.90%)</title><rect x="47.9042%" y="101" width="0.8982%" height="15" fill="rgb(249,174,33)"/><text x="48.1542%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Nehalem (1 samples, 0.30%)</title><rect x="48.5030%" y="85" width="0.2994%" height="15" fill="rgb(233,201,37)"/><text x="48.7530%" y="95.50"></text></g><g><title>v2`regex::compile::Compiler::c_class (50 samples, 14.97%)</title><rect x="34.1317%" y="165" width="14.9701%" height="15" fill="rgb(221,78,26)"/><text x="34.3817%" y="175.50">v2`regex::compile::Comp..</text></g><g><title>v2`regex::compile::Compiler::push_split_hole (8 samples, 2.40%)</title><rect x="46.7066%" y="149" width="2.3952%" height="15" fill="rgb(250,127,30)"/><text x="46.9566%" y="159.50">v2..</text></g><g><title>libsystem_malloc.dylib`realloc (4 samples, 1.20%)</title><rect x="47.9042%" y="133" width="1.1976%" height="15" fill="rgb(230,49,44)"/><text x="48.1542%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.30%)</title><rect x="48.8024%" y="117" width="0.2994%" height="15" fill="rgb(229,67,23)"/><text x="49.0524%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.30%)</title><rect x="49.7006%" y="149" width="0.2994%" height="15" fill="rgb(249,83,47)"/><text x="49.9506%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.30%)</title><rect x="49.7006%" y="133" width="0.2994%" height="15" fill="rgb(215,43,3)"/><text x="49.9506%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.30%)</title><rect x="49.7006%" y="117" width="0.2994%" height="15" fill="rgb(238,154,13)"/><text x="49.9506%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.30%)</title><rect x="50.0000%" y="149" width="0.2994%" height="15" fill="rgb(219,56,2)"/><text x="50.2500%" y="159.50"></text></g><g><title>v2`regex::compile::Compiler::c (60 samples, 17.96%)</title><rect x="32.6347%" y="181" width="17.9641%" height="15" fill="rgb(233,0,4)"/><text x="32.8847%" y="191.50">v2`regex::compile::Compiler:..</text></g><g><title>v2`regex::compile::Compiler::fill (5 samples, 1.50%)</title><rect x="49.1018%" y="165" width="1.4970%" height="15" fill="rgb(235,30,7)"/><text x="49.3518%" y="175.50"></text></g><g><title>v2`regex::compile::Compiler::fill (1 samples, 0.30%)</title><rect x="50.2994%" y="149" width="0.2994%" height="15" fill="rgb(250,79,13)"/><text x="50.5494%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc (1 samples, 0.30%)</title><rect x="50.5988%" y="165" width="0.2994%" height="15" fill="rgb(211,146,34)"/><text x="50.8488%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (1 samples, 0.30%)</title><rect x="50.5988%" y="149" width="0.2994%" height="15" fill="rgb(228,22,38)"/><text x="50.8488%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.30%)</title><rect x="50.5988%" y="133" width="0.2994%" height="15" fill="rgb(235,168,5)"/><text x="50.8488%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.30%)</title><rect x="50.5988%" y="117" width="0.2994%" height="15" fill="rgb(221,155,16)"/><text x="50.8488%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.30%)</title><rect x="51.7964%" y="85" width="0.2994%" height="15" fill="rgb(215,215,53)"/><text x="52.0464%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.30%)</title><rect x="51.7964%" y="69" width="0.2994%" height="15" fill="rgb(223,4,10)"/><text x="52.0464%" y="79.50"></text></g><g><title>v2`regex::compile::Compiler::c (5 samples, 1.50%)</title><rect x="50.8982%" y="149" width="1.4970%" height="15" fill="rgb(234,103,6)"/><text x="51.1482%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`realloc (2 samples, 0.60%)</title><rect x="51.7964%" y="133" width="0.5988%" height="15" fill="rgb(227,97,0)"/><text x="52.0464%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (2 samples, 0.60%)</title><rect x="51.7964%" y="117" width="0.5988%" height="15" fill="rgb(234,150,53)"/><text x="52.0464%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (2 samples, 0.60%)</title><rect x="51.7964%" y="101" width="0.5988%" height="15" fill="rgb(228,201,54)"/><text x="52.0464%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (1 samples, 0.30%)</title><rect x="52.0958%" y="85" width="0.2994%" height="15" fill="rgb(222,22,37)"/><text x="52.3458%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_free (1 samples, 0.30%)</title><rect x="52.3952%" y="101" width="0.2994%" height="15" fill="rgb(237,53,32)"/><text x="52.6452%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.60%)</title><rect x="52.6946%" y="85" width="0.5988%" height="15" fill="rgb(233,25,53)"/><text x="52.9446%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.30%)</title><rect x="53.2934%" y="85" width="0.2994%" height="15" fill="rgb(210,40,34)"/><text x="53.5434%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.30%)</title><rect x="53.2934%" y="69" width="0.2994%" height="15" fill="rgb(241,220,44)"/><text x="53.5434%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.30%)</title><rect x="53.2934%" y="53" width="0.2994%" height="15" fill="rgb(235,28,35)"/><text x="53.5434%" y="63.50"></text></g><g><title>v2`regex::compile::Compiler::c_class (5 samples, 1.50%)</title><rect x="52.3952%" y="149" width="1.4970%" height="15" fill="rgb(210,56,17)"/><text x="52.6452%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`realloc (5 samples, 1.50%)</title><rect x="52.3952%" y="133" width="1.4970%" height="15" fill="rgb(224,130,29)"/><text x="52.6452%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (5 samples, 1.50%)</title><rect x="52.3952%" y="117" width="1.4970%" height="15" fill="rgb(235,212,8)"/><text x="52.6452%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (4 samples, 1.20%)</title><rect x="52.6946%" y="101" width="1.1976%" height="15" fill="rgb(223,33,50)"/><text x="52.9446%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (1 samples, 0.30%)</title><rect x="53.5928%" y="85" width="0.2994%" height="15" fill="rgb(219,149,13)"/><text x="53.8428%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.30%)</title><rect x="53.8922%" y="133" width="0.2994%" height="15" fill="rgb(250,156,29)"/><text x="54.1422%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.30%)</title><rect x="53.8922%" y="117" width="0.2994%" height="15" fill="rgb(216,193,19)"/><text x="54.1422%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.30%)</title><rect x="54.1916%" y="133" width="0.2994%" height="15" fill="rgb(216,135,14)"/><text x="54.4416%" y="143.50"></text></g><g><title>v2`regex::compile::Compiler::c (13 samples, 3.89%)</title><rect x="50.8982%" y="165" width="3.8922%" height="15" fill="rgb(241,47,5)"/><text x="51.1482%" y="175.50">v2`r..</text></g><g><title>v2`regex::compile::Compiler::fill (3 samples, 0.90%)</title><rect x="53.8922%" y="149" width="0.8982%" height="15" fill="rgb(233,42,35)"/><text x="54.1422%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc (1 samples, 0.30%)</title><rect x="54.4910%" y="133" width="0.2994%" height="15" fill="rgb(231,13,6)"/><text x="54.7410%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (1 samples, 0.30%)</title><rect x="54.4910%" y="117" width="0.2994%" height="15" fill="rgb(207,181,40)"/><text x="54.7410%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.30%)</title><rect x="54.4910%" y="101" width="0.2994%" height="15" fill="rgb(254,173,49)"/><text x="54.7410%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.30%)</title><rect x="54.4910%" y="85" width="0.2994%" height="15" fill="rgb(221,1,38)"/><text x="54.7410%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.30%)</title><rect x="54.4910%" y="69" width="0.2994%" height="15" fill="rgb(206,124,46)"/><text x="54.7410%" y="79.50"></text></g><g><title>v2`regex::compile::Compiler::c_capture (15 samples, 4.49%)</title><rect x="50.5988%" y="181" width="4.4910%" height="15" fill="rgb(249,21,11)"/><text x="50.8488%" y="191.50">v2`re..</text></g><g><title>v2`regex::compile::Compiler::fill (1 samples, 0.30%)</title><rect x="54.7904%" y="165" width="0.2994%" height="15" fill="rgb(222,201,40)"/><text x="55.0404%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.30%)</title><rect x="54.7904%" y="149" width="0.2994%" height="15" fill="rgb(235,61,29)"/><text x="55.0404%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.30%)</title><rect x="55.0898%" y="165" width="0.2994%" height="15" fill="rgb(219,207,3)"/><text x="55.3398%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.30%)</title><rect x="55.0898%" y="149" width="0.2994%" height="15" fill="rgb(222,56,46)"/><text x="55.3398%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.30%)</title><rect x="55.0898%" y="133" width="0.2994%" height="15" fill="rgb(239,76,54)"/><text x="55.3398%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.30%)</title><rect x="55.0898%" y="117" width="0.2994%" height="15" fill="rgb(231,124,27)"/><text x="55.3398%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.30%)</title><rect x="55.0898%" y="101" width="0.2994%" height="15" fill="rgb(249,195,6)"/><text x="55.3398%" y="111.50"></text></g><g><title>v2`regex::compile::Compiler::c_class (2 samples, 0.60%)</title><rect x="55.0898%" y="181" width="0.5988%" height="15" fill="rgb(237,174,47)"/><text x="55.3398%" y="191.50"></text></g><g><title>v2`regex::compile::Compiler::fill_split (1 samples, 0.30%)</title><rect x="55.3892%" y="165" width="0.2994%" height="15" fill="rgb(206,201,31)"/><text x="55.6392%" y="175.50"></text></g><g><title>v2`core::ptr::drop_in_place (1 samples, 0.30%)</title><rect x="55.6886%" y="165" width="0.2994%" height="15" fill="rgb(231,57,52)"/><text x="55.9386%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.30%)</title><rect x="55.6886%" y="149" width="0.2994%" height="15" fill="rgb(248,177,22)"/><text x="55.9386%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.30%)</title><rect x="55.6886%" y="133" width="0.2994%" height="15" fill="rgb(215,211,37)"/><text x="55.9386%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.30%)</title><rect x="55.6886%" y="117" width="0.2994%" height="15" fill="rgb(241,128,51)"/><text x="55.9386%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.30%)</title><rect x="55.9880%" y="149" width="0.2994%" height="15" fill="rgb(227,165,31)"/><text x="56.2380%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc (1 samples, 0.30%)</title><rect x="56.8862%" y="133" width="0.2994%" height="15" fill="rgb(228,167,24)"/><text x="57.1362%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (1 samples, 0.30%)</title><rect x="56.8862%" y="117" width="0.2994%" height="15" fill="rgb(228,143,12)"/><text x="57.1362%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.30%)</title><rect x="56.8862%" y="101" width="0.2994%" height="15" fill="rgb(249,149,8)"/><text x="57.1362%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.30%)</title><rect x="56.8862%" y="85" width="0.2994%" height="15" fill="rgb(243,35,44)"/><text x="57.1362%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.30%)</title><rect x="57.1856%" y="85" width="0.2994%" height="15" fill="rgb(246,89,9)"/><text x="57.4356%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.30%)</title><rect x="57.1856%" y="69" width="0.2994%" height="15" fill="rgb(233,213,13)"/><text x="57.4356%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.30%)</title><rect x="57.1856%" y="53" width="0.2994%" height="15" fill="rgb(233,141,41)"/><text x="57.4356%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (2 samples, 0.60%)</title><rect x="57.1856%" y="117" width="0.5988%" height="15" fill="rgb(239,167,4)"/><text x="57.4356%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (2 samples, 0.60%)</title><rect x="57.1856%" y="101" width="0.5988%" height="15" fill="rgb(209,217,16)"/><text x="57.4356%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.30%)</title><rect x="57.4850%" y="85" width="0.2994%" height="15" fill="rgb(219,88,35)"/><text x="57.7350%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.30%)</title><rect x="57.4850%" y="69" width="0.2994%" height="15" fill="rgb(220,193,23)"/><text x="57.7350%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`realloc (3 samples, 0.90%)</title><rect x="57.1856%" y="133" width="0.8982%" height="15" fill="rgb(230,90,52)"/><text x="57.4356%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.30%)</title><rect x="57.7844%" y="117" width="0.2994%" height="15" fill="rgb(252,106,19)"/><text x="58.0344%" y="127.50"></text></g><g><title>v2`&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 1.20%)</title><rect x="58.0838%" y="133" width="1.1976%" height="15" fill="rgb(206,74,20)"/><text x="58.3338%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.30%)</title><rect x="58.9820%" y="117" width="0.2994%" height="15" fill="rgb(230,138,44)"/><text x="59.2320%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.30%)</title><rect x="59.2814%" y="117" width="0.2994%" height="15" fill="rgb(235,182,43)"/><text x="59.5314%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.30%)</title><rect x="59.2814%" y="101" width="0.2994%" height="15" fill="rgb(242,16,51)"/><text x="59.5314%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.30%)</title><rect x="59.2814%" y="85" width="0.2994%" height="15" fill="rgb(248,9,4)"/><text x="59.5314%" y="95.50"></text></g><g><title>v2`regex::compile::CompileClass::c_utf8_seq (2 samples, 0.60%)</title><rect x="59.2814%" y="133" width="0.5988%" height="15" fill="rgb(210,31,22)"/><text x="59.5314%" y="143.50"></text></g><g><title>v2`regex::compile::Compiler::push_compiled (1 samples, 0.30%)</title><rect x="59.5808%" y="117" width="0.2994%" height="15" fill="rgb(239,54,39)"/><text x="59.8308%" y="127.50"></text></g><g><title>v2`regex::compile::Compiler::fill (1 samples, 0.30%)</title><rect x="59.8802%" y="133" width="0.2994%" height="15" fill="rgb(230,99,41)"/><text x="60.1302%" y="143.50"></text></g><g><title>v2`regex::compile::Compiler::c_class (14 samples, 4.19%)</title><rect x="56.2874%" y="149" width="4.1916%" height="15" fill="rgb(253,106,12)"/><text x="56.5374%" y="159.50">v2`re..</text></g><g><title>v2`regex::compile::Compiler::push_split_hole (1 samples, 0.30%)</title><rect x="60.1796%" y="133" width="0.2994%" height="15" fill="rgb(213,46,41)"/><text x="60.4296%" y="143.50"></text></g><g><title>v2`regex::compile::Compiler::fill (1 samples, 0.30%)</title><rect x="60.4790%" y="149" width="0.2994%" height="15" fill="rgb(215,133,35)"/><text x="60.7290%" y="159.50"></text></g><g><title>v2`regex::compile::Compiler::c_repeat_zero_or_more (17 samples, 5.09%)</title><rect x="55.9880%" y="165" width="5.0898%" height="15" fill="rgb(213,28,5)"/><text x="56.2380%" y="175.50">v2`reg..</text></g><g><title>v2`regex::compile::Compiler::push_split_hole (1 samples, 0.30%)</title><rect x="60.7784%" y="149" width="0.2994%" height="15" fill="rgb(215,77,49)"/><text x="61.0284%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc (1 samples, 0.30%)</title><rect x="60.7784%" y="133" width="0.2994%" height="15" fill="rgb(248,100,22)"/><text x="61.0284%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (1 samples, 0.30%)</title><rect x="60.7784%" y="117" width="0.2994%" height="15" fill="rgb(208,67,9)"/><text x="61.0284%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.30%)</title><rect x="60.7784%" y="101" width="0.2994%" height="15" fill="rgb(219,133,21)"/><text x="61.0284%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.30%)</title><rect x="60.7784%" y="85" width="0.2994%" height="15" fill="rgb(246,46,29)"/><text x="61.0284%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.30%)</title><rect x="60.7784%" y="69" width="0.2994%" height="15" fill="rgb(246,185,52)"/><text x="61.0284%" y="79.50"></text></g><g><title>v2`regex::compile::Compiler::c_dotstar (19 samples, 5.69%)</title><rect x="55.6886%" y="181" width="5.6886%" height="15" fill="rgb(252,136,11)"/><text x="55.9386%" y="191.50">v2`rege..</text></g><g><title>v2`regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.30%)</title><rect x="61.0778%" y="165" width="0.2994%" height="15" fill="rgb(219,138,53)"/><text x="61.3278%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`calloc (2 samples, 0.60%)</title><rect x="65.5689%" y="165" width="0.5988%" height="15" fill="rgb(211,51,23)"/><text x="65.8189%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_calloc (2 samples, 0.60%)</title><rect x="65.5689%" y="149" width="0.5988%" height="15" fill="rgb(247,221,28)"/><text x="65.8189%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2 samples, 0.60%)</title><rect x="65.5689%" y="133" width="0.5988%" height="15" fill="rgb(251,222,45)"/><text x="65.8189%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.30%)</title><rect x="65.8683%" y="117" width="0.2994%" height="15" fill="rgb(217,162,53)"/><text x="66.1183%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.30%)</title><rect x="65.8683%" y="101" width="0.2994%" height="15" fill="rgb(229,93,14)"/><text x="66.1183%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (1 samples, 0.30%)</title><rect x="66.1677%" y="165" width="0.2994%" height="15" fill="rgb(209,67,49)"/><text x="66.4177%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.60%)</title><rect x="66.4671%" y="165" width="0.5988%" height="15" fill="rgb(213,87,29)"/><text x="66.7171%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.30%)</title><rect x="66.7665%" y="149" width="0.2994%" height="15" fill="rgb(205,151,52)"/><text x="67.0165%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.30%)</title><rect x="67.0659%" y="165" width="0.2994%" height="15" fill="rgb(253,215,39)"/><text x="67.3159%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (3 samples, 0.90%)</title><rect x="67.3653%" y="165" width="0.8982%" height="15" fill="rgb(221,220,41)"/><text x="67.6153%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc (1 samples, 0.30%)</title><rect x="68.2635%" y="165" width="0.2994%" height="15" fill="rgb(218,133,21)"/><text x="68.5135%" y="175.50"></text></g><g><title>v2`regex::compile::Compiler::compile_finish (26 samples, 7.78%)</title><rect x="61.3772%" y="181" width="7.7844%" height="15" fill="rgb(221,193,43)"/><text x="61.6272%" y="191.50">v2`regex::c..</text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (2 samples, 0.60%)</title><rect x="68.5629%" y="165" width="0.5988%" height="15" fill="rgb(240,128,52)"/><text x="68.8129%" y="175.50"></text></g><g><title>v2`regex::compile::Compiler::compile (125 samples, 37.43%)</title><rect x="32.0359%" y="197" width="37.4251%" height="15" fill="rgb(253,114,12)"/><text x="32.2859%" y="207.50">v2`regex::compile::Compiler::compile</text></g><g><title>v2`regex_syntax::hir::ClassUnicode::push (1 samples, 0.30%)</title><rect x="69.1617%" y="181" width="0.2994%" height="15" fill="rgb(215,223,47)"/><text x="69.4117%" y="191.50"></text></g><g><title>libdyld.dylib`tlv_get_addr (1 samples, 0.30%)</title><rect x="69.4611%" y="181" width="0.2994%" height="15" fill="rgb(248,225,23)"/><text x="69.7111%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`calloc (8 samples, 2.40%)</title><rect x="69.7605%" y="181" width="2.3952%" height="15" fill="rgb(250,108,0)"/><text x="70.0105%" y="191.50">li..</text></g><g><title>libsystem_malloc.dylib`malloc_zone_calloc (8 samples, 2.40%)</title><rect x="69.7605%" y="165" width="2.3952%" height="15" fill="rgb(228,208,7)"/><text x="70.0105%" y="175.50">li..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (8 samples, 2.40%)</title><rect x="69.7605%" y="149" width="2.3952%" height="15" fill="rgb(244,45,10)"/><text x="70.0105%" y="159.50">li..</text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (8 samples, 2.40%)</title><rect x="69.7605%" y="133" width="2.3952%" height="15" fill="rgb(207,125,25)"/><text x="70.0105%" y="143.50">li..</text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Ivybridge (7 samples, 2.10%)</title><rect x="70.0599%" y="117" width="2.0958%" height="15" fill="rgb(210,195,18)"/><text x="70.3099%" y="127.50">l..</text></g><g><title>libsystem_malloc.dylib`malloc (1 samples, 0.30%)</title><rect x="72.1557%" y="181" width="0.2994%" height="15" fill="rgb(249,80,12)"/><text x="72.4057%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (1 samples, 0.30%)</title><rect x="72.1557%" y="165" width="0.2994%" height="15" fill="rgb(221,65,9)"/><text x="72.4057%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.30%)</title><rect x="72.1557%" y="149" width="0.2994%" height="15" fill="rgb(235,49,36)"/><text x="72.4057%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.30%)</title><rect x="72.1557%" y="133" width="0.2994%" height="15" fill="rgb(225,32,20)"/><text x="72.4057%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`calloc (3 samples, 0.90%)</title><rect x="72.4551%" y="165" width="0.8982%" height="15" fill="rgb(215,141,46)"/><text x="72.7051%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_calloc (3 samples, 0.90%)</title><rect x="72.4551%" y="149" width="0.8982%" height="15" fill="rgb(250,160,47)"/><text x="72.7051%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (3 samples, 0.90%)</title><rect x="72.4551%" y="133" width="0.8982%" height="15" fill="rgb(216,222,40)"/><text x="72.7051%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (3 samples, 0.90%)</title><rect x="72.4551%" y="117" width="0.8982%" height="15" fill="rgb(234,217,39)"/><text x="72.7051%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Ivybridge (2 samples, 0.60%)</title><rect x="73.3533%" y="165" width="0.5988%" height="15" fill="rgb(207,178,40)"/><text x="73.6033%" y="175.50"></text></g><g><title>v2`regex::compile::Compiler::new (17 samples, 5.09%)</title><rect x="69.4611%" y="197" width="5.0898%" height="15" fill="rgb(221,136,13)"/><text x="69.7111%" y="207.50">v2`reg..</text></g><g><title>v2`regex::prog::Program::new (7 samples, 2.10%)</title><rect x="72.4551%" y="181" width="2.0958%" height="15" fill="rgb(249,199,10)"/><text x="72.7051%" y="191.50">v..</text></g><g><title>v2`regex::literal::imp::LiteralSearcher::new (2 samples, 0.60%)</title><rect x="73.9521%" y="165" width="0.5988%" height="15" fill="rgb(249,222,13)"/><text x="74.2021%" y="175.50"></text></g><g><title>v2`regex::literal::imp::FreqyPacked::new (1 samples, 0.30%)</title><rect x="74.2515%" y="149" width="0.2994%" height="15" fill="rgb(244,185,38)"/><text x="74.5015%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc (1 samples, 0.30%)</title><rect x="74.8503%" y="181" width="0.2994%" height="15" fill="rgb(236,202,9)"/><text x="75.1003%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (1 samples, 0.30%)</title><rect x="74.8503%" y="165" width="0.2994%" height="15" fill="rgb(250,229,37)"/><text x="75.1003%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.30%)</title><rect x="74.8503%" y="149" width="0.2994%" height="15" fill="rgb(206,174,23)"/><text x="75.1003%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.30%)</title><rect x="74.8503%" y="133" width="0.2994%" height="15" fill="rgb(211,33,43)"/><text x="75.1003%" y="143.50"></text></g><g><title>v2`regex::literal::imp::LiteralSearcher::new (3 samples, 0.90%)</title><rect x="74.5509%" y="197" width="0.8982%" height="15" fill="rgb(245,58,50)"/><text x="74.8009%" y="207.50"></text></g><g><title>v2`regex::literal::imp::FreqyPacked::new (1 samples, 0.30%)</title><rect x="75.1497%" y="181" width="0.2994%" height="15" fill="rgb(244,68,36)"/><text x="75.3997%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.30%)</title><rect x="75.4491%" y="181" width="0.2994%" height="15" fill="rgb(232,229,15)"/><text x="75.6991%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.30%)</title><rect x="75.4491%" y="165" width="0.2994%" height="15" fill="rgb(254,30,23)"/><text x="75.6991%" y="175.50"></text></g><g><title>v2`regex::literal::imp::Matcher::new (2 samples, 0.60%)</title><rect x="75.4491%" y="197" width="0.5988%" height="15" fill="rgb(235,160,14)"/><text x="75.6991%" y="207.50"></text></g><g><title>v2`regex::literal::imp::FreqyPacked::new (1 samples, 0.30%)</title><rect x="75.7485%" y="181" width="0.2994%" height="15" fill="rgb(212,155,44)"/><text x="75.9985%" y="191.50"></text></g><g><title>v2`regex_syntax::hir::literal::Literals::cross_product (1 samples, 0.30%)</title><rect x="76.0479%" y="197" width="0.2994%" height="15" fill="rgb(226,2,50)"/><text x="76.2979%" y="207.50"></text></g><g><title>v2`regex_syntax::hir::literal::Literals::union (1 samples, 0.30%)</title><rect x="76.3473%" y="197" width="0.2994%" height="15" fill="rgb(234,177,6)"/><text x="76.5973%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.30%)</title><rect x="76.6467%" y="165" width="0.2994%" height="15" fill="rgb(217,24,9)"/><text x="76.8967%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.30%)</title><rect x="76.6467%" y="149" width="0.2994%" height="15" fill="rgb(220,13,46)"/><text x="76.8967%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.30%)</title><rect x="76.9461%" y="165" width="0.2994%" height="15" fill="rgb(239,221,27)"/><text x="77.1961%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.30%)</title><rect x="76.9461%" y="149" width="0.2994%" height="15" fill="rgb(222,198,25)"/><text x="77.1961%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.30%)</title><rect x="76.9461%" y="133" width="0.2994%" height="15" fill="rgb(211,99,13)"/><text x="77.1961%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.30%)</title><rect x="76.9461%" y="117" width="0.2994%" height="15" fill="rgb(232,111,31)"/><text x="77.1961%" y="127.50"></text></g><g><title>v2`regex_syntax::hir::literal::prefixes (3 samples, 0.90%)</title><rect x="76.6467%" y="197" width="0.8982%" height="15" fill="rgb(245,82,37)"/><text x="76.8967%" y="207.50"></text></g><g><title>v2`regex_syntax::hir::literal::Literals::cross_product (3 samples, 0.90%)</title><rect x="76.6467%" y="181" width="0.8982%" height="15" fill="rgb(227,149,46)"/><text x="76.8967%" y="191.50"></text></g><g><title>v2`regex_syntax::hir::literal::Literals::remove_complete (1 samples, 0.30%)</title><rect x="77.2455%" y="165" width="0.2994%" height="15" fill="rgb(218,36,50)"/><text x="77.4955%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.30%)</title><rect x="77.5449%" y="181" width="0.2994%" height="15" fill="rgb(226,80,48)"/><text x="77.7949%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (1 samples, 0.30%)</title><rect x="77.5449%" y="165" width="0.2994%" height="15" fill="rgb(238,224,15)"/><text x="77.7949%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc (1 samples, 0.30%)</title><rect x="77.8443%" y="181" width="0.2994%" height="15" fill="rgb(241,136,10)"/><text x="78.0943%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.30%)</title><rect x="78.4431%" y="165" width="0.2994%" height="15" fill="rgb(208,32,45)"/><text x="78.6931%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.30%)</title><rect x="78.4431%" y="149" width="0.2994%" height="15" fill="rgb(207,135,9)"/><text x="78.6931%" y="159.50"></text></g><g><title>v2`regex_syntax::hir::literal::Literals::cross_product (3 samples, 0.90%)</title><rect x="78.1437%" y="181" width="0.8982%" height="15" fill="rgb(206,86,44)"/><text x="78.3937%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc (1 samples, 0.30%)</title><rect x="78.7425%" y="165" width="0.2994%" height="15" fill="rgb(245,177,15)"/><text x="78.9925%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (1 samples, 0.30%)</title><rect x="78.7425%" y="149" width="0.2994%" height="15" fill="rgb(206,64,50)"/><text x="78.9925%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.30%)</title><rect x="78.7425%" y="133" width="0.2994%" height="15" fill="rgb(234,36,40)"/><text x="78.9925%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.30%)</title><rect x="78.7425%" y="117" width="0.2994%" height="15" fill="rgb(213,64,8)"/><text x="78.9925%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.30%)</title><rect x="78.7425%" y="101" width="0.2994%" height="15" fill="rgb(210,75,36)"/><text x="78.9925%" y="111.50"></text></g><g><title>v2`regex_syntax::hir::literal::suffixes (6 samples, 1.80%)</title><rect x="77.5449%" y="197" width="1.7964%" height="15" fill="rgb(229,88,21)"/><text x="77.7949%" y="207.50">v..</text></g><g><title>v2`regex_syntax::hir::literal::suffixes (1 samples, 0.30%)</title><rect x="79.0419%" y="181" width="0.2994%" height="15" fill="rgb(252,204,47)"/><text x="79.2919%" y="191.50"></text></g><g><title>v2`regex_syntax::hir::literal::Literals::cross_add (1 samples, 0.30%)</title><rect x="79.0419%" y="165" width="0.2994%" height="15" fill="rgb(208,77,27)"/><text x="79.2919%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.30%)</title><rect x="79.6407%" y="181" width="0.2994%" height="15" fill="rgb(221,76,26)"/><text x="79.8907%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.30%)</title><rect x="79.6407%" y="165" width="0.2994%" height="15" fill="rgb(225,139,18)"/><text x="79.8907%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (2 samples, 0.60%)</title><rect x="79.9401%" y="181" width="0.5988%" height="15" fill="rgb(230,137,11)"/><text x="80.1901%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (2 samples, 0.60%)</title><rect x="79.9401%" y="165" width="0.5988%" height="15" fill="rgb(212,28,1)"/><text x="80.1901%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (2 samples, 0.60%)</title><rect x="79.9401%" y="149" width="0.5988%" height="15" fill="rgb(248,164,17)"/><text x="80.1901%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (2 samples, 0.60%)</title><rect x="79.9401%" y="133" width="0.5988%" height="15" fill="rgb(222,171,42)"/><text x="80.1901%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Nehalem (1 samples, 0.30%)</title><rect x="80.5389%" y="181" width="0.2994%" height="15" fill="rgb(243,84,45)"/><text x="80.7889%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (1 samples, 0.30%)</title><rect x="81.4371%" y="165" width="0.2994%" height="15" fill="rgb(252,49,23)"/><text x="81.6871%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (1 samples, 0.30%)</title><rect x="81.4371%" y="149" width="0.2994%" height="15" fill="rgb(215,19,7)"/><text x="81.6871%" y="159.50"></text></g><g><title>v2`regex_syntax::hir::ClassUnicode::push (2 samples, 0.60%)</title><rect x="81.7365%" y="165" width="0.5988%" height="15" fill="rgb(238,81,41)"/><text x="81.9865%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc (1 samples, 0.30%)</title><rect x="82.0359%" y="149" width="0.2994%" height="15" fill="rgb(210,199,37)"/><text x="82.2859%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (1 samples, 0.30%)</title><rect x="82.0359%" y="133" width="0.2994%" height="15" fill="rgb(244,192,49)"/><text x="82.2859%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.30%)</title><rect x="82.0359%" y="117" width="0.2994%" height="15" fill="rgb(226,211,11)"/><text x="82.2859%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.30%)</title><rect x="82.0359%" y="101" width="0.2994%" height="15" fill="rgb(236,162,54)"/><text x="82.2859%" y="111.50"></text></g><g><title>v2`regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (2 samples, 0.60%)</title><rect x="82.3353%" y="165" width="0.5988%" height="15" fill="rgb(220,229,9)"/><text x="82.5853%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.30%)</title><rect x="82.9341%" y="101" width="0.2994%" height="15" fill="rgb(250,87,22)"/><text x="83.1841%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.30%)</title><rect x="83.2335%" y="101" width="0.2994%" height="15" fill="rgb(239,43,17)"/><text x="83.4835%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.30%)</title><rect x="83.2335%" y="85" width="0.2994%" height="15" fill="rgb(231,177,25)"/><text x="83.4835%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (1 samples, 0.30%)</title><rect x="83.2335%" y="69" width="0.2994%" height="15" fill="rgb(219,179,1)"/><text x="83.4835%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (1 samples, 0.30%)</title><rect x="83.5329%" y="101" width="0.2994%" height="15" fill="rgb(238,219,53)"/><text x="83.7829%" y="111.50"></text></g><g><title>v2`&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (11 samples, 3.29%)</title><rect x="80.8383%" y="181" width="3.2934%" height="15" fill="rgb(232,167,36)"/><text x="81.0883%" y="191.50">v2`..</text></g><g><title>v2`regex_syntax::hir::translate::TranslatorI::push (4 samples, 1.20%)</title><rect x="82.9341%" y="165" width="1.1976%" height="15" fill="rgb(244,19,51)"/><text x="83.1841%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (4 samples, 1.20%)</title><rect x="82.9341%" y="149" width="1.1976%" height="15" fill="rgb(224,6,22)"/><text x="83.1841%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (4 samples, 1.20%)</title><rect x="82.9341%" y="133" width="1.1976%" height="15" fill="rgb(224,145,5)"/><text x="83.1841%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (4 samples, 1.20%)</title><rect x="82.9341%" y="117" width="1.1976%" height="15" fill="rgb(234,130,49)"/><text x="83.1841%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Nehalem (1 samples, 0.30%)</title><rect x="83.8323%" y="101" width="0.2994%" height="15" fill="rgb(254,6,2)"/><text x="84.0823%" y="111.50"></text></g><g><title>v2`&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (1 samples, 0.30%)</title><rect x="84.1317%" y="165" width="0.2994%" height="15" fill="rgb(208,96,46)"/><text x="84.3817%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.30%)</title><rect x="84.4311%" y="149" width="0.2994%" height="15" fill="rgb(239,3,39)"/><text x="84.6811%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.30%)</title><rect x="84.4311%" y="133" width="0.2994%" height="15" fill="rgb(233,210,1)"/><text x="84.6811%" y="143.50"></text></g><g><title>v2`core::ptr::drop_in_place (3 samples, 0.90%)</title><rect x="84.1317%" y="181" width="0.8982%" height="15" fill="rgb(244,137,37)"/><text x="84.3817%" y="191.50"></text></g><g><title>v2`&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (2 samples, 0.60%)</title><rect x="84.4311%" y="165" width="0.5988%" height="15" fill="rgb(240,136,2)"/><text x="84.6811%" y="175.50"></text></g><g><title>v2`&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (1 samples, 0.30%)</title><rect x="84.7305%" y="149" width="0.2994%" height="15" fill="rgb(239,18,37)"/><text x="84.9805%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Nehalem (1 samples, 0.30%)</title><rect x="84.7305%" y="133" width="0.2994%" height="15" fill="rgb(218,185,22)"/><text x="84.9805%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.30%)</title><rect x="85.3293%" y="165" width="0.2994%" height="15" fill="rgb(225,218,4)"/><text x="85.5793%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1 samples, 0.30%)</title><rect x="85.3293%" y="149" width="0.2994%" height="15" fill="rgb(230,182,32)"/><text x="85.5793%" y="159.50"></text></g><g><title>v2`regex_syntax::ast::parse::NestLimiter&lt;P&gt;::check (3 samples, 0.90%)</title><rect x="85.0299%" y="181" width="0.8982%" height="15" fill="rgb(242,56,43)"/><text x="85.2799%" y="191.50"></text></g><g><title>v2`regex_syntax::ast::parse::NestLimiter&lt;P&gt;::increment_depth (1 samples, 0.30%)</title><rect x="85.6287%" y="165" width="0.2994%" height="15" fill="rgb(233,99,24)"/><text x="85.8787%" y="175.50"></text></g><g><title>v2`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (281 samples, 84.13%)</title><rect x="2.0958%" y="261" width="84.1317%" height="15" fill="rgb(234,209,42)"/><text x="2.3458%" y="271.50">v2`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut</text></g><g><title>v2`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (280 samples, 83.83%)</title><rect x="2.3952%" y="245" width="83.8323%" height="15" fill="rgb(227,7,12)"/><text x="2.6452%" y="255.50">v2`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut</text></g><g><title>v2`regex::re_unicode::Regex::new (205 samples, 61.38%)</title><rect x="24.8503%" y="229" width="61.3772%" height="15" fill="rgb(245,203,43)"/><text x="25.1003%" y="239.50">v2`regex::re_unicode::Regex::new</text></g><g><title>v2`regex::exec::ExecBuilder::build (199 samples, 59.58%)</title><rect x="26.6467%" y="213" width="59.5808%" height="15" fill="rgb(238,205,33)"/><text x="26.8967%" y="223.50">v2`regex::exec::ExecBuilder::build</text></g><g><title>v2`regex_syntax::parser::Parser::parse (23 samples, 6.89%)</title><rect x="79.3413%" y="197" width="6.8862%" height="15" fill="rgb(231,56,7)"/><text x="79.5913%" y="207.50">v2`regex_..</text></g><g><title>v2`regex_syntax::hir::interval::IntervalSet&lt;I&gt;::canonicalize (1 samples, 0.30%)</title><rect x="85.9281%" y="181" width="0.2994%" height="15" fill="rgb(244,186,29)"/><text x="86.1781%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1 samples, 0.30%)</title><rect x="86.2275%" y="213" width="0.2994%" height="15" fill="rgb(234,111,31)"/><text x="86.4775%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.30%)</title><rect x="86.5269%" y="197" width="0.2994%" height="15" fill="rgb(241,149,10)"/><text x="86.7769%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (3 samples, 0.90%)</title><rect x="86.2275%" y="229" width="0.8982%" height="15" fill="rgb(249,206,44)"/><text x="86.4775%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2 samples, 0.60%)</title><rect x="86.5269%" y="213" width="0.5988%" height="15" fill="rgb(251,153,30)"/><text x="86.7769%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1 samples, 0.30%)</title><rect x="86.8263%" y="197" width="0.2994%" height="15" fill="rgb(239,152,38)"/><text x="87.0763%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.30%)</title><rect x="87.7246%" y="197" width="0.2994%" height="15" fill="rgb(249,139,47)"/><text x="87.9746%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_small (2 samples, 0.60%)</title><rect x="87.7246%" y="213" width="0.5988%" height="15" fill="rgb(244,64,35)"/><text x="87.9746%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (1 samples, 0.30%)</title><rect x="88.0240%" y="197" width="0.2994%" height="15" fill="rgb(216,46,15)"/><text x="88.2740%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1 samples, 0.30%)</title><rect x="88.3234%" y="213" width="0.2994%" height="15" fill="rgb(250,74,19)"/><text x="88.5734%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.30%)</title><rect x="88.3234%" y="197" width="0.2994%" height="15" fill="rgb(249,42,33)"/><text x="88.5734%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_detach_region (1 samples, 0.30%)</title><rect x="88.3234%" y="181" width="0.2994%" height="15" fill="rgb(242,149,17)"/><text x="88.5734%" y="191.50"></text></g><g><title>v2`alloc::sync::Arc&lt;T&gt;::drop_slow (9 samples, 2.69%)</title><rect x="86.2275%" y="245" width="2.6946%" height="15" fill="rgb(244,29,21)"/><text x="86.4775%" y="255.50">v2..</text></g><g><title>v2`core::ptr::drop_in_place (6 samples, 1.80%)</title><rect x="87.1257%" y="229" width="1.7964%" height="15" fill="rgb(220,130,37)"/><text x="87.3757%" y="239.50">v..</text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (1 samples, 0.30%)</title><rect x="88.6228%" y="213" width="0.2994%" height="15" fill="rgb(211,67,2)"/><text x="88.8728%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2 samples, 0.60%)</title><rect x="88.9222%" y="229" width="0.5988%" height="15" fill="rgb(235,68,52)"/><text x="89.1722%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1 samples, 0.30%)</title><rect x="89.2216%" y="213" width="0.2994%" height="15" fill="rgb(246,142,3)"/><text x="89.4716%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.30%)</title><rect x="89.2216%" y="197" width="0.2994%" height="15" fill="rgb(241,25,7)"/><text x="89.4716%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.30%)</title><rect x="90.1198%" y="213" width="0.2994%" height="15" fill="rgb(242,119,39)"/><text x="90.3698%" y="223.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.30%)</title><rect x="90.1198%" y="197" width="0.2994%" height="15" fill="rgb(241,98,45)"/><text x="90.3698%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (3 samples, 0.90%)</title><rect x="90.7186%" y="181" width="0.8982%" height="15" fill="rgb(254,28,30)"/><text x="90.9686%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_detach_region (1 samples, 0.30%)</title><rect x="91.6168%" y="181" width="0.2994%" height="15" fill="rgb(241,142,54)"/><text x="91.8668%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_reattach_region (1 samples, 0.30%)</title><rect x="91.9162%" y="181" width="0.2994%" height="15" fill="rgb(222,85,15)"/><text x="92.1662%" y="191.50"></text></g><g><title>v2`core::ptr::drop_in_place (21 samples, 6.29%)</title><rect x="86.2275%" y="261" width="6.2874%" height="15" fill="rgb(210,85,47)"/><text x="86.4775%" y="271.50">v2`core:..</text></g><g><title>v2`core::ptr::drop_in_place (12 samples, 3.59%)</title><rect x="88.9222%" y="245" width="3.5928%" height="15" fill="rgb(224,206,25)"/><text x="89.1722%" y="255.50">v2`c..</text></g><g><title>v2`core::ptr::drop_in_place (10 samples, 2.99%)</title><rect x="89.5210%" y="229" width="2.9940%" height="15" fill="rgb(243,201,19)"/><text x="89.7710%" y="239.50">v2`..</text></g><g><title>libsystem_malloc.dylib`free_tiny (7 samples, 2.10%)</title><rect x="90.4192%" y="213" width="2.0958%" height="15" fill="rgb(236,59,4)"/><text x="90.6692%" y="223.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (7 samples, 2.10%)</title><rect x="90.4192%" y="197" width="2.0958%" height="15" fill="rgb(254,179,45)"/><text x="90.6692%" y="207.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_free_scan_madvise_free (1 samples, 0.30%)</title><rect x="92.2156%" y="181" width="0.2994%" height="15" fill="rgb(226,14,10)"/><text x="92.4656%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.30%)</title><rect x="92.2156%" y="165" width="0.2994%" height="15" fill="rgb(244,27,41)"/><text x="92.4656%" y="175.50"></text></g><g><title>v2`memchr::x86::sse2::memchr (2 samples, 0.60%)</title><rect x="95.5090%" y="245" width="0.5988%" height="15" fill="rgb(235,35,32)"/><text x="95.7590%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.30%)</title><rect x="97.3054%" y="149" width="0.2994%" height="15" fill="rgb(218,68,31)"/><text x="97.5554%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`realloc (2 samples, 0.60%)</title><rect x="97.3054%" y="197" width="0.5988%" height="15" fill="rgb(207,120,37)"/><text x="97.5554%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (2 samples, 0.60%)</title><rect x="97.3054%" y="181" width="0.5988%" height="15" fill="rgb(227,98,0)"/><text x="97.5554%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (2 samples, 0.60%)</title><rect x="97.3054%" y="165" width="0.5988%" height="15" fill="rgb(207,7,3)"/><text x="97.5554%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Nehalem (1 samples, 0.30%)</title><rect x="97.6048%" y="149" width="0.2994%" height="15" fill="rgb(206,98,19)"/><text x="97.8548%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc (1 samples, 0.30%)</title><rect x="97.9042%" y="181" width="0.2994%" height="15" fill="rgb(217,5,26)"/><text x="98.1542%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (1 samples, 0.30%)</title><rect x="97.9042%" y="165" width="0.2994%" height="15" fill="rgb(235,190,38)"/><text x="98.1542%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.30%)</title><rect x="97.9042%" y="149" width="0.2994%" height="15" fill="rgb(247,86,24)"/><text x="98.1542%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.30%)</title><rect x="97.9042%" y="133" width="0.2994%" height="15" fill="rgb(205,101,16)"/><text x="98.1542%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.30%)</title><rect x="97.9042%" y="117" width="0.2994%" height="15" fill="rgb(246,168,33)"/><text x="98.1542%" y="127.50"></text></g><g><title>v2`regex::dfa::Fsm::cached_state (6 samples, 1.80%)</title><rect x="96.7066%" y="229" width="1.7964%" height="15" fill="rgb(231,114,1)"/><text x="96.9566%" y="239.50">v..</text></g><g><title>v2`regex::dfa::Fsm::add_state (4 samples, 1.20%)</title><rect x="97.3054%" y="213" width="1.1976%" height="15" fill="rgb(207,184,53)"/><text x="97.5554%" y="223.50"></text></g><g><title>v2`hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (2 samples, 0.60%)</title><rect x="97.9042%" y="197" width="0.5988%" height="15" fill="rgb(224,95,51)"/><text x="98.1542%" y="207.50"></text></g><g><title>v2`&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.30%)</title><rect x="98.2036%" y="181" width="0.2994%" height="15" fill="rgb(212,188,45)"/><text x="98.4536%" y="191.50"></text></g><g><title>v2`regex::dfa::Fsm::next_state (9 samples, 2.69%)</title><rect x="96.1078%" y="245" width="2.6946%" height="15" fill="rgb(223,154,38)"/><text x="96.3578%" y="255.50">v2..</text></g><g><title>v2`regex::dfa::Fsm::follow_epsilons (1 samples, 0.30%)</title><rect x="98.5030%" y="229" width="0.2994%" height="15" fill="rgb(251,22,52)"/><text x="98.7530%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memcmp (1 samples, 0.30%)</title><rect x="99.1018%" y="229" width="0.2994%" height="15" fill="rgb(229,209,22)"/><text x="99.3518%" y="239.50"></text></g><g><title>v2`regex::re_unicode::Regex::is_match (24 samples, 7.19%)</title><rect x="92.5150%" y="261" width="7.1856%" height="15" fill="rgb(234,138,34)"/><text x="92.7650%" y="271.50">v2`regex::..</text></g><g><title>v2`regex::dfa::Fsm::prefix_at (3 samples, 0.90%)</title><rect x="98.8024%" y="245" width="0.8982%" height="15" fill="rgb(212,95,11)"/><text x="99.0524%" y="255.50"></text></g><g><title>v2`memchr::x86::sse2::memchr (1 samples, 0.30%)</title><rect x="99.4012%" y="229" width="0.2994%" height="15" fill="rgb(240,179,47)"/><text x="99.6512%" y="239.50"></text></g><g><title>all (334 samples, 100%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(240,163,11)"/><text x="0.2500%" y="367.50"></text></g><g><title>v2`0x1 (334 samples, 100.00%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(236,37,12)"/><text x="0.2500%" y="351.50">v2`0x1</text></g><g><title>libdyld.dylib`start (333 samples, 99.70%)</title><rect x="0.2994%" y="325" width="99.7006%" height="15" fill="rgb(232,164,16)"/><text x="0.5494%" y="335.50">libdyld.dylib`start</text></g><g><title>v2`main (331 samples, 99.10%)</title><rect x="0.8982%" y="309" width="99.1018%" height="15" fill="rgb(244,205,15)"/><text x="1.1482%" y="319.50">v2`main</text></g><g><title>v2`std::rt::lang_start::_{{closure}} (331 samples, 99.10%)</title><rect x="0.8982%" y="293" width="99.1018%" height="15" fill="rgb(223,117,47)"/><text x="1.1482%" y="303.50">v2`std::rt::lang_start::_{{closure}}</text></g><g><title>v2`v2::main (331 samples, 99.10%)</title><rect x="0.8982%" y="277" width="99.1018%" height="15" fill="rgb(244,107,35)"/><text x="1.1482%" y="287.50">v2`v2::main</text></g><g><title>v2`regex::re_unicode::Regex::new (1 samples, 0.30%)</title><rect x="99.7006%" y="261" width="0.2994%" height="15" fill="rgb(205,140,8)"/><text x="99.9506%" y="271.50"></text></g><g><title>v2`regex::exec::ExecBuilder::build (1 samples, 0.30%)</title><rect x="99.7006%" y="245" width="0.2994%" height="15" fill="rgb(228,84,46)"/><text x="99.9506%" y="255.50"></text></g><g><title>v2`&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (1 samples, 0.30%)</title><rect x="99.7006%" y="229" width="0.2994%" height="15" fill="rgb(254,188,9)"/><text x="99.9506%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`malloc (1 samples, 0.30%)</title><rect x="99.7006%" y="213" width="0.2994%" height="15" fill="rgb(206,112,54)"/><text x="99.9506%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (1 samples, 0.30%)</title><rect x="99.7006%" y="197" width="0.2994%" height="15" fill="rgb(216,84,49)"/><text x="99.9506%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.30%)</title><rect x="99.7006%" y="181" width="0.2994%" height="15" fill="rgb(214,194,35)"/><text x="99.9506%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.30%)</title><rect x="99.7006%" y="165" width="0.2994%" height="15" fill="rgb(249,28,3)"/><text x="99.9506%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1 samples, 0.30%)</title><rect x="99.7006%" y="149" width="0.2994%" height="15" fill="rgb(222,56,52)"/><text x="99.9506%" y="159.50"></text></g></svg></svg>