<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="406" onload="init(evt)" viewBox="0 0 1200 406" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="406" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="389.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="389.00"> </text><svg id="frames" x="10" width="1180"><g><title>v1`alloc::sync::Arc&lt;T&gt;::drop_slow (24 samples, 0.47%)</title><rect x="0.3699%" y="229" width="0.4673%" height="15" fill="rgb(227,0,7)"/><text x="0.6199%" y="239.50"></text></g><g><title>v1`core::ptr::drop_in_place (21 samples, 0.41%)</title><rect x="0.4283%" y="213" width="0.4089%" height="15" fill="rgb(217,0,24)"/><text x="0.6783%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (11 samples, 0.21%)</title><rect x="0.6231%" y="197" width="0.2142%" height="15" fill="rgb(221,193,54)"/><text x="0.8731%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (9 samples, 0.18%)</title><rect x="0.6620%" y="181" width="0.1752%" height="15" fill="rgb(248,212,6)"/><text x="0.9120%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (16 samples, 0.31%)</title><rect x="1.1098%" y="197" width="0.3115%" height="15" fill="rgb(208,68,35)"/><text x="1.3598%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (10 samples, 0.19%)</title><rect x="1.2266%" y="181" width="0.1947%" height="15" fill="rgb(232,128,0)"/><text x="1.4766%" y="191.50"></text></g><g><title>v1`core::ptr::drop_in_place (60 samples, 1.17%)</title><rect x="0.2726%" y="245" width="1.1682%" height="15" fill="rgb(207,160,47)"/><text x="0.5226%" y="255.50"></text></g><g><title>v1`core::ptr::drop_in_place (31 samples, 0.60%)</title><rect x="0.8372%" y="229" width="0.6036%" height="15" fill="rgb(228,23,34)"/><text x="1.0872%" y="239.50"></text></g><g><title>v1`core::ptr::drop_in_place (28 samples, 0.55%)</title><rect x="0.8956%" y="213" width="0.5452%" height="15" fill="rgb(218,30,26)"/><text x="1.1456%" y="223.50"></text></g><g><title>v1`regex::dfa::Fsm::cached_state (8 samples, 0.16%)</title><rect x="1.6745%" y="229" width="0.1558%" height="15" fill="rgb(220,122,19)"/><text x="1.9245%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (7 samples, 0.14%)</title><rect x="2.4533%" y="165" width="0.1363%" height="15" fill="rgb(250,228,42)"/><text x="2.7033%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (8 samples, 0.16%)</title><rect x="2.4533%" y="181" width="0.1558%" height="15" fill="rgb(240,193,28)"/><text x="2.7033%" y="191.50"></text></g><g><title>v1`regex::dfa::Fsm::add_state (16 samples, 0.31%)</title><rect x="2.4143%" y="197" width="0.3115%" height="15" fill="rgb(216,20,37)"/><text x="2.6643%" y="207.50"></text></g><g><title>v1`regex::dfa::Fsm::cached_state (36 samples, 0.70%)</title><rect x="2.1807%" y="213" width="0.7009%" height="15" fill="rgb(206,188,39)"/><text x="2.4307%" y="223.50"></text></g><g><title>v1`regex::dfa::push_inst_ptr (8 samples, 0.16%)</title><rect x="2.7259%" y="197" width="0.1558%" height="15" fill="rgb(217,207,13)"/><text x="2.9759%" y="207.50"></text></g><g><title>v1`regex::dfa::Fsm::next_state (62 samples, 1.21%)</title><rect x="1.9276%" y="229" width="1.2072%" height="15" fill="rgb(231,73,38)"/><text x="2.1776%" y="239.50"></text></g><g><title>v1`regex::dfa::Fsm::follow_epsilons (13 samples, 0.25%)</title><rect x="2.8816%" y="213" width="0.2531%" height="15" fill="rgb(225,20,46)"/><text x="3.1316%" y="223.50"></text></g><g><title>v1`regex::re_unicode::Regex::is_match (101 samples, 1.97%)</title><rect x="1.4408%" y="245" width="1.9665%" height="15" fill="rgb(210,31,41)"/><text x="1.6908%" y="255.50">v..</text></g><g><title>v1`thread_local::cached::CachedThreadLocal&lt;T&gt;::get_or_try_slow (11 samples, 0.21%)</title><rect x="3.1931%" y="229" width="0.2142%" height="15" fill="rgb(221,200,47)"/><text x="3.4431%" y="239.50"></text></g><g><title>v1`regex::exec::ProgramCacheInner::new (8 samples, 0.16%)</title><rect x="3.2516%" y="213" width="0.1558%" height="15" fill="rgb(226,26,5)"/><text x="3.5016%" y="223.50"></text></g><g><title>v1`regex::dfa::Cache::new (7 samples, 0.14%)</title><rect x="3.2710%" y="197" width="0.1363%" height="15" fill="rgb(249,33,26)"/><text x="3.5210%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc (6 samples, 0.12%)</title><rect x="3.4852%" y="229" width="0.1168%" height="15" fill="rgb(235,183,28)"/><text x="3.7352%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (6 samples, 0.12%)</title><rect x="3.4852%" y="213" width="0.1168%" height="15" fill="rgb(221,5,38)"/><text x="3.7352%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (6 samples, 0.12%)</title><rect x="3.4852%" y="197" width="0.1168%" height="15" fill="rgb(247,18,42)"/><text x="3.7352%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (6 samples, 0.12%)</title><rect x="3.4852%" y="181" width="0.1168%" height="15" fill="rgb(241,131,45)"/><text x="3.7352%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Ivybridge (6 samples, 0.12%)</title><rect x="3.6020%" y="229" width="0.1168%" height="15" fill="rgb(249,31,29)"/><text x="3.8520%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Nehalem (10 samples, 0.19%)</title><rect x="4.0888%" y="213" width="0.1947%" height="15" fill="rgb(225,111,53)"/><text x="4.3388%" y="223.50"></text></g><g><title>v1`&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (9 samples, 0.18%)</title><rect x="4.3030%" y="213" width="0.1752%" height="15" fill="rgb(238,160,17)"/><text x="4.5530%" y="223.50"></text></g><g><title>v1`&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (6 samples, 0.12%)</title><rect x="4.3614%" y="197" width="0.1168%" height="15" fill="rgb(214,148,48)"/><text x="4.6114%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (6 samples, 0.12%)</title><rect x="5.0039%" y="117" width="0.1168%" height="15" fill="rgb(232,36,49)"/><text x="5.2539%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`realloc (9 samples, 0.18%)</title><rect x="5.0039%" y="165" width="0.1752%" height="15" fill="rgb(209,103,24)"/><text x="5.2539%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (9 samples, 0.18%)</title><rect x="5.0039%" y="149" width="0.1752%" height="15" fill="rgb(229,88,8)"/><text x="5.2539%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (9 samples, 0.18%)</title><rect x="5.0039%" y="133" width="0.1752%" height="15" fill="rgb(213,181,19)"/><text x="5.2539%" y="143.50"></text></g><g><title>v1`&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.18%)</title><rect x="5.1791%" y="165" width="0.1752%" height="15" fill="rgb(254,191,54)"/><text x="5.4291%" y="175.50"></text></g><g><title>v1`regex::compile::CompileClass::c_utf8_seq (25 samples, 0.49%)</title><rect x="5.3544%" y="165" width="0.4868%" height="15" fill="rgb(241,83,37)"/><text x="5.6044%" y="175.50"></text></g><g><title>v1`regex::compile::SuffixCache::get (17 samples, 0.33%)</title><rect x="5.5101%" y="149" width="0.3310%" height="15" fill="rgb(233,36,39)"/><text x="5.7601%" y="159.50"></text></g><g><title>v1`regex::compile::Compiler::c_class (60 samples, 1.17%)</title><rect x="4.8287%" y="181" width="1.1682%" height="15" fill="rgb(226,3,54)"/><text x="5.0787%" y="191.50"></text></g><g><title>v1`regex::compile::Compiler::push_split_hole (7 samples, 0.14%)</title><rect x="5.8606%" y="165" width="0.1363%" height="15" fill="rgb(245,192,40)"/><text x="6.1106%" y="175.50"></text></g><g><title>v1`regex::compile::Compiler::c (70 samples, 1.36%)</title><rect x="4.7508%" y="197" width="1.3629%" height="15" fill="rgb(238,167,29)"/><text x="5.0008%" y="207.50"></text></g><g><title>v1`regex::compile::Compiler::c (9 samples, 0.18%)</title><rect x="6.1721%" y="181" width="0.1752%" height="15" fill="rgb(232,182,51)"/><text x="6.4221%" y="191.50"></text></g><g><title>v1`regex::compile::Compiler::c_capture (14 samples, 0.27%)</title><rect x="6.1137%" y="197" width="0.2726%" height="15" fill="rgb(231,60,39)"/><text x="6.3637%" y="207.50"></text></g><g><title>v1`regex::compile::CompileClass::c_utf8_seq (15 samples, 0.29%)</title><rect x="6.6394%" y="149" width="0.2921%" height="15" fill="rgb(208,69,12)"/><text x="6.8894%" y="159.50"></text></g><g><title>v1`regex::compile::Compiler::c_class (30 samples, 0.58%)</title><rect x="6.4642%" y="165" width="0.5841%" height="15" fill="rgb(235,93,37)"/><text x="6.7142%" y="175.50"></text></g><g><title>v1`regex::compile::Compiler::c_repeat_zero_or_more (34 samples, 0.66%)</title><rect x="6.4447%" y="181" width="0.6620%" height="15" fill="rgb(213,116,39)"/><text x="6.6947%" y="191.50"></text></g><g><title>v1`regex::compile::Compiler::c_dotstar (39 samples, 0.76%)</title><rect x="6.3863%" y="197" width="0.7593%" height="15" fill="rgb(222,207,29)"/><text x="6.6363%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (10 samples, 0.19%)</title><rect x="7.6519%" y="181" width="0.1947%" height="15" fill="rgb(206,96,30)"/><text x="7.9019%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (7 samples, 0.14%)</title><rect x="7.7103%" y="165" width="0.1363%" height="15" fill="rgb(218,138,4)"/><text x="7.9603%" y="175.50"></text></g><g><title>v1`regex::compile::Compiler::compile_finish (42 samples, 0.82%)</title><rect x="7.1456%" y="197" width="0.8178%" height="15" fill="rgb(250,191,14)"/><text x="7.3956%" y="207.50"></text></g><g><title>v1`regex::compile::Compiler::compile (178 samples, 3.47%)</title><rect x="4.5561%" y="213" width="3.4657%" height="15" fill="rgb(239,60,40)"/><text x="4.8061%" y="223.50">v1`..</text></g><g><title>libsystem_malloc.dylib`calloc (14 samples, 0.27%)</title><rect x="8.0218%" y="197" width="0.2726%" height="15" fill="rgb(206,27,48)"/><text x="8.2718%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_calloc (14 samples, 0.27%)</title><rect x="8.0218%" y="181" width="0.2726%" height="15" fill="rgb(225,35,8)"/><text x="8.2718%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (14 samples, 0.27%)</title><rect x="8.0218%" y="165" width="0.2726%" height="15" fill="rgb(250,213,24)"/><text x="8.2718%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (14 samples, 0.27%)</title><rect x="8.0218%" y="149" width="0.2726%" height="15" fill="rgb(247,123,22)"/><text x="8.2718%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Ivybridge (9 samples, 0.18%)</title><rect x="8.1192%" y="133" width="0.1752%" height="15" fill="rgb(231,138,38)"/><text x="8.3692%" y="143.50"></text></g><g><title>v1`regex::compile::Compiler::new (29 samples, 0.56%)</title><rect x="8.0218%" y="213" width="0.5646%" height="15" fill="rgb(231,145,46)"/><text x="8.2718%" y="223.50"></text></g><g><title>v1`regex::prog::Program::new (13 samples, 0.25%)</title><rect x="8.3333%" y="197" width="0.2531%" height="15" fill="rgb(251,118,11)"/><text x="8.5833%" y="207.50"></text></g><g><title>v1`regex::literal::imp::LiteralSearcher::new (10 samples, 0.19%)</title><rect x="8.6059%" y="213" width="0.1947%" height="15" fill="rgb(217,147,25)"/><text x="8.8559%" y="223.50"></text></g><g><title>v1`regex::literal::imp::Matcher::new (8 samples, 0.16%)</title><rect x="8.8006%" y="213" width="0.1558%" height="15" fill="rgb(247,81,37)"/><text x="9.0506%" y="223.50"></text></g><g><title>v1`regex_syntax::hir::literal::Literals::cross_product (15 samples, 0.29%)</title><rect x="9.0732%" y="197" width="0.2921%" height="15" fill="rgb(209,12,38)"/><text x="9.3232%" y="207.50"></text></g><g><title>v1`regex_syntax::hir::literal::prefixes (21 samples, 0.41%)</title><rect x="9.0343%" y="213" width="0.4089%" height="15" fill="rgb(227,1,9)"/><text x="9.2843%" y="223.50"></text></g><g><title>v1`regex_syntax::hir::literal::Literals::cross_product (7 samples, 0.14%)</title><rect x="9.5794%" y="197" width="0.1363%" height="15" fill="rgb(248,47,43)"/><text x="9.8294%" y="207.50"></text></g><g><title>v1`regex_syntax::hir::literal::suffixes (16 samples, 0.31%)</title><rect x="9.4431%" y="213" width="0.3115%" height="15" fill="rgb(221,10,30)"/><text x="9.6931%" y="223.50"></text></g><g><title>v1`&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (20 samples, 0.39%)</title><rect x="10.0467%" y="197" width="0.3894%" height="15" fill="rgb(210,229,1)"/><text x="10.2967%" y="207.50"></text></g><g><title>v1`core::ptr::drop_in_place (7 samples, 0.14%)</title><rect x="10.4556%" y="197" width="0.1363%" height="15" fill="rgb(222,148,37)"/><text x="10.7056%" y="207.50"></text></g><g><title>v1`&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (6 samples, 0.12%)</title><rect x="10.4751%" y="181" width="0.1168%" height="15" fill="rgb(234,67,33)"/><text x="10.7251%" y="191.50"></text></g><g><title>v1`regex_syntax::ast::parse::NestLimiter&lt;P&gt;::check (7 samples, 0.14%)</title><rect x="10.5919%" y="197" width="0.1363%" height="15" fill="rgb(247,98,35)"/><text x="10.8419%" y="207.50"></text></g><g><title>v1`core::iter::traits::iterator::Iterator::max_by_key::key::_{{closure}} (553 samples, 10.77%)</title><rect x="0.1168%" y="261" width="10.7671%" height="15" fill="rgb(247,138,52)"/><text x="0.3668%" y="271.50">v1`core::iter::t..</text></g><g><title>v1`regex::re_unicode::Regex::new (384 samples, 7.48%)</title><rect x="3.4073%" y="245" width="7.4766%" height="15" fill="rgb(213,79,30)"/><text x="3.6573%" y="255.50">v1`regex::..</text></g><g><title>v1`regex::exec::ExecBuilder::build (366 samples, 7.13%)</title><rect x="3.7578%" y="229" width="7.1262%" height="15" fill="rgb(246,177,23)"/><text x="4.0078%" y="239.50">v1`regex::..</text></g><g><title>v1`regex_syntax::parser::Parser::parse (57 samples, 1.11%)</title><rect x="9.7741%" y="213" width="1.1098%" height="15" fill="rgb(230,62,27)"/><text x="10.0241%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (6 samples, 0.12%)</title><rect x="11.0397%" y="229" width="0.1168%" height="15" fill="rgb(216,154,8)"/><text x="11.2897%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (9 samples, 0.18%)</title><rect x="11.1565%" y="229" width="0.1752%" height="15" fill="rgb(244,35,45)"/><text x="11.4065%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (11 samples, 0.21%)</title><rect x="11.5460%" y="213" width="0.2142%" height="15" fill="rgb(251,115,12)"/><text x="11.7960%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_small (10 samples, 0.19%)</title><rect x="11.7601%" y="213" width="0.1947%" height="15" fill="rgb(240,54,50)"/><text x="12.0101%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (12 samples, 0.23%)</title><rect x="11.9548%" y="213" width="0.2336%" height="15" fill="rgb(233,84,52)"/><text x="12.2048%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (9 samples, 0.18%)</title><rect x="12.0132%" y="197" width="0.1752%" height="15" fill="rgb(207,117,47)"/><text x="12.2632%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (12 samples, 0.23%)</title><rect x="12.4026%" y="197" width="0.2336%" height="15" fill="rgb(249,43,39)"/><text x="12.6526%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (36 samples, 0.70%)</title><rect x="12.6363%" y="197" width="0.7009%" height="15" fill="rgb(209,38,44)"/><text x="12.8863%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (17 samples, 0.33%)</title><rect x="13.0062%" y="181" width="0.3310%" height="15" fill="rgb(236,212,23)"/><text x="13.2562%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (36 samples, 0.70%)</title><rect x="13.6877%" y="181" width="0.7009%" height="15" fill="rgb(242,79,21)"/><text x="13.9377%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (19 samples, 0.37%)</title><rect x="14.0187%" y="165" width="0.3699%" height="15" fill="rgb(211,96,35)"/><text x="14.2687%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_small (8 samples, 0.16%)</title><rect x="14.3886%" y="181" width="0.1558%" height="15" fill="rgb(253,215,40)"/><text x="14.6386%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (126 samples, 2.45%)</title><rect x="14.5444%" y="181" width="2.4533%" height="15" fill="rgb(211,81,21)"/><text x="14.7944%" y="191.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (82 samples, 1.60%)</title><rect x="15.4011%" y="165" width="1.5966%" height="15" fill="rgb(208,190,38)"/><text x="15.6511%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (24 samples, 0.47%)</title><rect x="16.5304%" y="149" width="0.4673%" height="15" fill="rgb(235,213,38)"/><text x="16.7804%" y="159.50"></text></g><g><title>v1`alloc::sync::Arc&lt;T&gt;::drop_slow (252 samples, 4.91%)</title><rect x="12.3442%" y="213" width="4.9065%" height="15" fill="rgb(237,122,38)"/><text x="12.5942%" y="223.50">v1`all..</text></g><g><title>v1`core::ptr::drop_in_place (198 samples, 3.86%)</title><rect x="13.3956%" y="197" width="3.8551%" height="15" fill="rgb(244,218,35)"/><text x="13.6456%" y="207.50">v1`c..</text></g><g><title>libsystem_malloc.dylib`free (12 samples, 0.23%)</title><rect x="17.4065%" y="197" width="0.2336%" height="15" fill="rgb(240,68,47)"/><text x="17.6565%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (14 samples, 0.27%)</title><rect x="17.6402%" y="197" width="0.2726%" height="15" fill="rgb(210,16,53)"/><text x="17.8902%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (8 samples, 0.16%)</title><rect x="17.7570%" y="181" width="0.1558%" height="15" fill="rgb(235,124,12)"/><text x="18.0070%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (24 samples, 0.47%)</title><rect x="18.0491%" y="181" width="0.4673%" height="15" fill="rgb(224,169,11)"/><text x="18.2991%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (11 samples, 0.21%)</title><rect x="18.3022%" y="165" width="0.2142%" height="15" fill="rgb(250,166,2)"/><text x="18.5522%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_small (8 samples, 0.16%)</title><rect x="18.5164%" y="181" width="0.1558%" height="15" fill="rgb(242,216,29)"/><text x="18.7664%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (67 samples, 1.30%)</title><rect x="18.6721%" y="181" width="1.3045%" height="15" fill="rgb(230,116,27)"/><text x="18.9221%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (44 samples, 0.86%)</title><rect x="19.1199%" y="165" width="0.8567%" height="15" fill="rgb(228,99,48)"/><text x="19.3699%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (6 samples, 0.12%)</title><rect x="19.8598%" y="149" width="0.1168%" height="15" fill="rgb(253,11,6)"/><text x="20.1098%" y="159.50"></text></g><g><title>v1`core::ptr::drop_in_place (439 samples, 8.55%)</title><rect x="11.5070%" y="229" width="8.5475%" height="15" fill="rgb(247,143,39)"/><text x="11.7570%" y="239.50">v1`core::ptr..</text></g><g><title>v1`core::ptr::drop_in_place (144 samples, 2.80%)</title><rect x="17.2508%" y="213" width="2.8037%" height="15" fill="rgb(236,97,10)"/><text x="17.5008%" y="223.50">v1..</text></g><g><title>v1`core::ptr::drop_in_place (108 samples, 2.10%)</title><rect x="17.9517%" y="197" width="2.1028%" height="15" fill="rgb(233,208,19)"/><text x="18.2017%" y="207.50">v..</text></g><g><title>libsystem_malloc.dylib`malloc (12 samples, 0.23%)</title><rect x="20.5802%" y="197" width="0.2336%" height="15" fill="rgb(216,164,2)"/><text x="20.8302%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (12 samples, 0.23%)</title><rect x="20.5802%" y="181" width="0.2336%" height="15" fill="rgb(220,129,5)"/><text x="20.8302%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (12 samples, 0.23%)</title><rect x="20.5802%" y="165" width="0.2336%" height="15" fill="rgb(242,17,10)"/><text x="20.8302%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (11 samples, 0.21%)</title><rect x="20.5997%" y="149" width="0.2142%" height="15" fill="rgb(242,107,0)"/><text x="20.8497%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (11 samples, 0.21%)</title><rect x="20.9891%" y="165" width="0.2142%" height="15" fill="rgb(251,28,31)"/><text x="21.2391%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (7 samples, 0.14%)</title><rect x="21.0670%" y="149" width="0.1363%" height="15" fill="rgb(233,223,10)"/><text x="21.3170%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (7 samples, 0.14%)</title><rect x="21.0670%" y="133" width="0.1363%" height="15" fill="rgb(215,21,27)"/><text x="21.3170%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc (13 samples, 0.25%)</title><rect x="20.9696%" y="181" width="0.2531%" height="15" fill="rgb(232,23,21)"/><text x="21.2196%" y="191.50"></text></g><g><title>v1`regex::dfa::Fsm::add_state (27 samples, 0.53%)</title><rect x="20.9307%" y="197" width="0.5257%" height="15" fill="rgb(244,5,23)"/><text x="21.1807%" y="207.50"></text></g><g><title>v1`hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (9 samples, 0.18%)</title><rect x="21.2812%" y="181" width="0.1752%" height="15" fill="rgb(226,81,46)"/><text x="21.5312%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (12 samples, 0.23%)</title><rect x="21.5732%" y="165" width="0.2336%" height="15" fill="rgb(247,70,30)"/><text x="21.8232%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (9 samples, 0.18%)</title><rect x="21.6316%" y="149" width="0.1752%" height="15" fill="rgb(212,68,19)"/><text x="21.8816%" y="159.50"></text></g><g><title>v1`regex::dfa::Fsm::cached_state (78 samples, 1.52%)</title><rect x="20.4050%" y="213" width="1.5187%" height="15" fill="rgb(240,187,13)"/><text x="20.6550%" y="223.50"></text></g><g><title>v1`regex::dfa::push_inst_ptr (24 samples, 0.47%)</title><rect x="21.4564%" y="197" width="0.4673%" height="15" fill="rgb(223,113,26)"/><text x="21.7064%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`realloc (19 samples, 0.37%)</title><rect x="21.5537%" y="181" width="0.3699%" height="15" fill="rgb(206,192,2)"/><text x="21.8037%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (6 samples, 0.12%)</title><rect x="21.8069%" y="165" width="0.1168%" height="15" fill="rgb(241,108,4)"/><text x="22.0569%" y="175.50"></text></g><g><title>v1`regex::dfa::Fsm::follow_epsilons (20 samples, 0.39%)</title><rect x="21.9237%" y="213" width="0.3894%" height="15" fill="rgb(247,173,49)"/><text x="22.1737%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc (6 samples, 0.12%)</title><rect x="23.3255%" y="181" width="0.1168%" height="15" fill="rgb(224,114,35)"/><text x="23.5755%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (14 samples, 0.27%)</title><rect x="23.6760%" y="165" width="0.2726%" height="15" fill="rgb(245,159,27)"/><text x="23.9260%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (12 samples, 0.23%)</title><rect x="23.7150%" y="149" width="0.2336%" height="15" fill="rgb(245,172,44)"/><text x="23.9650%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (11 samples, 0.21%)</title><rect x="23.7344%" y="133" width="0.2142%" height="15" fill="rgb(236,23,11)"/><text x="23.9844%" y="143.50"></text></g><g><title>v1`regex::dfa::Fsm::add_state (27 samples, 0.53%)</title><rect x="23.5787%" y="181" width="0.5257%" height="15" fill="rgb(205,117,38)"/><text x="23.8287%" y="191.50"></text></g><g><title>v1`hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (6 samples, 0.12%)</title><rect x="23.9875%" y="165" width="0.1168%" height="15" fill="rgb(237,72,25)"/><text x="24.2375%" y="175.50"></text></g><g><title>v1`regex::dfa::Fsm::cached_state (71 samples, 1.38%)</title><rect x="22.8972%" y="197" width="1.3824%" height="15" fill="rgb(244,70,9)"/><text x="23.1472%" y="207.50"></text></g><g><title>v1`regex::dfa::push_inst_ptr (9 samples, 0.18%)</title><rect x="24.1044%" y="181" width="0.1752%" height="15" fill="rgb(217,125,39)"/><text x="24.3544%" y="191.50"></text></g><g><title>v1`regex::dfa::Fsm::next_state (133 samples, 2.59%)</title><rect x="22.3131%" y="213" width="2.5896%" height="15" fill="rgb(235,36,10)"/><text x="22.5631%" y="223.50">v1..</text></g><g><title>v1`regex::dfa::Fsm::follow_epsilons (32 samples, 0.62%)</title><rect x="24.2796%" y="197" width="0.6231%" height="15" fill="rgb(251,123,47)"/><text x="24.5296%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Nehalem (6 samples, 0.12%)</title><rect x="25.2336%" y="197" width="0.1168%" height="15" fill="rgb(221,13,13)"/><text x="25.4836%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc (16 samples, 0.31%)</title><rect x="25.7983%" y="165" width="0.3115%" height="15" fill="rgb(238,131,9)"/><text x="26.0483%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (14 samples, 0.27%)</title><rect x="25.8372%" y="149" width="0.2726%" height="15" fill="rgb(211,50,8)"/><text x="26.0872%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (14 samples, 0.27%)</title><rect x="25.8372%" y="133" width="0.2726%" height="15" fill="rgb(245,182,24)"/><text x="26.0872%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (14 samples, 0.27%)</title><rect x="25.8372%" y="117" width="0.2726%" height="15" fill="rgb(242,14,37)"/><text x="26.0872%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset_pattern16$VARIANT$Ivybridge (10 samples, 0.19%)</title><rect x="26.1098%" y="165" width="0.1947%" height="15" fill="rgb(246,228,12)"/><text x="26.3598%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (7 samples, 0.14%)</title><rect x="26.8692%" y="85" width="0.1363%" height="15" fill="rgb(213,55,15)"/><text x="27.1192%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`calloc (36 samples, 0.70%)</title><rect x="26.3824%" y="149" width="0.7009%" height="15" fill="rgb(209,9,3)"/><text x="26.6324%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_calloc (35 samples, 0.68%)</title><rect x="26.4019%" y="133" width="0.6815%" height="15" fill="rgb(230,59,30)"/><text x="26.6519%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (32 samples, 0.62%)</title><rect x="26.4603%" y="117" width="0.6231%" height="15" fill="rgb(209,121,21)"/><text x="26.7103%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (30 samples, 0.58%)</title><rect x="26.4992%" y="101" width="0.5841%" height="15" fill="rgb(220,109,13)"/><text x="26.7492%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (26 samples, 0.51%)</title><rect x="27.1807%" y="117" width="0.5062%" height="15" fill="rgb(232,18,1)"/><text x="27.4307%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (24 samples, 0.47%)</title><rect x="27.2196%" y="101" width="0.4673%" height="15" fill="rgb(215,41,42)"/><text x="27.4696%" y="111.50"></text></g><g><title>v1`regex::dfa::Cache::new (106 samples, 2.06%)</title><rect x="25.6425%" y="181" width="2.0639%" height="15" fill="rgb(224,123,36)"/><text x="25.8925%" y="191.50">v..</text></g><g><title>v1`regex::sparse::SparseSet::new (70 samples, 1.36%)</title><rect x="26.3435%" y="165" width="1.3629%" height="15" fill="rgb(240,125,3)"/><text x="26.5935%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc (32 samples, 0.62%)</title><rect x="27.0833%" y="149" width="0.6231%" height="15" fill="rgb(205,98,50)"/><text x="27.3333%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (31 samples, 0.60%)</title><rect x="27.1028%" y="133" width="0.6036%" height="15" fill="rgb(205,185,37)"/><text x="27.3528%" y="143.50"></text></g><g><title>v1`regex::re_unicode::Regex::is_match (389 samples, 7.57%)</title><rect x="20.1519%" y="229" width="7.5740%" height="15" fill="rgb(238,207,15)"/><text x="20.4019%" y="239.50">v1`regex::..</text></g><g><title>v1`thread_local::cached::CachedThreadLocal&lt;T&gt;::get_or_try_slow (138 samples, 2.69%)</title><rect x="25.0389%" y="213" width="2.6869%" height="15" fill="rgb(213,199,42)"/><text x="25.2889%" y="223.50">v1..</text></g><g><title>v1`regex::exec::ProgramCacheInner::new (120 samples, 2.34%)</title><rect x="25.3894%" y="197" width="2.3364%" height="15" fill="rgb(235,201,11)"/><text x="25.6394%" y="207.50">v..</text></g><g><title>libsystem_malloc.dylib`free_tiny (13 samples, 0.25%)</title><rect x="28.1347%" y="213" width="0.2531%" height="15" fill="rgb(207,46,11)"/><text x="28.3847%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (9 samples, 0.18%)</title><rect x="28.2126%" y="197" width="0.1752%" height="15" fill="rgb(241,35,35)"/><text x="28.4626%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc (31 samples, 0.60%)</title><rect x="28.3879%" y="213" width="0.6036%" height="15" fill="rgb(243,32,47)"/><text x="28.6379%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (25 samples, 0.49%)</title><rect x="28.5047%" y="197" width="0.4868%" height="15" fill="rgb(247,202,23)"/><text x="28.7547%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (23 samples, 0.45%)</title><rect x="28.5436%" y="181" width="0.4478%" height="15" fill="rgb(219,102,11)"/><text x="28.7936%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (19 samples, 0.37%)</title><rect x="28.6215%" y="165" width="0.3699%" height="15" fill="rgb(243,110,44)"/><text x="28.8715%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (6 samples, 0.12%)</title><rect x="28.8746%" y="149" width="0.1168%" height="15" fill="rgb(222,74,54)"/><text x="29.1246%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Ivybridge (21 samples, 0.41%)</title><rect x="29.0109%" y="213" width="0.4089%" height="15" fill="rgb(216,99,12)"/><text x="29.2609%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (10 samples, 0.19%)</title><rect x="31.3084%" y="149" width="0.1947%" height="15" fill="rgb(226,22,26)"/><text x="31.5584%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_calloc (14 samples, 0.27%)</title><rect x="31.2500%" y="181" width="0.2726%" height="15" fill="rgb(217,163,10)"/><text x="31.5000%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (12 samples, 0.23%)</title><rect x="31.2889%" y="165" width="0.2336%" height="15" fill="rgb(213,25,53)"/><text x="31.5389%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`calloc (16 samples, 0.31%)</title><rect x="31.2305%" y="197" width="0.3115%" height="15" fill="rgb(252,105,26)"/><text x="31.4805%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free (19 samples, 0.37%)</title><rect x="31.5421%" y="197" width="0.3699%" height="15" fill="rgb(220,39,43)"/><text x="31.7921%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (17 samples, 0.33%)</title><rect x="31.9120%" y="197" width="0.3310%" height="15" fill="rgb(229,68,48)"/><text x="32.1620%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (10 samples, 0.19%)</title><rect x="32.0483%" y="181" width="0.1947%" height="15" fill="rgb(252,8,32)"/><text x="32.2983%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc (32 samples, 0.62%)</title><rect x="32.2430%" y="197" width="0.6231%" height="15" fill="rgb(223,20,43)"/><text x="32.4930%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (23 samples, 0.45%)</title><rect x="32.4182%" y="181" width="0.4478%" height="15" fill="rgb(229,81,49)"/><text x="32.6682%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (19 samples, 0.37%)</title><rect x="32.4961%" y="165" width="0.3699%" height="15" fill="rgb(236,28,36)"/><text x="32.7461%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (19 samples, 0.37%)</title><rect x="32.4961%" y="149" width="0.3699%" height="15" fill="rgb(249,185,26)"/><text x="32.7461%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`posix_memalign (10 samples, 0.19%)</title><rect x="32.9245%" y="197" width="0.1947%" height="15" fill="rgb(249,174,33)"/><text x="33.1745%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_memalign (8 samples, 0.16%)</title><rect x="32.9634%" y="181" width="0.1558%" height="15" fill="rgb(233,201,37)"/><text x="33.2134%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (8 samples, 0.16%)</title><rect x="32.9634%" y="165" width="0.1558%" height="15" fill="rgb(221,78,26)"/><text x="33.2134%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (7 samples, 0.14%)</title><rect x="32.9829%" y="149" width="0.1363%" height="15" fill="rgb(250,127,30)"/><text x="33.2329%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Ivybridge (7 samples, 0.14%)</title><rect x="33.2165%" y="197" width="0.1363%" height="15" fill="rgb(230,49,44)"/><text x="33.4665%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Nehalem (62 samples, 1.21%)</title><rect x="33.3528%" y="197" width="1.2072%" height="15" fill="rgb(229,67,23)"/><text x="33.6028%" y="207.50"></text></g><g><title>libsystem_pthread.dylib`pthread_mutex_init (6 samples, 0.12%)</title><rect x="34.5600%" y="197" width="0.1168%" height="15" fill="rgb(249,83,47)"/><text x="34.8100%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (18 samples, 0.35%)</title><rect x="35.0467%" y="181" width="0.3505%" height="15" fill="rgb(215,43,3)"/><text x="35.2967%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (8 samples, 0.16%)</title><rect x="35.2414%" y="165" width="0.1558%" height="15" fill="rgb(238,154,13)"/><text x="35.4914%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc (7 samples, 0.14%)</title><rect x="35.3972%" y="181" width="0.1363%" height="15" fill="rgb(219,56,2)"/><text x="35.6472%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (7 samples, 0.14%)</title><rect x="35.3972%" y="165" width="0.1363%" height="15" fill="rgb(233,0,4)"/><text x="35.6472%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (6 samples, 0.12%)</title><rect x="35.4167%" y="149" width="0.1168%" height="15" fill="rgb(235,30,7)"/><text x="35.6667%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (6 samples, 0.12%)</title><rect x="35.4167%" y="133" width="0.1168%" height="15" fill="rgb(250,79,13)"/><text x="35.6667%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (7 samples, 0.14%)</title><rect x="35.7477%" y="133" width="0.1363%" height="15" fill="rgb(211,146,34)"/><text x="35.9977%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (8 samples, 0.16%)</title><rect x="35.7477%" y="149" width="0.1558%" height="15" fill="rgb(228,22,38)"/><text x="35.9977%" y="159.50"></text></g><g><title>v1`&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (21 samples, 0.41%)</title><rect x="35.5335%" y="181" width="0.4089%" height="15" fill="rgb(235,168,5)"/><text x="35.7835%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`realloc (12 samples, 0.23%)</title><rect x="35.7087%" y="165" width="0.2336%" height="15" fill="rgb(221,155,16)"/><text x="35.9587%" y="175.50"></text></g><g><title>v1`&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (71 samples, 1.38%)</title><rect x="34.7157%" y="197" width="1.3824%" height="15" fill="rgb(215,215,53)"/><text x="34.9657%" y="207.50"></text></g><g><title>v1`core::ptr::drop_in_place (6 samples, 0.12%)</title><rect x="35.9813%" y="181" width="0.1168%" height="15" fill="rgb(223,4,10)"/><text x="36.2313%" y="191.50"></text></g><g><title>v1`core::ptr::drop_in_place (9 samples, 0.18%)</title><rect x="36.2539%" y="197" width="0.1752%" height="15" fill="rgb(234,103,6)"/><text x="36.5039%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc (20 samples, 0.39%)</title><rect x="36.4486%" y="181" width="0.3894%" height="15" fill="rgb(227,97,0)"/><text x="36.6986%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (20 samples, 0.39%)</title><rect x="36.4486%" y="165" width="0.3894%" height="15" fill="rgb(234,150,53)"/><text x="36.6986%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (18 samples, 0.35%)</title><rect x="36.4875%" y="149" width="0.3505%" height="15" fill="rgb(228,201,54)"/><text x="36.7375%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (18 samples, 0.35%)</title><rect x="36.4875%" y="133" width="0.3505%" height="15" fill="rgb(222,22,37)"/><text x="36.7375%" y="143.50"></text></g><g><title>v1`regex::cache::imp::Cached&lt;T&gt;::new (22 samples, 0.43%)</title><rect x="36.4291%" y="197" width="0.4283%" height="15" fill="rgb(237,53,32)"/><text x="36.6791%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (20 samples, 0.39%)</title><rect x="37.5779%" y="149" width="0.3894%" height="15" fill="rgb(233,25,53)"/><text x="37.8279%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (19 samples, 0.37%)</title><rect x="37.5974%" y="133" width="0.3699%" height="15" fill="rgb(210,40,34)"/><text x="37.8474%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (28 samples, 0.55%)</title><rect x="37.4416%" y="165" width="0.5452%" height="15" fill="rgb(241,220,44)"/><text x="37.6916%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc (34 samples, 0.66%)</title><rect x="37.3442%" y="181" width="0.6620%" height="15" fill="rgb(235,28,35)"/><text x="37.5942%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Nehalem (22 samples, 0.43%)</title><rect x="38.0257%" y="181" width="0.4283%" height="15" fill="rgb(210,56,17)"/><text x="38.2757%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (11 samples, 0.21%)</title><rect x="39.3692%" y="133" width="0.2142%" height="15" fill="rgb(224,130,29)"/><text x="39.6192%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (9 samples, 0.18%)</title><rect x="39.4081%" y="117" width="0.1752%" height="15" fill="rgb(235,212,8)"/><text x="39.6581%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`realloc (14 samples, 0.27%)</title><rect x="39.3692%" y="149" width="0.2726%" height="15" fill="rgb(223,33,50)"/><text x="39.6192%" y="159.50"></text></g><g><title>v1`regex::compile::Compiler::c (37 samples, 0.72%)</title><rect x="38.9408%" y="165" width="0.7204%" height="15" fill="rgb(219,149,13)"/><text x="39.1908%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc (17 samples, 0.33%)</title><rect x="40.8879%" y="149" width="0.3310%" height="15" fill="rgb(250,156,29)"/><text x="41.1379%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (17 samples, 0.33%)</title><rect x="40.8879%" y="133" width="0.3310%" height="15" fill="rgb(216,193,19)"/><text x="41.1379%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (14 samples, 0.27%)</title><rect x="40.9463%" y="117" width="0.2726%" height="15" fill="rgb(216,135,14)"/><text x="41.1963%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (13 samples, 0.25%)</title><rect x="40.9657%" y="101" width="0.2531%" height="15" fill="rgb(241,47,5)"/><text x="41.2157%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (31 samples, 0.60%)</title><rect x="41.6277%" y="101" width="0.6036%" height="15" fill="rgb(233,42,35)"/><text x="41.8777%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (15 samples, 0.29%)</title><rect x="41.9393%" y="85" width="0.2921%" height="15" fill="rgb(231,13,6)"/><text x="42.1893%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (27 samples, 0.53%)</title><rect x="42.3287%" y="101" width="0.5257%" height="15" fill="rgb(207,181,40)"/><text x="42.5787%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (26 samples, 0.51%)</title><rect x="42.3481%" y="85" width="0.5062%" height="15" fill="rgb(254,173,49)"/><text x="42.5981%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (7 samples, 0.14%)</title><rect x="42.7181%" y="69" width="0.1363%" height="15" fill="rgb(221,1,38)"/><text x="42.9681%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (15 samples, 0.29%)</title><rect x="42.9322%" y="101" width="0.2921%" height="15" fill="rgb(206,124,46)"/><text x="43.1822%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (27 samples, 0.53%)</title><rect x="43.2243%" y="101" width="0.5257%" height="15" fill="rgb(249,21,11)"/><text x="43.4743%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (7 samples, 0.14%)</title><rect x="43.6137%" y="85" width="0.1363%" height="15" fill="rgb(222,201,40)"/><text x="43.8637%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (127 samples, 2.47%)</title><rect x="41.4330%" y="117" width="2.4727%" height="15" fill="rgb(235,61,29)"/><text x="41.6830%" y="127.50">li..</text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (139 samples, 2.71%)</title><rect x="41.2967%" y="133" width="2.7064%" height="15" fill="rgb(219,207,3)"/><text x="41.5467%" y="143.50">li..</text></g><g><title>libsystem_malloc.dylib`realloc (153 samples, 2.98%)</title><rect x="41.2188%" y="149" width="2.9790%" height="15" fill="rgb(222,56,46)"/><text x="41.4688%" y="159.50">lib..</text></g><g><title>libsystem_malloc.dylib`tiny_size (6 samples, 0.12%)</title><rect x="44.0810%" y="133" width="0.1168%" height="15" fill="rgb(239,76,54)"/><text x="44.3310%" y="143.50"></text></g><g><title>v1`&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (45 samples, 0.88%)</title><rect x="44.2173%" y="149" width="0.8762%" height="15" fill="rgb(231,124,27)"/><text x="44.4673%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (6 samples, 0.12%)</title><rect x="46.3590%" y="85" width="0.1168%" height="15" fill="rgb(249,195,6)"/><text x="46.6090%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (15 samples, 0.29%)</title><rect x="46.3201%" y="101" width="0.2921%" height="15" fill="rgb(237,174,47)"/><text x="46.5701%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (6 samples, 0.12%)</title><rect x="46.4953%" y="85" width="0.1168%" height="15" fill="rgb(206,201,31)"/><text x="46.7453%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (19 samples, 0.37%)</title><rect x="46.2617%" y="117" width="0.3699%" height="15" fill="rgb(231,57,52)"/><text x="46.5117%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`realloc (26 samples, 0.51%)</title><rect x="46.1643%" y="133" width="0.5062%" height="15" fill="rgb(248,177,22)"/><text x="46.4143%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`small_try_realloc_in_place (6 samples, 0.12%)</title><rect x="47.5467%" y="69" width="0.1168%" height="15" fill="rgb(215,211,37)"/><text x="47.7967%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (26 samples, 0.51%)</title><rect x="47.3326%" y="101" width="0.5062%" height="15" fill="rgb(241,128,51)"/><text x="47.5826%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (24 samples, 0.47%)</title><rect x="47.3715%" y="85" width="0.4673%" height="15" fill="rgb(227,165,31)"/><text x="47.6215%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`realloc (33 samples, 0.64%)</title><rect x="47.2547%" y="117" width="0.6425%" height="15" fill="rgb(228,167,24)"/><text x="47.5047%" y="127.50"></text></g><g><title>v1`regex::compile::Compiler::push_compiled (62 samples, 1.21%)</title><rect x="46.7095%" y="133" width="1.2072%" height="15" fill="rgb(228,143,12)"/><text x="46.9595%" y="143.50"></text></g><g><title>v1`regex::compile::CompileClass::c_utf8_seq (252 samples, 4.91%)</title><rect x="45.0935%" y="149" width="4.9065%" height="15" fill="rgb(249,149,8)"/><text x="45.3435%" y="159.50">v1`reg..</text></g><g><title>v1`regex::compile::SuffixCache::get (107 samples, 2.08%)</title><rect x="47.9167%" y="133" width="2.0833%" height="15" fill="rgb(243,35,44)"/><text x="48.1667%" y="143.50">v..</text></g><g><title>v1`regex::compile::Compiler::fill (16 samples, 0.31%)</title><rect x="50.0000%" y="149" width="0.3115%" height="15" fill="rgb(246,89,9)"/><text x="50.2500%" y="159.50"></text></g><g><title>v1`regex::compile::Compiler::fill_split (20 samples, 0.39%)</title><rect x="50.3115%" y="149" width="0.3894%" height="15" fill="rgb(233,213,13)"/><text x="50.5615%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (8 samples, 0.16%)</title><rect x="51.1877%" y="85" width="0.1558%" height="15" fill="rgb(233,141,41)"/><text x="51.4377%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (6 samples, 0.12%)</title><rect x="51.2266%" y="69" width="0.1168%" height="15" fill="rgb(239,167,4)"/><text x="51.4766%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (7 samples, 0.14%)</title><rect x="51.3824%" y="85" width="0.1363%" height="15" fill="rgb(209,217,16)"/><text x="51.6324%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (34 samples, 0.66%)</title><rect x="51.1098%" y="101" width="0.6620%" height="15" fill="rgb(219,88,35)"/><text x="51.3598%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Nehalem (6 samples, 0.12%)</title><rect x="51.6550%" y="85" width="0.1168%" height="15" fill="rgb(220,193,23)"/><text x="51.9050%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (40 samples, 0.78%)</title><rect x="51.0125%" y="117" width="0.7788%" height="15" fill="rgb(230,90,52)"/><text x="51.2625%" y="127.50"></text></g><g><title>v1`regex::compile::Compiler::push_split_hole (55 samples, 1.07%)</title><rect x="50.7593%" y="149" width="1.0709%" height="15" fill="rgb(252,106,19)"/><text x="51.0093%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`realloc (43 samples, 0.84%)</title><rect x="50.9930%" y="133" width="0.8372%" height="15" fill="rgb(206,74,20)"/><text x="51.2430%" y="143.50"></text></g><g><title>v1`regex::compile::Compiler::c_class (627 samples, 12.21%)</title><rect x="39.6612%" y="165" width="12.2079%" height="15" fill="rgb(230,138,44)"/><text x="39.9112%" y="175.50">v1`regex::compile:..</text></g><g><title>libsystem_malloc.dylib`free_tiny (13 samples, 0.25%)</title><rect x="52.2586%" y="149" width="0.2531%" height="15" fill="rgb(235,182,43)"/><text x="52.5086%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (8 samples, 0.16%)</title><rect x="52.3559%" y="133" width="0.1558%" height="15" fill="rgb(242,16,51)"/><text x="52.6059%" y="143.50"></text></g><g><title>v1`regex::compile::Compiler::fill (42 samples, 0.82%)</title><rect x="51.9470%" y="165" width="0.8178%" height="15" fill="rgb(248,9,4)"/><text x="52.1970%" y="175.50"></text></g><g><title>v1`regex::compile::Compiler::fill (13 samples, 0.25%)</title><rect x="52.5117%" y="149" width="0.2531%" height="15" fill="rgb(210,31,22)"/><text x="52.7617%" y="159.50"></text></g><g><title>v1`regex::compile::Compiler::c (734 samples, 14.29%)</title><rect x="38.4930%" y="181" width="14.2913%" height="15" fill="rgb(239,54,39)"/><text x="38.7430%" y="191.50">v1`regex::compile::Com..</text></g><g><title>libsystem_malloc.dylib`malloc (11 samples, 0.21%)</title><rect x="52.8816%" y="165" width="0.2142%" height="15" fill="rgb(230,99,41)"/><text x="53.1316%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (11 samples, 0.21%)</title><rect x="52.8816%" y="149" width="0.2142%" height="15" fill="rgb(253,106,12)"/><text x="53.1316%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (10 samples, 0.19%)</title><rect x="52.9011%" y="133" width="0.1947%" height="15" fill="rgb(213,46,41)"/><text x="53.1511%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (10 samples, 0.19%)</title><rect x="52.9011%" y="117" width="0.1947%" height="15" fill="rgb(215,133,35)"/><text x="53.1511%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (6 samples, 0.12%)</title><rect x="53.4657%" y="85" width="0.1168%" height="15" fill="rgb(213,28,5)"/><text x="53.7157%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (6 samples, 0.12%)</title><rect x="53.4657%" y="69" width="0.1168%" height="15" fill="rgb(215,77,49)"/><text x="53.7157%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (7 samples, 0.14%)</title><rect x="53.6215%" y="85" width="0.1363%" height="15" fill="rgb(248,100,22)"/><text x="53.8715%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (21 samples, 0.41%)</title><rect x="53.3879%" y="101" width="0.4089%" height="15" fill="rgb(208,67,9)"/><text x="53.6379%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (24 samples, 0.47%)</title><rect x="53.3684%" y="117" width="0.4673%" height="15" fill="rgb(219,133,21)"/><text x="53.6184%" y="127.50"></text></g><g><title>v1`regex::compile::Compiler::c (31 samples, 0.60%)</title><rect x="53.3100%" y="149" width="0.6036%" height="15" fill="rgb(246,46,29)"/><text x="53.5600%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`realloc (29 samples, 0.56%)</title><rect x="53.3489%" y="133" width="0.5646%" height="15" fill="rgb(246,185,52)"/><text x="53.5989%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc (9 samples, 0.18%)</title><rect x="54.0109%" y="133" width="0.1752%" height="15" fill="rgb(252,136,11)"/><text x="54.2609%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (9 samples, 0.18%)</title><rect x="54.0109%" y="117" width="0.1752%" height="15" fill="rgb(219,138,53)"/><text x="54.2609%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (6 samples, 0.12%)</title><rect x="54.0693%" y="101" width="0.1168%" height="15" fill="rgb(211,51,23)"/><text x="54.3193%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (6 samples, 0.12%)</title><rect x="54.0693%" y="85" width="0.1168%" height="15" fill="rgb(247,221,28)"/><text x="54.3193%" y="95.50"></text></g><g><title>v1`regex::compile::Compiler::c_class (30 samples, 0.58%)</title><rect x="53.9136%" y="149" width="0.5841%" height="15" fill="rgb(251,222,45)"/><text x="54.1636%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`realloc (16 samples, 0.31%)</title><rect x="54.1861%" y="133" width="0.3115%" height="15" fill="rgb(217,162,53)"/><text x="54.4361%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (15 samples, 0.29%)</title><rect x="54.2056%" y="117" width="0.2921%" height="15" fill="rgb(229,93,14)"/><text x="54.4556%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (12 samples, 0.23%)</title><rect x="54.2640%" y="101" width="0.2336%" height="15" fill="rgb(209,67,49)"/><text x="54.5140%" y="111.50"></text></g><g><title>v1`regex::compile::Compiler::c (88 samples, 1.71%)</title><rect x="53.1347%" y="165" width="1.7134%" height="15" fill="rgb(213,87,29)"/><text x="53.3847%" y="175.50"></text></g><g><title>v1`regex::compile::Compiler::fill (15 samples, 0.29%)</title><rect x="54.5561%" y="149" width="0.2921%" height="15" fill="rgb(205,151,52)"/><text x="54.8061%" y="159.50"></text></g><g><title>v1`regex::compile::Compiler::c_capture (109 samples, 2.12%)</title><rect x="52.7843%" y="181" width="2.1223%" height="15" fill="rgb(253,215,39)"/><text x="53.0343%" y="191.50">v..</text></g><g><title>libsystem_malloc.dylib`malloc (6 samples, 0.12%)</title><rect x="55.1207%" y="165" width="0.1168%" height="15" fill="rgb(221,220,41)"/><text x="55.3707%" y="175.50"></text></g><g><title>v1`core::ptr::drop_in_place (10 samples, 0.19%)</title><rect x="55.2570%" y="165" width="0.1947%" height="15" fill="rgb(218,133,21)"/><text x="55.5070%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (9 samples, 0.18%)</title><rect x="56.4447%" y="85" width="0.1752%" height="15" fill="rgb(221,193,43)"/><text x="56.6947%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (14 samples, 0.27%)</title><rect x="56.6199%" y="85" width="0.2726%" height="15" fill="rgb(240,128,52)"/><text x="56.8699%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (13 samples, 0.25%)</title><rect x="56.6394%" y="69" width="0.2531%" height="15" fill="rgb(253,114,12)"/><text x="56.8894%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (10 samples, 0.19%)</title><rect x="56.9704%" y="85" width="0.1947%" height="15" fill="rgb(215,223,47)"/><text x="57.2204%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (41 samples, 0.80%)</title><rect x="56.4447%" y="101" width="0.7983%" height="15" fill="rgb(248,225,23)"/><text x="56.6947%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (44 samples, 0.86%)</title><rect x="56.4058%" y="117" width="0.8567%" height="15" fill="rgb(250,108,0)"/><text x="56.6558%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`realloc (56 samples, 1.09%)</title><rect x="56.2111%" y="133" width="1.0903%" height="15" fill="rgb(228,208,7)"/><text x="56.4611%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (10 samples, 0.19%)</title><rect x="58.0802%" y="101" width="0.1947%" height="15" fill="rgb(244,45,10)"/><text x="58.3302%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (7 samples, 0.14%)</title><rect x="58.1386%" y="85" width="0.1363%" height="15" fill="rgb(207,125,25)"/><text x="58.3886%" y="95.50"></text></g><g><title>v1`&lt;regex_syntax::utf8::Utf8Sequences as core::iter::traits::iterator::Iterator&gt;::next (50 samples, 0.97%)</title><rect x="57.3209%" y="133" width="0.9735%" height="15" fill="rgb(210,195,18)"/><text x="57.5709%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (13 samples, 0.25%)</title><rect x="58.0413%" y="117" width="0.2531%" height="15" fill="rgb(249,80,12)"/><text x="58.2913%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`realloc (18 samples, 0.35%)</title><rect x="58.6449%" y="117" width="0.3505%" height="15" fill="rgb(221,65,9)"/><text x="58.8949%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (17 samples, 0.33%)</title><rect x="58.6643%" y="101" width="0.3310%" height="15" fill="rgb(235,49,36)"/><text x="58.9143%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (12 samples, 0.23%)</title><rect x="58.7617%" y="85" width="0.2336%" height="15" fill="rgb(225,32,20)"/><text x="59.0117%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (6 samples, 0.12%)</title><rect x="58.8785%" y="69" width="0.1168%" height="15" fill="rgb(215,141,46)"/><text x="59.1285%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (8 samples, 0.16%)</title><rect x="59.4237%" y="53" width="0.1558%" height="15" fill="rgb(250,160,47)"/><text x="59.6737%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (10 samples, 0.19%)</title><rect x="59.6184%" y="37" width="0.1947%" height="15" fill="rgb(216,222,40)"/><text x="59.8684%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (14 samples, 0.27%)</title><rect x="59.5989%" y="53" width="0.2726%" height="15" fill="rgb(234,217,39)"/><text x="59.8489%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (36 samples, 0.70%)</title><rect x="59.3458%" y="69" width="0.7009%" height="15" fill="rgb(207,178,40)"/><text x="59.5958%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (41 samples, 0.80%)</title><rect x="59.3263%" y="85" width="0.7983%" height="15" fill="rgb(221,136,13)"/><text x="59.5763%" y="95.50"></text></g><g><title>v1`regex::compile::Compiler::push_compiled (59 samples, 1.15%)</title><rect x="58.9953%" y="117" width="1.1488%" height="15" fill="rgb(249,199,10)"/><text x="59.2453%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`realloc (43 samples, 0.84%)</title><rect x="59.3069%" y="101" width="0.8372%" height="15" fill="rgb(249,222,13)"/><text x="59.5569%" y="111.50"></text></g><g><title>v1`regex::compile::CompileClass::c_utf8_seq (140 samples, 2.73%)</title><rect x="58.3333%" y="133" width="2.7259%" height="15" fill="rgb(244,185,38)"/><text x="58.5833%" y="143.50">v1..</text></g><g><title>v1`regex::compile::SuffixCache::get (47 samples, 0.92%)</title><rect x="60.1441%" y="117" width="0.9151%" height="15" fill="rgb(236,202,9)"/><text x="60.3941%" y="127.50"></text></g><g><title>v1`regex::compile::Compiler::fill_split (7 samples, 0.14%)</title><rect x="61.1176%" y="133" width="0.1363%" height="15" fill="rgb(250,229,37)"/><text x="61.3676%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (6 samples, 0.12%)</title><rect x="61.5460%" y="69" width="0.1168%" height="15" fill="rgb(206,174,23)"/><text x="61.7960%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (6 samples, 0.12%)</title><rect x="61.5460%" y="53" width="0.1168%" height="15" fill="rgb(211,33,43)"/><text x="61.7960%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (14 samples, 0.27%)</title><rect x="61.4097%" y="101" width="0.2726%" height="15" fill="rgb(245,58,50)"/><text x="61.6597%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (10 samples, 0.19%)</title><rect x="61.4875%" y="85" width="0.1947%" height="15" fill="rgb(244,68,36)"/><text x="61.7375%" y="95.50"></text></g><g><title>v1`regex::compile::Compiler::push_split_hole (22 samples, 0.43%)</title><rect x="61.2928%" y="133" width="0.4283%" height="15" fill="rgb(232,229,15)"/><text x="61.5428%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`realloc (18 samples, 0.35%)</title><rect x="61.3707%" y="117" width="0.3505%" height="15" fill="rgb(254,30,23)"/><text x="61.6207%" y="127.50"></text></g><g><title>v1`regex::compile::Compiler::c_class (313 samples, 6.09%)</title><rect x="55.7048%" y="149" width="6.0942%" height="15" fill="rgb(235,160,14)"/><text x="55.9548%" y="159.50">v1`regex..</text></g><g><title>libsystem_malloc.dylib`free (7 samples, 0.14%)</title><rect x="61.9159%" y="133" width="0.1363%" height="15" fill="rgb(212,155,44)"/><text x="62.1659%" y="143.50"></text></g><g><title>v1`regex::compile::Compiler::fill (18 samples, 0.35%)</title><rect x="61.7991%" y="149" width="0.3505%" height="15" fill="rgb(226,2,50)"/><text x="62.0491%" y="159.50"></text></g><g><title>v1`regex::compile::Compiler::c_repeat_zero_or_more (352 samples, 6.85%)</title><rect x="55.4712%" y="165" width="6.8536%" height="15" fill="rgb(234,177,6)"/><text x="55.7212%" y="175.50">v1`regex:..</text></g><g><title>v1`regex::compile::Compiler::push_split_hole (7 samples, 0.14%)</title><rect x="62.1885%" y="149" width="0.1363%" height="15" fill="rgb(217,24,9)"/><text x="62.4385%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc (6 samples, 0.12%)</title><rect x="62.2079%" y="133" width="0.1168%" height="15" fill="rgb(220,13,46)"/><text x="62.4579%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (6 samples, 0.12%)</title><rect x="62.2079%" y="117" width="0.1168%" height="15" fill="rgb(239,221,27)"/><text x="62.4579%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (6 samples, 0.12%)</title><rect x="62.2079%" y="101" width="0.1168%" height="15" fill="rgb(222,198,25)"/><text x="62.4579%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (6 samples, 0.12%)</title><rect x="62.2079%" y="85" width="0.1168%" height="15" fill="rgb(211,99,13)"/><text x="62.4579%" y="95.50"></text></g><g><title>v1`regex::compile::Compiler::c_dotstar (385 samples, 7.50%)</title><rect x="54.9844%" y="181" width="7.4961%" height="15" fill="rgb(232,111,31)"/><text x="55.2344%" y="191.50">v1`regex::..</text></g><g><title>v1`regex_syntax::hir::ClassUnicode::push (8 samples, 0.16%)</title><rect x="62.3248%" y="165" width="0.1558%" height="15" fill="rgb(245,82,37)"/><text x="62.5748%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc (8 samples, 0.16%)</title><rect x="62.3248%" y="149" width="0.1558%" height="15" fill="rgb(227,149,46)"/><text x="62.5748%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (7 samples, 0.14%)</title><rect x="62.3442%" y="133" width="0.1363%" height="15" fill="rgb(218,36,50)"/><text x="62.5942%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (7 samples, 0.14%)</title><rect x="62.3442%" y="117" width="0.1363%" height="15" fill="rgb(226,80,48)"/><text x="62.5942%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (6 samples, 0.12%)</title><rect x="62.3637%" y="101" width="0.1168%" height="15" fill="rgb(238,224,15)"/><text x="62.6137%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (10 samples, 0.19%)</title><rect x="66.1410%" y="117" width="0.1947%" height="15" fill="rgb(241,136,10)"/><text x="66.3910%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`calloc (15 samples, 0.29%)</title><rect x="66.0826%" y="165" width="0.2921%" height="15" fill="rgb(208,32,45)"/><text x="66.3326%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_calloc (14 samples, 0.27%)</title><rect x="66.1020%" y="149" width="0.2726%" height="15" fill="rgb(207,135,9)"/><text x="66.3520%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (13 samples, 0.25%)</title><rect x="66.1215%" y="133" width="0.2531%" height="15" fill="rgb(206,86,44)"/><text x="66.3715%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (8 samples, 0.16%)</title><rect x="66.3746%" y="165" width="0.1558%" height="15" fill="rgb(245,177,15)"/><text x="66.6246%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (27 samples, 0.53%)</title><rect x="66.5304%" y="165" width="0.5257%" height="15" fill="rgb(206,64,50)"/><text x="66.7804%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (11 samples, 0.21%)</title><rect x="66.8419%" y="149" width="0.2142%" height="15" fill="rgb(234,36,40)"/><text x="67.0919%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_small (29 samples, 0.56%)</title><rect x="67.0561%" y="165" width="0.5646%" height="15" fill="rgb(213,64,8)"/><text x="67.3061%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (58 samples, 1.13%)</title><rect x="67.6207%" y="165" width="1.1293%" height="15" fill="rgb(210,75,36)"/><text x="67.8707%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (35 samples, 0.68%)</title><rect x="68.0685%" y="149" width="0.6815%" height="15" fill="rgb(229,88,21)"/><text x="68.3185%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (18 samples, 0.35%)</title><rect x="68.9058%" y="117" width="0.3505%" height="15" fill="rgb(252,204,47)"/><text x="69.1558%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (10 samples, 0.19%)</title><rect x="69.0615%" y="101" width="0.1947%" height="15" fill="rgb(208,77,27)"/><text x="69.3115%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc (43 samples, 0.84%)</title><rect x="68.7500%" y="165" width="0.8372%" height="15" fill="rgb(221,76,26)"/><text x="69.0000%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (41 samples, 0.80%)</title><rect x="68.7889%" y="149" width="0.7983%" height="15" fill="rgb(225,139,18)"/><text x="69.0389%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (38 samples, 0.74%)</title><rect x="68.8474%" y="133" width="0.7399%" height="15" fill="rgb(230,137,11)"/><text x="69.0974%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (17 samples, 0.33%)</title><rect x="69.2562%" y="117" width="0.3310%" height="15" fill="rgb(212,28,1)"/><text x="69.5062%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (11 samples, 0.21%)</title><rect x="69.5872%" y="165" width="0.2142%" height="15" fill="rgb(248,164,17)"/><text x="69.8372%" y="175.50"></text></g><g><title>v1`regex::compile::Compiler::compile_finish (390 samples, 7.59%)</title><rect x="62.5389%" y="181" width="7.5935%" height="15" fill="rgb(222,171,42)"/><text x="62.7889%" y="191.50">v1`regex::..</text></g><g><title>v1`regex::compile::Compiler::fill (15 samples, 0.29%)</title><rect x="70.1324%" y="181" width="0.2921%" height="15" fill="rgb(243,84,45)"/><text x="70.3824%" y="191.50"></text></g><g><title>v1`regex::compile::Compiler::compile (1,727 samples, 33.63%)</title><rect x="36.9159%" y="197" width="33.6254%" height="15" fill="rgb(252,49,23)"/><text x="37.1659%" y="207.50">v1`regex::compile::Compiler::compile</text></g><g><title>v1`regex::compile::Compiler::push_compiled (6 samples, 0.12%)</title><rect x="70.4245%" y="181" width="0.1168%" height="15" fill="rgb(215,19,7)"/><text x="70.6745%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (8 samples, 0.16%)</title><rect x="71.0280%" y="117" width="0.1558%" height="15" fill="rgb(238,81,41)"/><text x="71.2780%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (14 samples, 0.27%)</title><rect x="71.2033%" y="117" width="0.2726%" height="15" fill="rgb(210,199,37)"/><text x="71.4533%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_remove_ptr_no_clear (10 samples, 0.19%)</title><rect x="71.2812%" y="101" width="0.1947%" height="15" fill="rgb(244,192,49)"/><text x="71.5312%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`calloc (105 samples, 2.04%)</title><rect x="70.7165%" y="181" width="2.0444%" height="15" fill="rgb(226,211,11)"/><text x="70.9665%" y="191.50">l..</text></g><g><title>libsystem_malloc.dylib`malloc_zone_calloc (104 samples, 2.02%)</title><rect x="70.7360%" y="165" width="2.0249%" height="15" fill="rgb(236,162,54)"/><text x="70.9860%" y="175.50">l..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (101 samples, 1.97%)</title><rect x="70.7944%" y="149" width="1.9665%" height="15" fill="rgb(220,229,9)"/><text x="71.0444%" y="159.50">l..</text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (101 samples, 1.97%)</title><rect x="70.7944%" y="133" width="1.9665%" height="15" fill="rgb(250,87,22)"/><text x="71.0444%" y="143.50">l..</text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Ivybridge (66 samples, 1.29%)</title><rect x="71.4759%" y="117" width="1.2850%" height="15" fill="rgb(239,43,17)"/><text x="71.7259%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (14 samples, 0.27%)</title><rect x="72.9556%" y="133" width="0.2726%" height="15" fill="rgb(231,177,25)"/><text x="73.2056%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc (36 samples, 0.70%)</title><rect x="72.7609%" y="181" width="0.7009%" height="15" fill="rgb(219,179,1)"/><text x="73.0109%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (34 samples, 0.66%)</title><rect x="72.7998%" y="165" width="0.6620%" height="15" fill="rgb(238,219,53)"/><text x="73.0498%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (28 samples, 0.55%)</title><rect x="72.9167%" y="149" width="0.5452%" height="15" fill="rgb(232,167,36)"/><text x="73.1667%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (12 samples, 0.23%)</title><rect x="73.2282%" y="133" width="0.2336%" height="15" fill="rgb(244,19,51)"/><text x="73.4782%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Nehalem (7 samples, 0.14%)</title><rect x="73.4813%" y="181" width="0.1363%" height="15" fill="rgb(224,6,22)"/><text x="73.7313%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (22 samples, 0.43%)</title><rect x="73.9291%" y="117" width="0.4283%" height="15" fill="rgb(224,145,5)"/><text x="74.1791%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Ivybridge (6 samples, 0.12%)</title><rect x="74.2407%" y="101" width="0.1168%" height="15" fill="rgb(234,130,49)"/><text x="74.4907%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_calloc (29 samples, 0.56%)</title><rect x="73.8512%" y="149" width="0.5646%" height="15" fill="rgb(254,6,2)"/><text x="74.1012%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (25 samples, 0.49%)</title><rect x="73.9291%" y="133" width="0.4868%" height="15" fill="rgb(208,96,46)"/><text x="74.1791%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`calloc (31 samples, 0.60%)</title><rect x="73.8318%" y="165" width="0.6036%" height="15" fill="rgb(239,3,39)"/><text x="74.0818%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc (21 samples, 0.41%)</title><rect x="74.4354%" y="165" width="0.4089%" height="15" fill="rgb(233,210,1)"/><text x="74.6854%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (20 samples, 0.39%)</title><rect x="74.4548%" y="149" width="0.3894%" height="15" fill="rgb(244,137,37)"/><text x="74.7048%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (19 samples, 0.37%)</title><rect x="74.4743%" y="133" width="0.3699%" height="15" fill="rgb(240,136,2)"/><text x="74.7243%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (17 samples, 0.33%)</title><rect x="74.5132%" y="117" width="0.3310%" height="15" fill="rgb(239,18,37)"/><text x="74.7632%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Nehalem (6 samples, 0.12%)</title><rect x="74.8832%" y="165" width="0.1168%" height="15" fill="rgb(218,185,22)"/><text x="75.1332%" y="175.50"></text></g><g><title>v1`regex::compile::Compiler::new (247 samples, 4.81%)</title><rect x="70.5413%" y="197" width="4.8092%" height="15" fill="rgb(225,218,4)"/><text x="70.7913%" y="207.50">v1`reg..</text></g><g><title>v1`regex::prog::Program::new (86 samples, 1.67%)</title><rect x="73.6760%" y="181" width="1.6745%" height="15" fill="rgb(230,182,32)"/><text x="73.9260%" y="191.50"></text></g><g><title>v1`regex::literal::imp::LiteralSearcher::new (16 samples, 0.31%)</title><rect x="75.0389%" y="165" width="0.3115%" height="15" fill="rgb(242,56,43)"/><text x="75.2889%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc (10 samples, 0.19%)</title><rect x="75.5062%" y="181" width="0.1947%" height="15" fill="rgb(233,99,24)"/><text x="75.7562%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (10 samples, 0.19%)</title><rect x="75.5062%" y="165" width="0.1947%" height="15" fill="rgb(234,209,42)"/><text x="75.7562%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (7 samples, 0.14%)</title><rect x="75.5646%" y="149" width="0.1363%" height="15" fill="rgb(227,7,12)"/><text x="75.8146%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (7 samples, 0.14%)</title><rect x="75.5646%" y="133" width="0.1363%" height="15" fill="rgb(245,203,43)"/><text x="75.8146%" y="143.50"></text></g><g><title>v1`regex::literal::imp::LiteralSearcher::new (32 samples, 0.62%)</title><rect x="75.3505%" y="197" width="0.6231%" height="15" fill="rgb(238,205,33)"/><text x="75.6005%" y="207.50"></text></g><g><title>v1`regex::literal::imp::FreqyPacked::new (12 samples, 0.23%)</title><rect x="75.7399%" y="181" width="0.2336%" height="15" fill="rgb(231,56,7)"/><text x="75.9899%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (12 samples, 0.23%)</title><rect x="76.0709%" y="181" width="0.2336%" height="15" fill="rgb(244,186,29)"/><text x="76.3209%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc (6 samples, 0.12%)</title><rect x="76.3045%" y="181" width="0.1168%" height="15" fill="rgb(234,111,31)"/><text x="76.5545%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (6 samples, 0.12%)</title><rect x="76.3045%" y="165" width="0.1168%" height="15" fill="rgb(241,149,10)"/><text x="76.5545%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (6 samples, 0.12%)</title><rect x="76.3045%" y="149" width="0.1168%" height="15" fill="rgb(249,206,44)"/><text x="76.5545%" y="159.50"></text></g><g><title>v1`regex::literal::imp::Matcher::new (29 samples, 0.56%)</title><rect x="75.9735%" y="197" width="0.5646%" height="15" fill="rgb(251,153,30)"/><text x="76.2235%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc (7 samples, 0.14%)</title><rect x="77.0055%" y="181" width="0.1363%" height="15" fill="rgb(239,152,38)"/><text x="77.2555%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (6 samples, 0.12%)</title><rect x="77.0249%" y="165" width="0.1168%" height="15" fill="rgb(249,139,47)"/><text x="77.2749%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (6 samples, 0.12%)</title><rect x="77.0249%" y="149" width="0.1168%" height="15" fill="rgb(244,64,35)"/><text x="77.2749%" y="159.50"></text></g><g><title>v1`regex_syntax::hir::literal::Literals::union (24 samples, 0.47%)</title><rect x="76.6939%" y="197" width="0.4673%" height="15" fill="rgb(216,46,15)"/><text x="76.9439%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (9 samples, 0.18%)</title><rect x="77.3559%" y="181" width="0.1752%" height="15" fill="rgb(250,74,19)"/><text x="77.6059%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (6 samples, 0.12%)</title><rect x="77.9011%" y="165" width="0.1168%" height="15" fill="rgb(249,42,33)"/><text x="78.1511%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (10 samples, 0.19%)</title><rect x="78.0179%" y="165" width="0.1947%" height="15" fill="rgb(242,149,17)"/><text x="78.2679%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc (17 samples, 0.33%)</title><rect x="78.2126%" y="165" width="0.3310%" height="15" fill="rgb(244,29,21)"/><text x="78.4626%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (17 samples, 0.33%)</title><rect x="78.2126%" y="149" width="0.3310%" height="15" fill="rgb(220,130,37)"/><text x="78.4626%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (15 samples, 0.29%)</title><rect x="78.2516%" y="133" width="0.2921%" height="15" fill="rgb(211,67,2)"/><text x="78.5016%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (13 samples, 0.25%)</title><rect x="78.2905%" y="117" width="0.2531%" height="15" fill="rgb(235,68,52)"/><text x="78.5405%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (6 samples, 0.12%)</title><rect x="78.4268%" y="101" width="0.1168%" height="15" fill="rgb(246,142,3)"/><text x="78.6768%" y="111.50"></text></g><g><title>v1`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::SpecExtend&lt;T,I&gt;&gt;::spec_extend (6 samples, 0.12%)</title><rect x="78.6799%" y="165" width="0.1168%" height="15" fill="rgb(241,25,7)"/><text x="78.9299%" y="175.50"></text></g><g><title>v1`regex_syntax::hir::literal::Literals::cross_product (69 samples, 1.34%)</title><rect x="77.6869%" y="181" width="1.3435%" height="15" fill="rgb(242,119,39)"/><text x="77.9369%" y="191.50"></text></g><g><title>v1`regex_syntax::hir::literal::Literals::remove_complete (12 samples, 0.23%)</title><rect x="78.7967%" y="165" width="0.2336%" height="15" fill="rgb(241,98,45)"/><text x="79.0467%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc (6 samples, 0.12%)</title><rect x="78.9136%" y="149" width="0.1168%" height="15" fill="rgb(254,28,30)"/><text x="79.1636%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (6 samples, 0.12%)</title><rect x="78.9136%" y="133" width="0.1168%" height="15" fill="rgb(241,142,54)"/><text x="79.1636%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (6 samples, 0.12%)</title><rect x="78.9136%" y="117" width="0.1168%" height="15" fill="rgb(222,85,15)"/><text x="79.1636%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (6 samples, 0.12%)</title><rect x="78.9136%" y="101" width="0.1168%" height="15" fill="rgb(210,85,47)"/><text x="79.1636%" y="111.50"></text></g><g><title>v1`regex_syntax::hir::literal::prefixes (118 samples, 2.30%)</title><rect x="77.1612%" y="197" width="2.2975%" height="15" fill="rgb(224,206,25)"/><text x="77.4112%" y="207.50">v..</text></g><g><title>v1`regex_syntax::hir::literal::prefixes (22 samples, 0.43%)</title><rect x="79.0304%" y="181" width="0.4283%" height="15" fill="rgb(243,201,19)"/><text x="79.2804%" y="191.50"></text></g><g><title>v1`regex_syntax::hir::literal::Literals::cross_add (16 samples, 0.31%)</title><rect x="79.1472%" y="165" width="0.3115%" height="15" fill="rgb(236,59,4)"/><text x="79.3972%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc (14 samples, 0.27%)</title><rect x="79.1861%" y="149" width="0.2726%" height="15" fill="rgb(254,179,45)"/><text x="79.4361%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (13 samples, 0.25%)</title><rect x="79.2056%" y="133" width="0.2531%" height="15" fill="rgb(226,14,10)"/><text x="79.4556%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (12 samples, 0.23%)</title><rect x="79.2251%" y="117" width="0.2336%" height="15" fill="rgb(244,27,41)"/><text x="79.4751%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (11 samples, 0.21%)</title><rect x="79.2445%" y="101" width="0.2142%" height="15" fill="rgb(235,35,32)"/><text x="79.4945%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free (7 samples, 0.14%)</title><rect x="79.5366%" y="181" width="0.1363%" height="15" fill="rgb(218,68,31)"/><text x="79.7866%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (17 samples, 0.33%)</title><rect x="79.6729%" y="181" width="0.3310%" height="15" fill="rgb(207,120,37)"/><text x="79.9229%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (8 samples, 0.16%)</title><rect x="79.8481%" y="165" width="0.1558%" height="15" fill="rgb(227,98,0)"/><text x="80.0981%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (6 samples, 0.12%)</title><rect x="80.4128%" y="165" width="0.1168%" height="15" fill="rgb(207,7,3)"/><text x="80.6628%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (7 samples, 0.14%)</title><rect x="80.5296%" y="165" width="0.1363%" height="15" fill="rgb(206,98,19)"/><text x="80.7796%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc (23 samples, 0.45%)</title><rect x="80.6659%" y="165" width="0.4478%" height="15" fill="rgb(217,5,26)"/><text x="80.9159%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (22 samples, 0.43%)</title><rect x="80.6854%" y="149" width="0.4283%" height="15" fill="rgb(235,190,38)"/><text x="80.9354%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (20 samples, 0.39%)</title><rect x="80.7243%" y="133" width="0.3894%" height="15" fill="rgb(247,86,24)"/><text x="80.9743%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (18 samples, 0.35%)</title><rect x="80.7632%" y="117" width="0.3505%" height="15" fill="rgb(205,101,16)"/><text x="81.0132%" y="127.50"></text></g><g><title>v1`regex_syntax::hir::literal::Literals::cross_product (69 samples, 1.34%)</title><rect x="80.1597%" y="181" width="1.3435%" height="15" fill="rgb(246,168,33)"/><text x="80.4097%" y="191.50"></text></g><g><title>v1`regex_syntax::hir::literal::Literals::remove_complete (12 samples, 0.23%)</title><rect x="81.2695%" y="165" width="0.2336%" height="15" fill="rgb(231,114,1)"/><text x="81.5195%" y="175.50"></text></g><g><title>v1`regex_syntax::hir::literal::suffixes (127 samples, 2.47%)</title><rect x="79.4587%" y="197" width="2.4727%" height="15" fill="rgb(207,184,53)"/><text x="79.7087%" y="207.50">v1..</text></g><g><title>v1`regex_syntax::hir::literal::suffixes (22 samples, 0.43%)</title><rect x="81.5031%" y="181" width="0.4283%" height="15" fill="rgb(224,95,51)"/><text x="81.7531%" y="191.50"></text></g><g><title>v1`regex_syntax::hir::literal::Literals::cross_add (14 samples, 0.27%)</title><rect x="81.6589%" y="165" width="0.2726%" height="15" fill="rgb(212,188,45)"/><text x="81.9089%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc (13 samples, 0.25%)</title><rect x="81.6783%" y="149" width="0.2531%" height="15" fill="rgb(223,154,38)"/><text x="81.9283%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (12 samples, 0.23%)</title><rect x="81.6978%" y="133" width="0.2336%" height="15" fill="rgb(251,22,52)"/><text x="81.9478%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (7 samples, 0.14%)</title><rect x="81.7952%" y="117" width="0.1363%" height="15" fill="rgb(229,209,22)"/><text x="82.0452%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (6 samples, 0.12%)</title><rect x="81.8146%" y="101" width="0.1168%" height="15" fill="rgb(234,138,34)"/><text x="82.0646%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`malloc (11 samples, 0.21%)</title><rect x="83.1581%" y="181" width="0.2142%" height="15" fill="rgb(212,95,11)"/><text x="83.4081%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (7 samples, 0.14%)</title><rect x="83.6838%" y="133" width="0.1363%" height="15" fill="rgb(240,179,47)"/><text x="83.9338%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (16 samples, 0.31%)</title><rect x="83.8201%" y="133" width="0.3115%" height="15" fill="rgb(240,163,11)"/><text x="84.0701%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (36 samples, 0.70%)</title><rect x="83.4502%" y="149" width="0.7009%" height="15" fill="rgb(236,37,12)"/><text x="83.7002%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (40 samples, 0.78%)</title><rect x="83.4112%" y="165" width="0.7788%" height="15" fill="rgb(232,164,16)"/><text x="83.6612%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (48 samples, 0.93%)</title><rect x="83.3723%" y="181" width="0.9346%" height="15" fill="rgb(244,205,15)"/><text x="83.6223%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Nehalem (6 samples, 0.12%)</title><rect x="84.3069%" y="181" width="0.1168%" height="15" fill="rgb(223,117,47)"/><text x="84.5569%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (6 samples, 0.12%)</title><rect x="85.2804%" y="117" width="0.1168%" height="15" fill="rgb(244,107,35)"/><text x="85.5304%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (16 samples, 0.31%)</title><rect x="85.2804%" y="133" width="0.3115%" height="15" fill="rgb(205,140,8)"/><text x="85.5304%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (20 samples, 0.39%)</title><rect x="85.2220%" y="149" width="0.3894%" height="15" fill="rgb(228,84,46)"/><text x="85.4720%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`realloc (30 samples, 0.58%)</title><rect x="85.1246%" y="165" width="0.5841%" height="15" fill="rgb(254,188,9)"/><text x="85.3746%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc (6 samples, 0.12%)</title><rect x="85.7671%" y="149" width="0.1168%" height="15" fill="rgb(206,112,54)"/><text x="86.0171%" y="159.50"></text></g><g><title>v1`regex_syntax::hir::ClassUnicode::push (11 samples, 0.21%)</title><rect x="85.7282%" y="165" width="0.2142%" height="15" fill="rgb(216,84,49)"/><text x="85.9782%" y="175.50"></text></g><g><title>v1`regex_syntax::hir::Hir::concat (9 samples, 0.18%)</title><rect x="85.9424%" y="165" width="0.1752%" height="15" fill="rgb(214,194,35)"/><text x="86.1924%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_try_realloc_in_place (12 samples, 0.23%)</title><rect x="86.5460%" y="101" width="0.2336%" height="15" fill="rgb(249,28,3)"/><text x="86.7960%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (24 samples, 0.47%)</title><rect x="86.3512%" y="117" width="0.4673%" height="15" fill="rgb(222,56,52)"/><text x="86.6012%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (30 samples, 0.58%)</title><rect x="86.2734%" y="133" width="0.5841%" height="15" fill="rgb(245,217,50)"/><text x="86.5234%" y="143.50"></text></g><g><title>v1`&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (130 samples, 2.53%)</title><rect x="84.4237%" y="181" width="2.5312%" height="15" fill="rgb(213,201,24)"/><text x="84.6737%" y="191.50">v1..</text></g><g><title>v1`regex_syntax::hir::translate::TranslatorI::push (42 samples, 0.82%)</title><rect x="86.1371%" y="165" width="0.8178%" height="15" fill="rgb(248,116,28)"/><text x="86.3871%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (35 samples, 0.68%)</title><rect x="86.2734%" y="149" width="0.6815%" height="15" fill="rgb(219,72,43)"/><text x="86.5234%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (9 samples, 0.18%)</title><rect x="87.3832%" y="149" width="0.1752%" height="15" fill="rgb(209,138,14)"/><text x="87.6332%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (6 samples, 0.12%)</title><rect x="87.4416%" y="133" width="0.1168%" height="15" fill="rgb(222,18,33)"/><text x="87.6916%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Nehalem (10 samples, 0.19%)</title><rect x="87.7336%" y="149" width="0.1947%" height="15" fill="rgb(213,199,7)"/><text x="87.9836%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`realloc (17 samples, 0.33%)</title><rect x="87.9868%" y="133" width="0.3310%" height="15" fill="rgb(250,110,10)"/><text x="88.2368%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (15 samples, 0.29%)</title><rect x="88.0257%" y="117" width="0.2921%" height="15" fill="rgb(248,123,6)"/><text x="88.2757%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (15 samples, 0.29%)</title><rect x="88.0257%" y="101" width="0.2921%" height="15" fill="rgb(206,91,31)"/><text x="88.2757%" y="111.50"></text></g><g><title>v1`&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::Extend&lt;T&gt;&gt;::extend (26 samples, 0.51%)</title><rect x="87.9283%" y="149" width="0.5062%" height="15" fill="rgb(211,154,13)"/><text x="88.1783%" y="159.50"></text></g><g><title>v1`&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (72 samples, 1.40%)</title><rect x="87.1690%" y="165" width="1.4019%" height="15" fill="rgb(225,148,7)"/><text x="87.4190%" y="175.50"></text></g><g><title>v1`core::ptr::drop_in_place (6 samples, 0.12%)</title><rect x="88.4540%" y="149" width="0.1168%" height="15" fill="rgb(220,160,43)"/><text x="88.7040%" y="159.50"></text></g><g><title>v1`core::ptr::drop_in_place (82 samples, 1.60%)</title><rect x="86.9938%" y="181" width="1.5966%" height="15" fill="rgb(213,52,39)"/><text x="87.2438%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc (8 samples, 0.16%)</title><rect x="89.2523%" y="165" width="0.1558%" height="15" fill="rgb(243,137,7)"/><text x="89.5023%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (8 samples, 0.16%)</title><rect x="89.2523%" y="149" width="0.1558%" height="15" fill="rgb(230,79,13)"/><text x="89.5023%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (7 samples, 0.14%)</title><rect x="89.2718%" y="133" width="0.1363%" height="15" fill="rgb(247,105,23)"/><text x="89.5218%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (7 samples, 0.14%)</title><rect x="89.2718%" y="117" width="0.1363%" height="15" fill="rgb(223,179,41)"/><text x="89.5218%" y="127.50"></text></g><g><title>v1`regex_syntax::ast::parse::NestLimiter&lt;P&gt;::check (46 samples, 0.90%)</title><rect x="88.5903%" y="181" width="0.8956%" height="15" fill="rgb(218,9,34)"/><text x="88.8403%" y="191.50"></text></g><g><title>v1`regex_syntax::ast::parse::ParserI&lt;P&gt;::char (7 samples, 0.14%)</title><rect x="89.6223%" y="181" width="0.1363%" height="15" fill="rgb(222,106,8)"/><text x="89.8723%" y="191.50"></text></g><g><title>v1`regex_syntax::ast::parse::ParserI&lt;P&gt;::pop_group_end (8 samples, 0.16%)</title><rect x="89.7586%" y="181" width="0.1558%" height="15" fill="rgb(211,220,0)"/><text x="90.0086%" y="191.50"></text></g><g><title>v1`regex::exec::ExecBuilder::build (3,100 samples, 60.36%)</title><rect x="29.7118%" y="213" width="60.3583%" height="15" fill="rgb(229,52,16)"/><text x="29.9618%" y="223.50">v1`regex::exec::ExecBuilder::build</text></g><g><title>v1`regex_syntax::parser::Parser::parse (417 samples, 8.12%)</title><rect x="81.9509%" y="197" width="8.1192%" height="15" fill="rgb(212,155,18)"/><text x="82.2009%" y="207.50">v1`regex_sy..</text></g><g><title>v1`regex_syntax::hir::translate::TranslatorI::push (7 samples, 0.14%)</title><rect x="89.9338%" y="181" width="0.1363%" height="15" fill="rgb(242,21,14)"/><text x="90.1838%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`malloc (6 samples, 0.12%)</title><rect x="89.9533%" y="165" width="0.1168%" height="15" fill="rgb(222,19,48)"/><text x="90.2033%" y="175.50"></text></g><g><title>v1`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (4,078 samples, 79.40%)</title><rect x="10.8840%" y="245" width="79.4003%" height="15" fill="rgb(232,45,27)"/><text x="11.1340%" y="255.50">v1`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut</text></g><g><title>v1`regex::re_unicode::Regex::new (3,213 samples, 62.56%)</title><rect x="27.7259%" y="229" width="62.5584%" height="15" fill="rgb(249,103,42)"/><text x="27.9759%" y="239.50">v1`regex::re_unicode::Regex::new</text></g><g><title>v1`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (4,080 samples, 79.44%)</title><rect x="10.8840%" y="261" width="79.4393%" height="15" fill="rgb(246,81,33)"/><text x="11.1340%" y="271.50">v1`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut</text></g><g><title>libsystem_malloc.dylib`free_tiny (9 samples, 0.18%)</title><rect x="90.7321%" y="213" width="0.1752%" height="15" fill="rgb(252,33,42)"/><text x="90.9821%" y="223.50"></text></g><g><title>v1`alloc::sync::Arc&lt;T&gt;::drop_slow (26 samples, 0.51%)</title><rect x="90.4206%" y="245" width="0.5062%" height="15" fill="rgb(209,212,41)"/><text x="90.6706%" y="255.50"></text></g><g><title>v1`core::ptr::drop_in_place (19 samples, 0.37%)</title><rect x="90.5569%" y="229" width="0.3699%" height="15" fill="rgb(207,154,6)"/><text x="90.8069%" y="239.50"></text></g><g><title>v1`core::ptr::drop_in_place (43 samples, 0.84%)</title><rect x="90.3232%" y="261" width="0.8372%" height="15" fill="rgb(223,64,47)"/><text x="90.5732%" y="271.50"></text></g><g><title>v1`core::ptr::drop_in_place (12 samples, 0.23%)</title><rect x="90.9268%" y="245" width="0.2336%" height="15" fill="rgb(211,161,38)"/><text x="91.1768%" y="255.50"></text></g><g><title>v1`core::ptr::drop_in_place (7 samples, 0.14%)</title><rect x="91.0241%" y="229" width="0.1363%" height="15" fill="rgb(219,138,40)"/><text x="91.2741%" y="239.50"></text></g><g><title>v1`regex::dfa::Fsm::cached_state (10 samples, 0.19%)</title><rect x="91.3162%" y="245" width="0.1947%" height="15" fill="rgb(241,228,46)"/><text x="91.5662%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`realloc (6 samples, 0.12%)</title><rect x="92.2508%" y="197" width="0.1168%" height="15" fill="rgb(223,209,38)"/><text x="92.5008%" y="207.50"></text></g><g><title>v1`regex::dfa::Fsm::add_state (18 samples, 0.35%)</title><rect x="92.1729%" y="213" width="0.3505%" height="15" fill="rgb(236,164,45)"/><text x="92.4229%" y="223.50"></text></g><g><title>v1`hashbrown::raw::RawTable&lt;T&gt;::reserve_rehash (6 samples, 0.12%)</title><rect x="92.4065%" y="197" width="0.1168%" height="15" fill="rgb(231,15,5)"/><text x="92.6565%" y="207.50"></text></g><g><title>v1`regex::dfa::Fsm::cached_state (35 samples, 0.68%)</title><rect x="91.9198%" y="229" width="0.6815%" height="15" fill="rgb(252,35,15)"/><text x="92.1698%" y="239.50"></text></g><g><title>v1`regex::dfa::Fsm::next_state (59 samples, 1.15%)</title><rect x="91.6083%" y="245" width="1.1488%" height="15" fill="rgb(248,181,18)"/><text x="91.8583%" y="255.50"></text></g><g><title>v1`regex::dfa::Fsm::follow_epsilons (8 samples, 0.16%)</title><rect x="92.6012%" y="229" width="0.1558%" height="15" fill="rgb(233,39,42)"/><text x="92.8512%" y="239.50"></text></g><g><title>v1`regex::re_unicode::Regex::is_match (98 samples, 1.91%)</title><rect x="91.1604%" y="261" width="1.9081%" height="15" fill="rgb(238,110,33)"/><text x="91.4104%" y="271.50">v..</text></g><g><title>v1`thread_local::cached::CachedThreadLocal&lt;T&gt;::get_or_try_slow (16 samples, 0.31%)</title><rect x="92.7570%" y="245" width="0.3115%" height="15" fill="rgb(233,195,10)"/><text x="93.0070%" y="255.50"></text></g><g><title>v1`regex::exec::ProgramCacheInner::new (13 samples, 0.25%)</title><rect x="92.8154%" y="229" width="0.2531%" height="15" fill="rgb(254,105,3)"/><text x="93.0654%" y="239.50"></text></g><g><title>v1`regex::dfa::Cache::new (13 samples, 0.25%)</title><rect x="92.8154%" y="213" width="0.2531%" height="15" fill="rgb(221,225,9)"/><text x="93.0654%" y="223.50"></text></g><g><title>v1`regex::sparse::SparseSet::new (7 samples, 0.14%)</title><rect x="92.9322%" y="197" width="0.1363%" height="15" fill="rgb(224,227,45)"/><text x="93.1822%" y="207.50"></text></g><g><title>v1`&lt;regex_syntax::hir::Hir as core::ops::drop::Drop&gt;::drop (6 samples, 0.12%)</title><rect x="93.7889%" y="229" width="0.1168%" height="15" fill="rgb(229,198,43)"/><text x="94.0389%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (7 samples, 0.14%)</title><rect x="94.4120%" y="133" width="0.1363%" height="15" fill="rgb(206,209,35)"/><text x="94.6620%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (15 samples, 0.29%)</title><rect x="94.4120%" y="149" width="0.2921%" height="15" fill="rgb(245,195,53)"/><text x="94.6620%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (16 samples, 0.31%)</title><rect x="94.4120%" y="165" width="0.3115%" height="15" fill="rgb(240,92,26)"/><text x="94.6620%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`realloc (20 samples, 0.39%)</title><rect x="94.3731%" y="181" width="0.3894%" height="15" fill="rgb(207,40,23)"/><text x="94.6231%" y="191.50"></text></g><g><title>v1`regex::compile::Compiler::push_compiled (12 samples, 0.23%)</title><rect x="94.9961%" y="165" width="0.2336%" height="15" fill="rgb(223,111,35)"/><text x="95.2461%" y="175.50"></text></g><g><title>v1`regex::compile::CompileClass::c_utf8_seq (33 samples, 0.64%)</title><rect x="94.8209%" y="181" width="0.6425%" height="15" fill="rgb(229,147,28)"/><text x="95.0709%" y="191.50"></text></g><g><title>v1`regex::compile::SuffixCache::get (12 samples, 0.23%)</title><rect x="95.2298%" y="165" width="0.2336%" height="15" fill="rgb(211,29,28)"/><text x="95.4798%" y="175.50"></text></g><g><title>v1`regex::compile::Compiler::c_class (69 samples, 1.34%)</title><rect x="94.2562%" y="197" width="1.3435%" height="15" fill="rgb(228,72,33)"/><text x="94.5062%" y="207.50"></text></g><g><title>v1`regex::compile::Compiler::c (78 samples, 1.52%)</title><rect x="94.1589%" y="213" width="1.5187%" height="15" fill="rgb(205,214,31)"/><text x="94.4089%" y="223.50"></text></g><g><title>v1`regex::compile::Compiler::c_capture (13 samples, 0.25%)</title><rect x="95.6776%" y="213" width="0.2531%" height="15" fill="rgb(224,111,15)"/><text x="95.9276%" y="223.50"></text></g><g><title>v1`regex::compile::Compiler::c (12 samples, 0.23%)</title><rect x="95.6970%" y="197" width="0.2336%" height="15" fill="rgb(253,21,26)"/><text x="95.9470%" y="207.50"></text></g><g><title>v1`regex::compile::Compiler::push_compiled (6 samples, 0.12%)</title><rect x="96.4174%" y="149" width="0.1168%" height="15" fill="rgb(245,139,43)"/><text x="96.6674%" y="159.50"></text></g><g><title>v1`regex::compile::CompileClass::c_utf8_seq (19 samples, 0.37%)</title><rect x="96.2617%" y="165" width="0.3699%" height="15" fill="rgb(252,170,7)"/><text x="96.5117%" y="175.50"></text></g><g><title>v1`regex::compile::Compiler::c_class (31 samples, 0.60%)</title><rect x="96.0864%" y="181" width="0.6036%" height="15" fill="rgb(231,118,14)"/><text x="96.3364%" y="191.50"></text></g><g><title>v1`regex::compile::Compiler::c_repeat_zero_or_more (35 samples, 0.68%)</title><rect x="96.0864%" y="197" width="0.6815%" height="15" fill="rgb(238,83,0)"/><text x="96.3364%" y="207.50"></text></g><g><title>v1`regex::compile::Compiler::c_dotstar (44 samples, 0.86%)</title><rect x="95.9307%" y="213" width="0.8567%" height="15" fill="rgb(221,39,39)"/><text x="96.1807%" y="223.50"></text></g><g><title>v1`regex::compile::Compiler::compile_finish (35 samples, 0.68%)</title><rect x="96.7874%" y="213" width="0.6815%" height="15" fill="rgb(222,119,46)"/><text x="97.0374%" y="223.50"></text></g><g><title>v1`regex::compile::Compiler::compile (181 samples, 3.52%)</title><rect x="93.9836%" y="229" width="3.5241%" height="15" fill="rgb(222,165,49)"/><text x="94.2336%" y="239.50">v1`..</text></g><g><title>libsystem_malloc.dylib`calloc (8 samples, 0.16%)</title><rect x="97.5273%" y="213" width="0.1558%" height="15" fill="rgb(219,113,52)"/><text x="97.7773%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_calloc (7 samples, 0.14%)</title><rect x="97.5467%" y="197" width="0.1363%" height="15" fill="rgb(214,7,15)"/><text x="97.7967%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (6 samples, 0.12%)</title><rect x="97.5662%" y="181" width="0.1168%" height="15" fill="rgb(235,32,4)"/><text x="97.8162%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (6 samples, 0.12%)</title><rect x="97.5662%" y="165" width="0.1168%" height="15" fill="rgb(238,90,54)"/><text x="97.8162%" y="175.50"></text></g><g><title>v1`regex::compile::Compiler::new (21 samples, 0.41%)</title><rect x="97.5078%" y="229" width="0.4089%" height="15" fill="rgb(213,208,19)"/><text x="97.7578%" y="239.50"></text></g><g><title>v1`regex::prog::Program::new (8 samples, 0.16%)</title><rect x="97.7609%" y="213" width="0.1558%" height="15" fill="rgb(233,156,4)"/><text x="98.0109%" y="223.50"></text></g><g><title>v1`regex::literal::imp::LiteralSearcher::new (11 samples, 0.21%)</title><rect x="97.9167%" y="229" width="0.2142%" height="15" fill="rgb(207,194,5)"/><text x="98.1667%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`malloc (7 samples, 0.14%)</title><rect x="98.4034%" y="197" width="0.1363%" height="15" fill="rgb(206,111,30)"/><text x="98.6534%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_malloc (7 samples, 0.14%)</title><rect x="98.4034%" y="181" width="0.1363%" height="15" fill="rgb(243,70,54)"/><text x="98.6534%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (7 samples, 0.14%)</title><rect x="98.4034%" y="165" width="0.1363%" height="15" fill="rgb(242,28,8)"/><text x="98.6534%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (7 samples, 0.14%)</title><rect x="98.4034%" y="149" width="0.1363%" height="15" fill="rgb(219,106,18)"/><text x="98.6534%" y="159.50"></text></g><g><title>v1`regex_syntax::hir::literal::Literals::cross_product (12 samples, 0.23%)</title><rect x="98.3645%" y="213" width="0.2336%" height="15" fill="rgb(244,222,10)"/><text x="98.6145%" y="223.50"></text></g><g><title>v1`regex_syntax::hir::literal::prefixes (20 samples, 0.39%)</title><rect x="98.2282%" y="229" width="0.3894%" height="15" fill="rgb(236,179,52)"/><text x="98.4782%" y="239.50"></text></g><g><title>v1`regex_syntax::hir::literal::Literals::cross_product (12 samples, 0.23%)</title><rect x="98.6760%" y="213" width="0.2336%" height="15" fill="rgb(213,23,39)"/><text x="98.9260%" y="223.50"></text></g><g><title>v1`regex_syntax::hir::literal::suffixes (20 samples, 0.39%)</title><rect x="98.6176%" y="229" width="0.3894%" height="15" fill="rgb(238,48,10)"/><text x="98.8676%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`realloc (6 samples, 0.12%)</title><rect x="99.1822%" y="213" width="0.1168%" height="15" fill="rgb(251,196,23)"/><text x="99.4322%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (6 samples, 0.12%)</title><rect x="99.1822%" y="197" width="0.1168%" height="15" fill="rgb(250,152,24)"/><text x="99.4322%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (6 samples, 0.12%)</title><rect x="99.1822%" y="181" width="0.1168%" height="15" fill="rgb(209,150,17)"/><text x="99.4322%" y="191.50"></text></g><g><title>v1`&lt;regex_syntax::hir::translate::TranslatorI as regex_syntax::ast::visitor::Visitor&gt;::visit_post (18 samples, 0.35%)</title><rect x="99.3185%" y="213" width="0.3505%" height="15" fill="rgb(234,202,34)"/><text x="99.5685%" y="223.50"></text></g><g><title>v1`regex_syntax::hir::translate::TranslatorI::push (6 samples, 0.12%)</title><rect x="99.5522%" y="197" width="0.1168%" height="15" fill="rgb(253,148,53)"/><text x="99.8022%" y="207.50"></text></g><g><title>v1`core::ptr::drop_in_place (10 samples, 0.19%)</title><rect x="99.6690%" y="213" width="0.1947%" height="15" fill="rgb(218,129,16)"/><text x="99.9190%" y="223.50"></text></g><g><title>v1`&lt;regex_syntax::ast::Ast as core::ops::drop::Drop&gt;::drop (10 samples, 0.19%)</title><rect x="99.6690%" y="197" width="0.1947%" height="15" fill="rgb(216,85,19)"/><text x="99.9190%" y="207.50"></text></g><g><title>all (5,136 samples, 100%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(235,228,7)"/><text x="0.2500%" y="367.50"></text></g><g><title>v1`0x1 (5,136 samples, 100.00%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(245,175,0)"/><text x="0.2500%" y="351.50">v1`0x1</text></g><g><title>libdyld.dylib`start (5,136 samples, 100.00%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(208,168,36)"/><text x="0.2500%" y="335.50">libdyld.dylib`start</text></g><g><title>v1`main (5,136 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(246,171,24)"/><text x="0.2500%" y="319.50">v1`main</text></g><g><title>v1`std::rt::lang_start::_{{closure}} (5,136 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(215,142,24)"/><text x="0.2500%" y="303.50">v1`std::rt::lang_start::_{{closure}}</text></g><g><title>v1`v1::main (5,136 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(250,187,7)"/><text x="0.2500%" y="287.50">v1`v1::main</text></g><g><title>v1`regex::re_unicode::Regex::new (356 samples, 6.93%)</title><rect x="93.0685%" y="261" width="6.9315%" height="15" fill="rgb(228,66,33)"/><text x="93.3185%" y="271.50">v1`regex:..</text></g><g><title>v1`regex::exec::ExecBuilder::build (348 samples, 6.78%)</title><rect x="93.2243%" y="245" width="6.7757%" height="15" fill="rgb(234,215,21)"/><text x="93.4743%" y="255.50">v1`regex:..</text></g><g><title>v1`regex_syntax::parser::Parser::parse (50 samples, 0.97%)</title><rect x="99.0265%" y="229" width="0.9735%" height="15" fill="rgb(222,191,20)"/><text x="99.2765%" y="239.50"></text></g></svg></svg>